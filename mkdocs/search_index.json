{
    "docs": [
        {
            "location": "/",
            "text": "Atomist is all about high quality productivity for your software.\nWhether it be working with large legacy codebases, your own \"majestic\nmonoliths\" or aiming for \"zero overhead microservices\", Atomist\nprovides the tools that allow you to turn your development speed up as\nhigh as it can go.\n\n\nAtomist helps you develop better software more quickly by automating\ncommon tasks in software development and operation.  This automation\ntakes several forms:\n\n\n\n\nCreating a RESTful microservice with a single click using an\n    Atomist Button.\n\n\nUsing Rug editors to perform common tasks on your source code\n    repository, e.g., configuring and enabling a \nTravis CI\n\n    build or updating a \nDocker\n base image to the desired\n    version.\n\n\nEnsuring a project conforms with your standards using a Rug\n    reviewer.\n\n\nManaging a service life cycle, from commits to CI builds to\n    deployments and releases to alerts and corrective action with the\n    Atomist bot.\n\n\n\n\nYou can find more detail on what Atomist can do by following our\nMedium Publication: \nThe Composition\n.  In\nparticular, \nSoftware That Writes And Evolves Software\n\nprovides a more detailed introduction to our thinking around\ndevelopment automation and a video showing an application of the\napproach to the \nElm\n\nlanguage.  \nUnderstand, Automate, Collaborate\n provides more\ndetail on how our approach can greatly increase a team's productivity.\n\n\nWhile often our Atomist bot can guide you through the proper workflow,\nperhaps you are interested in working with the Rug CLI, looking for a\nlittle more help to get started with Atomist, or doing something more\nadvanced like writing your own editor.  If that is what you're looking\nfor, you're in the right place.\n\n\nJust get me going \nright now\n: Quick Starts\n\u00b6\n\n\nThe following are quick recipes that you can use to navigate the most\ncommon activites through Atomist.\n\n\nGo to the Quick Starts...\n\n\nI want to know more: Reference Documentation\n\u00b6\n\n\nThe reference documentation aims to help you get a deeper dive through\nthe tools, techniques and stucture of Atomist:\n\n\nGo to the Reference Documentation...",
            "title": "Welcome to Atomist"
        },
        {
            "location": "/#just-get-me-going-right-now-quick-starts",
            "text": "The following are quick recipes that you can use to navigate the most\ncommon activites through Atomist.  Go to the Quick Starts...",
            "title": "Just get me going right now: Quick Starts"
        },
        {
            "location": "/#i-want-to-know-more-reference-documentation",
            "text": "The reference documentation aims to help you get a deeper dive through\nthe tools, techniques and stucture of Atomist:  Go to the Reference Documentation...",
            "title": "I want to know more: Reference Documentation"
        },
        {
            "location": "/getting-started/",
            "text": "Welcome! So you want to get started with Atomist. You're in the right\nplace. This guide will walk you through setup and getting started.\n\n\nWhat this guide covers\n\u00b6\n\n\n\n\n \nBefore you get started\n\n\n \nSet up the Atomist Slack bot\n\n\n \nConnect Atomist to GitHub\n\n\n \nPutting Atomist to work on your projects\n\n\n \nConnect Atomist to Continuous Integration\n\n\n \nBuilding and Deploying your first Development Automation\n\n\n\n\nClick on any of the steps above to go directly to that step, or click\nNext at the bottom right of this page to continue this guide.",
            "title": "Introduction"
        },
        {
            "location": "/getting-started/#what-this-guide-covers",
            "text": "Before you get started    Set up the Atomist Slack bot    Connect Atomist to GitHub    Putting Atomist to work on your projects    Connect Atomist to Continuous Integration    Building and Deploying your first Development Automation   Click on any of the steps above to go directly to that step, or click\nNext at the bottom right of this page to continue this guide.",
            "title": "What this guide covers"
        },
        {
            "location": "/getting-started/before-you-get-started/",
            "text": "Before you get started with Atomist, you'll need three things:\n\n\n\n\nAn invitation to the \nAtomist Alpha Program\n\n\nA \nSlack\n team\n\n\nA \nGitHub.com\n user\n\n\n\n\n\n\nIf you already have your Atomist Alpha Program invitation, Slack team,\nand GitHub.com account, you can proceed to the next step by clicking\nNext at the bottom-right of this page.\n\n\n\n\nAtomist Alpha Program\n\u00b6\n\n\nIf you have not yet requested access to the Atomist Alpha Program,\nplease fill out the \nrequest form\n.  Using the information\nprovided in the form, we will reach out to you with further\ninstructions for completing your enrollment.  If you have filled out\nthe form and have yet to receive the email with further instructions,\nplease reach out to us in the \nAtomist Community Slack\n\n\n#support\n channel.\n\n\nSlack\n\u00b6\n\n\nChat is one of the main interfaces for Atomist.  Currently we support\nthe \nSlack\n chat platform.  You can use any Slack team you are\ncurrently a member of with Atomist.  If you do not currently use Slack\nor prefer to use a new Slack team with Atomist, you\ncan \ncreate a new Slack team\n for free.\n\n\nGitHub\n\u00b6\n\n\nAtomist wants to get to know your code.  Currently Atomist integrates\nwith \nGithub.com\n.  If you already have a GitHub.com account,\nyou can use Atomist with that.  If you do not have a GitHub.com\naccount, you can \ncreate an account\n for free.",
            "title": "Before You Get Started"
        },
        {
            "location": "/getting-started/before-you-get-started/#atomist-alpha-program",
            "text": "If you have not yet requested access to the Atomist Alpha Program,\nplease fill out the  request form .  Using the information\nprovided in the form, we will reach out to you with further\ninstructions for completing your enrollment.  If you have filled out\nthe form and have yet to receive the email with further instructions,\nplease reach out to us in the  Atomist Community Slack  #support  channel.",
            "title": "Atomist Alpha Program"
        },
        {
            "location": "/getting-started/before-you-get-started/#slack",
            "text": "Chat is one of the main interfaces for Atomist.  Currently we support\nthe  Slack  chat platform.  You can use any Slack team you are\ncurrently a member of with Atomist.  If you do not currently use Slack\nor prefer to use a new Slack team with Atomist, you\ncan  create a new Slack team  for free.",
            "title": "Slack"
        },
        {
            "location": "/getting-started/before-you-get-started/#github",
            "text": "Atomist wants to get to know your code.  Currently Atomist integrates\nwith  Github.com .  If you already have a GitHub.com account,\nyou can use Atomist with that.  If you do not have a GitHub.com\naccount, you can  create an account  for free.",
            "title": "GitHub"
        },
        {
            "location": "/getting-started/invite-atomist-to-slack/",
            "text": "With everything in place to get started with Atomist, you can now\ninvite the Atomist bot to your Slack team.  After you filled out\nthe \nAtomist Alpha Program\n form, you should have received an\nemail invitation that looks something like the following:\n\n\n\n  \n\n\n\n\n\nTo invite the Atomist bot into your Slack team, simply click the\n\"Install Atomist Bot in Slack\" button in the Atomist Alpha Program\ninvitation email.\n\n\nClicking the button will send you to a web page where you will be\nasked to sign into your Slack team if you are not already signed in.\nProvide your Slack team domain and click Continue.\n\n\n\n  \n\n\n\n\n\nOn the next page, provide your email address and password to complete\nthe Slack sign-in.  If you have trouble signing in, check\nout \nSlack help\n.\n\n\n\n  \n\n\n\n\n\nAfter successfully signing in, you will see the authorization page for\nthe Atomist app, including the Slack permissions requested.  Confirm\nthat the correct Slack team is selected and click \"Authorize\".\n\n\n\n  \n\n\n\n\n\nOnce you have successfully authorized the Atomist bot in your Slack\nteam, you will be redirected to a confirmation page.  You can close\nthis page and go back to Slack to continue this guide.\n\n\n\n  \n\n\n\n\n\nBy default, the Atomist bot will be named \n@atomist\n and will join the\n\n#general\n channel in your Slack team.  You can invite the Atomist bot\ninto any other channel in the same way you would invite any other\nuser: an \n@\n mention and invite, the \n/invite @atomist\n command, or\nvia the channel settings > \"Invite team members to join ...\".\n\n\n\n  \n\n\n\n\n\nClick Next in the bottom-right of this page to continue the Getting\nStarted guide.",
            "title": "Invite Atomist to Slack"
        },
        {
            "location": "/getting-started/connect-atomist-to-github/",
            "text": "To help streamline your development flow, Atomist needs access to your\nsource code. Currently Atomist supports integrating\nwith \nGitHub.com\n.\n\n\n\n\nAtomist works with GitHub.com. GitHub Enterprise is not currently supported.\n\n\n\n\nThere are two kinds of authorization Atomist asks for to work with\nGitHub:\n\n\n\n\n\n\nGitHub Account Authorization:\n this authorization determines the\n    GitHub user account or GitHub organization that Atomist will\n    connect to your Slack team.  For example, if you want to receive\n    notifications and take actions in your team's primary GitHub\n    organization, you should select that organization when authorizing\n    Atomist to GitHub.  If you want to use Atomist with your\n    individual user account, then you should select your user when\n    authorizing Atomist to GitHub.\n\n\n\n\nDepending on the third-party application access policy in a GitHub organization, you may need to be an Owner of the organization or have to request access to authorize Atomist.\n\n\n\n\n\n\n\n\nGitHub User Authorization:\n this authorization is done so that\n    commands and actions you ask the Atomist bot to perform on your\n    behalf are carried out as your GitHub user.  For example, if you\n    ask the Atomist bot to create a GitHub issue, it needs to be\n    authorized to create the issue as you.  Every person in your Slack\n    team who wants to ask the Atomist bot to perform actions against\n    GitHub will need to authorize their GitHub user in this way.\n\n\n\n\n\n\nGitHub Account Authorization\n\u00b6\n\n\nThis section will walk you through the GitHub account authorization\nprocess.  You can perform these steps in any Slack channel that the\nAtomist bot has been invited to, or you can directly message the\nAtomist bot.  By default the Atomist bot is named \n@atomist\n and these\ninstructions assume that is its name in your Slack team.  If the\nAtomist bot has a different user name in your Slack team, address\nmessages to that user.\n\n\nFirst, ask the Atomist bot about your GitHub authorizations.\n\n\n@atomist github\n\n\n\n\n\nIf this Slack team does not have a GitHub Account authorized, the\nAtomist bot will show a message requesting you to authorize.\n\n\n\n  \n\n\n\n\n\nYou will see messages for both GitHub account authorization (the first message)  and\nGitHub user authorization (the second message). First, let's do the account\nauthorization. Click on the \"Authorize GitHub Account\" link in the\nmessage. You will be redirected to the GitHub authorization page in\nyour browser.\n\n\n\n  \n\n\n\n\n\nClick the \"Authorize application\" button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser.\n\n\nIf you are not a member of any GitHub organizations, your GitHub user\naccount will be automatically selected, and you will not see any\norganizations listed.  If you are a member of one or more GitHub\norganizations, after authorizing Atomist, you will receive a direct\nmessage in Slack from the Atomist bot asking whether to use your\nGitHub user account or one of your organizations as the GitHub account\nto associate with Atomist.\n\n\n\n  \n\n\n\n\n\nSelect the GitHub account (your user account or an organization) to\nassociate with Atomist by clicking its button.  Once selected,\nthe Atomist bot will show a confirmation message in Slack.\n\n\n\n  \n\n\n\n\n\nCongratulations, your GitHub account is now authorized.\n\n\nGitHub User Authorization\n\u00b6\n\n\nNow, let's associate your GitHub user with your Slack user.  To do\nthis, scroll back in the history or enter \n@atomist github\n to show\nthe GitHub authorization message again.\n\n\n\n  \n\n\n\n\n\nClick on the \"Authorize GitHub User\" link in the message.  You will be\nredirected to the GitHub authorization page in your browser.\n\n\n\n  \n\n\n\n\n\nClick the \"Authorize application\" button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser, where\nyou will see a confirmation message.\n\n\n\n  \n\n\n\n\n\nIf you use a native client for Slack, you can close the Slack browser\nwindow and go back to your preferred Slack client.  If you use your\nweb browser to access Slack, you will likely have several Slack tabs\nor windows open at this point.  Feel free to close all but one.\n\n\nClick Next in the lower-right corner of this page to continue the\nGetting Started guide.",
            "title": "Connect Atomist to GitHub"
        },
        {
            "location": "/getting-started/connect-atomist-to-github/#github-account-authorization",
            "text": "This section will walk you through the GitHub account authorization\nprocess.  You can perform these steps in any Slack channel that the\nAtomist bot has been invited to, or you can directly message the\nAtomist bot.  By default the Atomist bot is named  @atomist  and these\ninstructions assume that is its name in your Slack team.  If the\nAtomist bot has a different user name in your Slack team, address\nmessages to that user.  First, ask the Atomist bot about your GitHub authorizations.  @atomist github  If this Slack team does not have a GitHub Account authorized, the\nAtomist bot will show a message requesting you to authorize.  \n     You will see messages for both GitHub account authorization (the first message)  and\nGitHub user authorization (the second message). First, let's do the account\nauthorization. Click on the \"Authorize GitHub Account\" link in the\nmessage. You will be redirected to the GitHub authorization page in\nyour browser.  \n     Click the \"Authorize application\" button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser.  If you are not a member of any GitHub organizations, your GitHub user\naccount will be automatically selected, and you will not see any\norganizations listed.  If you are a member of one or more GitHub\norganizations, after authorizing Atomist, you will receive a direct\nmessage in Slack from the Atomist bot asking whether to use your\nGitHub user account or one of your organizations as the GitHub account\nto associate with Atomist.  \n     Select the GitHub account (your user account or an organization) to\nassociate with Atomist by clicking its button.  Once selected,\nthe Atomist bot will show a confirmation message in Slack.  \n     Congratulations, your GitHub account is now authorized.",
            "title": "GitHub Account Authorization"
        },
        {
            "location": "/getting-started/connect-atomist-to-github/#github-user-authorization",
            "text": "Now, let's associate your GitHub user with your Slack user.  To do\nthis, scroll back in the history or enter  @atomist github  to show\nthe GitHub authorization message again.  \n     Click on the \"Authorize GitHub User\" link in the message.  You will be\nredirected to the GitHub authorization page in your browser.  \n     Click the \"Authorize application\" button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser, where\nyou will see a confirmation message.  \n     If you use a native client for Slack, you can close the Slack browser\nwindow and go back to your preferred Slack client.  If you use your\nweb browser to access Slack, you will likely have several Slack tabs\nor windows open at this point.  Feel free to close all but one.  Click Next in the lower-right corner of this page to continue the\nGetting Started guide.",
            "title": "GitHub User Authorization"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/",
            "text": "Atomist can now be put to work, creating projects, editing code,\nmanaging issues, and generally tying your whole development process\ntogether.  Let's kick things off by having the Atomist bot create a\nnew project for us.\n\n\nUse Atomist to Create a New Project\n\u00b6\n\n\nYou can ask the Atomist bot to create a new project for you either\nthrough a direct message or by addressing the bot in a channel it has\nbeen invited to.  For our purposes, we will assume you are starting\nthe conversation in your Slack team's \n#general\n channel.  In the\n\n#general\n channel, type the following message.\n\n\n@atomist generators\n\n\n\n\n\nThis will result in a list of project generators that the Atomist bot\ncan use on your behalf to create a new project in GitHub.  The Atomist\nbot will respond with a list of project generators something like the\nfollowing.\n\n\n\n  \n\n\n\n\n\n\n\nYou can create your own generators.  Creating your own generators\nwill soon be added as a \nQuick Start\n.\n\n\n\n\nWhile the full list of project generators \ncan\n be useful if you are\njust browsing, we want to create a \nSpring Boot\n REST service, so we can\nnarrow down the list by providing a search term, \nspring\n in this\ncase.\n\n\n@atomist generators spring\n\n\n\n\n\nThis time the Atomist bot should respond with a list of project\ngenerators that includes the \nNewSpringBootRestService\n generator.\n\n\n\n  \n\n\n\n\n\nClick on the \"Generate project\" button to begin the process of\ncreating your new project.\n\n\n\n  \n\n\n\n\n\nThe Atomist bot will respond with a message telling you what project\ngenerator you created and then create a \nthread\n off that message to\ngather the information it needs to create the project.  Click now on\nthe \"1 reply\" link below the message to open up the thread in Slack.\nYou will see that the Atomist bot has asked you a question in the\nthread.\n\n\n\n  \n\n\n\n\n\nType in a name for your new project and press \n.  The project\nname must be a valid GitHub repository name, containing only letters,\nnumbers, dashes (\n-\n), and underscores (\n_\n).  Since the project name\nis the only required input parameter for the\n\nNewSpringBootRestService\n generator, the Atomist bot will respond\nwith a message showing the project name you entered and the default\nvalues for all the other input parameters.\n\n\n\n  \n\n\n\n\n\nYou can change the value for any of the parameters by typing in \nset\n<parameter> <value>\n before you click on \nGenerate project\n.\n\n\nNow click on \nGenerate project\n and you'll see several things happen:\n\n\n\n\nIn the thread, the Atomist bot will announce \"One moment while I\n    run the generator.\"\n\n\nAtomist will go and create the repository for you in the GitHub\n    account you previously authorized.\n\n\nThe Atomist bot will announce that it has \"Successfully generated\n    your project\" back in the main channel where the project creation\n    thread was started in, in our case that would be \n#general\n.  The\n    announcement will contain a link to the newly created project.\n\n\nAtomist will create a new channel in your Slack team for the new\n    project, that will also be associated with the project's\n    repository so when you want to work on that project, you do it in\n    that channel.\n\n\n\n\n\n  \n\n\n\n\n\nClick on the project link to see your project in GitHub.\n\n\n\n  \n\n\n\n\n\nClone your new repository from GitHub and you will have a new, working\nproject courtesy of Atomist.\n\n\nPlugging Atomist into events from your Project Repository\n\u00b6\n\n\nWith \n@atomist\n now successfully authorized you can use the bot to manipulate your repositories on GitHub. However another responsibility of Atomist is to be able to react to events that occur on your repositories as well.\n\n\nTo enable those repository events to promulgate into Atomist you need to configure a webhook from your GitHub organization. Navigate to your organizations GitHub page and then click on \nSettings\n and, from the menu, \nWebhooks\n:\n\n\n\n  \n\n\n\n\n\nClick on \nAdd webhook\n and then fill in the details shown below:\n\n\n\n  \n\n\n\n\n\nWhen you're done click on \nAdd webhook\n and you should see the webhook added to the list for your organization:\n\n\n\n  \n\n\n\n\n\nTo see you new webhook in action, and how those events get interpreted in \n@atomist\n, make a small edit to one of the files in your repository (the \nREADME.md\n is usually a good candidate to make a small, inconseqential edit) either through the GitHub user interface or through a commit/push from a local edit.\n\n\nWhen you have done the commit/push to master you should see those events happily appearing in your project's channel, \n#sprockets\n in our example here:\n\n\n\n  \n\n\n\n\n\nTeaching Atomist a new Skill and Interacting with GitHub\n\u00b6\n\n\nNow let's do something else with GitHub. Let's create a new issue using \n@atomist\n. First we need to teach the Bot a new skill by registering a new \ncommand\n. Execute the following in your project's channel:\n\n\n@atomist register \ncommand\n\n\n\n\n\n\nYou'll then be walked through an interaction with \n@atomist\n in a new thread to add a new command to Atomist's repertoire:\n\n\n\n  \n\n\n\n\n\nWhen you complete this set of interactions you'll see a summary of the new command registration:\n\n\n\n  \n\n\n\n\n\nOnce you click the \nSubmit\n button you will receive a message back in the original channel that \n@atomist\n has successfully registered a new command:\n\n\n\n  \n\n\n\n\n\nRegistering a new command is like teaching \n@atomist\n a new skill. You've now enabled \n@atomist\n to be able to create a new issue for you on a repository in your GitHub organization, so let's give that a spin by entering the following in the \nsprocket\n channel that's associated with the \nsprocket\n project on GitHub:\n\n\n@atomist create issue\n\n\n\n\n\nAs usual, \n@atomist\n will now start a thread to collate all the information necessary to create a new issue on the \nsprocket\n project:\n\n\n\n  \n\n\n\n\n\nOnce you have entered all the new issue's information you will see a summary such as:\n\n\n\n  \n\n\n\n\n\nClick on \nSubmit\n and \n@atomist\n will respond with the following in the main \n#sprocket\n channel:\n\n\n\n  \n\n\n\n\n\nBut that's not where the possible interaction stops. \n@atomist\n will also post a panel to the \n#sprocket\n channel that contains more information about your newly created issue \nand\n some buttons to indicate some things you might want to do next:\n\n\n\n  \n\n\n\n\n\nGo ahead and click on the link to see your issue currently on GitHub. Now head back to the \n#sprocket\n channel in Slack and click on the \nBug\n button and you will label the issue as a bug:\n\n\n\n  \n\n\n\n\n\nThe issue panel in Slack will then refresh with the set of buttons that you can next choose to work with.\n\n\nNow, remember that we plugged Atomist into the events coming from your \nsprocket\n project earlier? We can now see that in action. Click on the link to open up the new issue in GitHub:\n\n\n\n  \n\n\n\n\n\nNotice how \n@atomist\n has labelled the issue a bug, just as you instructed it.\n\n\nNow imagine that you're another team member who has noticed this new issue and wants to add a comment from inside GitHub. Add a new comment and click on \nSubmit\n:\n\n\n\n  \n\n\n\n\n\nYou'll get a notification from the \n#sprocket\n channel in Slack that looks something like:\n\n\n\n  \n\n\n\n\n\nAtomist has been watching that repository and when something important, such as a new comment, occurs Atomist detects that this has happened and knows to notify people interested in that project in the associated \n#sprocket\n channel.\n\n\nLet's teach \n@atomist\n one last thing. It is often useful to be reminded what issues you've closed off and opened in the last day or so, and Atomist can do that for you once we register the new \nListIssues\n command:\n\n\n\n  \n\n\n\n\n\nOnce you have entered the information shown above you will be prompted to submit it to register your new command:\n\n\n\n  \n\n\n\n\n\nClick on \nSubmit\n and you should see the following in the main channel that you registered the command from:\n\n\n\n  \n\n\n\n\n\nNow you can enter \n@atomist list issues\n from any channel that \n@atomist\n has been invited to and you'll see what issues have been assigned to you and are open and/or recently closed:\n\n\n\n  \n\n\n\n\n\nNow go ahead and assign the issue you created earlier to yourself. You can do this by clicking on the \nAssign\n button on the issue panel in the \n#sprocket\n channel and entering your GitHub username in the resulting thread with \n@atomist\n:\n\n\n\n  \n\n\n\n\n\nWith your information entered in the thread you'll be asked to \nSubmit\n it:\n\n\n\n  \n\n\n\n\n\nClick on \nSubmit\n and you'll get a short response from \n@atomist\n in the \n#sprocket\n channel to indicate that the issue has been successfully assigned:\n\n\n\n  \n\n\n\n\n\nNow when you do \n@atomist list issues\n you will see the new issue assigned to you:\n\n\n\n  \n\n\n\n\n\nUse Atomist on an Existing Project by inviting it to an Existing Channel\n\u00b6\n\n\nTo be really useful, \n@atomist\n needs to be invited to the channels where you want it. Try inviting \n@atomist\n, using \n/invite @atomist\n, to a channel of your choosing. We suggest choosing a channel where you would like to receive notifications from a specific GitHub repo.\n\n\nFor our purposes here simply create a new channel in Slack, we're going to use \n#sprockets\n here. Then invite \n@atomist\n to that channel by entering the following in \n#sprockets\n:\n\n\n/invite @atomist\n\n\n\n\n\n@atomist\n listens for GitHub activity on a particular repo and notifies in its associated slack channel. In order to have \n@atomist\n listen to a specific repo and notify in the channel you just invited it to it needs to know which repo to listen to. If one is not already set when you invite \n@atomist\n to the channel, it will ask you for a repo name.",
            "title": "Putting Atomist to Work on Your Projects"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#use-atomist-to-create-a-new-project",
            "text": "You can ask the Atomist bot to create a new project for you either\nthrough a direct message or by addressing the bot in a channel it has\nbeen invited to.  For our purposes, we will assume you are starting\nthe conversation in your Slack team's  #general  channel.  In the #general  channel, type the following message.  @atomist generators  This will result in a list of project generators that the Atomist bot\ncan use on your behalf to create a new project in GitHub.  The Atomist\nbot will respond with a list of project generators something like the\nfollowing.  \n      You can create your own generators.  Creating your own generators\nwill soon be added as a  Quick Start .   While the full list of project generators  can  be useful if you are\njust browsing, we want to create a  Spring Boot  REST service, so we can\nnarrow down the list by providing a search term,  spring  in this\ncase.  @atomist generators spring  This time the Atomist bot should respond with a list of project\ngenerators that includes the  NewSpringBootRestService  generator.  \n     Click on the \"Generate project\" button to begin the process of\ncreating your new project.  \n     The Atomist bot will respond with a message telling you what project\ngenerator you created and then create a  thread  off that message to\ngather the information it needs to create the project.  Click now on\nthe \"1 reply\" link below the message to open up the thread in Slack.\nYou will see that the Atomist bot has asked you a question in the\nthread.  \n     Type in a name for your new project and press  .  The project\nname must be a valid GitHub repository name, containing only letters,\nnumbers, dashes ( - ), and underscores ( _ ).  Since the project name\nis the only required input parameter for the NewSpringBootRestService  generator, the Atomist bot will respond\nwith a message showing the project name you entered and the default\nvalues for all the other input parameters.  \n     You can change the value for any of the parameters by typing in  set\n<parameter> <value>  before you click on  Generate project .  Now click on  Generate project  and you'll see several things happen:   In the thread, the Atomist bot will announce \"One moment while I\n    run the generator.\"  Atomist will go and create the repository for you in the GitHub\n    account you previously authorized.  The Atomist bot will announce that it has \"Successfully generated\n    your project\" back in the main channel where the project creation\n    thread was started in, in our case that would be  #general .  The\n    announcement will contain a link to the newly created project.  Atomist will create a new channel in your Slack team for the new\n    project, that will also be associated with the project's\n    repository so when you want to work on that project, you do it in\n    that channel.   \n     Click on the project link to see your project in GitHub.  \n     Clone your new repository from GitHub and you will have a new, working\nproject courtesy of Atomist.",
            "title": "Use Atomist to Create a New Project"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#plugging-atomist-into-events-from-your-project-repository",
            "text": "With  @atomist  now successfully authorized you can use the bot to manipulate your repositories on GitHub. However another responsibility of Atomist is to be able to react to events that occur on your repositories as well.  To enable those repository events to promulgate into Atomist you need to configure a webhook from your GitHub organization. Navigate to your organizations GitHub page and then click on  Settings  and, from the menu,  Webhooks :  \n     Click on  Add webhook  and then fill in the details shown below:  \n     When you're done click on  Add webhook  and you should see the webhook added to the list for your organization:  \n     To see you new webhook in action, and how those events get interpreted in  @atomist , make a small edit to one of the files in your repository (the  README.md  is usually a good candidate to make a small, inconseqential edit) either through the GitHub user interface or through a commit/push from a local edit.  When you have done the commit/push to master you should see those events happily appearing in your project's channel,  #sprockets  in our example here:",
            "title": "Plugging Atomist into events from your Project Repository"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#teaching-atomist-a-new-skill-and-interacting-with-github",
            "text": "Now let's do something else with GitHub. Let's create a new issue using  @atomist . First we need to teach the Bot a new skill by registering a new  command . Execute the following in your project's channel:  @atomist register  command   You'll then be walked through an interaction with  @atomist  in a new thread to add a new command to Atomist's repertoire:  \n     When you complete this set of interactions you'll see a summary of the new command registration:  \n     Once you click the  Submit  button you will receive a message back in the original channel that  @atomist  has successfully registered a new command:  \n     Registering a new command is like teaching  @atomist  a new skill. You've now enabled  @atomist  to be able to create a new issue for you on a repository in your GitHub organization, so let's give that a spin by entering the following in the  sprocket  channel that's associated with the  sprocket  project on GitHub:  @atomist create issue  As usual,  @atomist  will now start a thread to collate all the information necessary to create a new issue on the  sprocket  project:  \n     Once you have entered all the new issue's information you will see a summary such as:  \n     Click on  Submit  and  @atomist  will respond with the following in the main  #sprocket  channel:  \n     But that's not where the possible interaction stops.  @atomist  will also post a panel to the  #sprocket  channel that contains more information about your newly created issue  and  some buttons to indicate some things you might want to do next:  \n     Go ahead and click on the link to see your issue currently on GitHub. Now head back to the  #sprocket  channel in Slack and click on the  Bug  button and you will label the issue as a bug:  \n     The issue panel in Slack will then refresh with the set of buttons that you can next choose to work with.  Now, remember that we plugged Atomist into the events coming from your  sprocket  project earlier? We can now see that in action. Click on the link to open up the new issue in GitHub:  \n     Notice how  @atomist  has labelled the issue a bug, just as you instructed it.  Now imagine that you're another team member who has noticed this new issue and wants to add a comment from inside GitHub. Add a new comment and click on  Submit :  \n     You'll get a notification from the  #sprocket  channel in Slack that looks something like:  \n     Atomist has been watching that repository and when something important, such as a new comment, occurs Atomist detects that this has happened and knows to notify people interested in that project in the associated  #sprocket  channel.  Let's teach  @atomist  one last thing. It is often useful to be reminded what issues you've closed off and opened in the last day or so, and Atomist can do that for you once we register the new  ListIssues  command:  \n     Once you have entered the information shown above you will be prompted to submit it to register your new command:  \n     Click on  Submit  and you should see the following in the main channel that you registered the command from:  \n     Now you can enter  @atomist list issues  from any channel that  @atomist  has been invited to and you'll see what issues have been assigned to you and are open and/or recently closed:  \n     Now go ahead and assign the issue you created earlier to yourself. You can do this by clicking on the  Assign  button on the issue panel in the  #sprocket  channel and entering your GitHub username in the resulting thread with  @atomist :  \n     With your information entered in the thread you'll be asked to  Submit  it:  \n     Click on  Submit  and you'll get a short response from  @atomist  in the  #sprocket  channel to indicate that the issue has been successfully assigned:  \n     Now when you do  @atomist list issues  you will see the new issue assigned to you:",
            "title": "Teaching Atomist a new Skill and Interacting with GitHub"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#use-atomist-on-an-existing-project-by-inviting-it-to-an-existing-channel",
            "text": "To be really useful,  @atomist  needs to be invited to the channels where you want it. Try inviting  @atomist , using  /invite @atomist , to a channel of your choosing. We suggest choosing a channel where you would like to receive notifications from a specific GitHub repo.  For our purposes here simply create a new channel in Slack, we're going to use  #sprockets  here. Then invite  @atomist  to that channel by entering the following in  #sprockets :  /invite @atomist  @atomist  listens for GitHub activity on a particular repo and notifies in its associated slack channel. In order to have  @atomist  listen to a specific repo and notify in the channel you just invited it to it needs to know which repo to listen to. If one is not already set when you invite  @atomist  to the channel, it will ask you for a repo name.",
            "title": "Use Atomist on an Existing Project by inviting it to an Existing Channel"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/",
            "text": "Atomist can listen for CI events, correlate them with the commits that triggered the build, and show contextualized notifications in the Slack channel.\n\n\nTo enable this, we need to connect Atomist to your CI system. Atomist currently works with Travis CI and Jenkins. Use either the \nTravis CI\n or \nJenkins\n section to help you configure Atomist to connect with your CI.\n\n\nTravis CI Setup\n\u00b6\n\n\nTravis uses your GitHub user access token. Once you have set up Travis for your GitHub account, you are ready to go. No additional authorization required. If you have not yet setup Travis and want to as part of getting started with Atomist, please see the \nTravis getting started\n documentation.\n\n\n\n\nAtomist works with Travis-CI.org and Travis-CI.com. Travis Enterprise is not currently supported.\n\n\n\n\nYou will need to enable your projects to be built using Travis if they aren't already set up. See the \nTravis documentation\n to set up Travis builds.\n\n\nNext, configure your Travis builds to send notifications to Atomist. In the \n.travis.yml\n configuration file in the project repo, add the following webhook configuration.\n\n\nnotifications:\n\n  \nwebhooks:\n\n    \nurls:\n\n      \n-\n \nhttp://webhook.atomist.com/travis\n\n    \non_success:\n \nalways\n\n    \non_failure:\n \nalways\n\n    \non_start:\n \nalways\n\n    \non_cancel:\n \nalways\n\n    \non_error:\n \nalways\n\n\n\n\n\n\nThat's all that you need to do. Now, Travis will send all notifications to Atomist. To test it out, see the \nIn Action: CI Notifications\n section.\n\n\nJenkins Setup\n\u00b6\n\n\n\n\nAtomist requires the \nNotification plugin\n for Jenkins. The Notification plugin is what will send event notifications to Atomist, so that we can notify and take action based on build events.\n\n\n\n\nIf you don't already have the Notification plugin installed, go to the Plugin Manager in the Jenkins admin interface, select it and complete the installation.\n\n\n\n  \n\n\n\n\n\nTo enable the plugin, be sure to restart Jenkins after installation.\n\n\n\n  \n\n\n\n\n\nNow that the Notification plugin is installed and enabled, it's time to configure project Notifications settings. Select a project that you would like Atomist to get events from. Next, select \"Configure\".\n\n\n\n  \n\n\n\n\n\nWe're going to walk through setting up a webhook. In the Job Notifications section of the project configuration, click the \"Add Endpoint\" button.\n\n\n\n  \n\n\n\n\n\nIn the Notification configuration section, configure the endpoint URL as \nhttps://webhook.atomist.com/jenkins\n and check that the other parameters match the information shown below.\n\n\n\n  \n\n\n\n\n\nNow, Jenkins is set up to send all notifications to Atomist. To test it out, see the next section, \nIn Action: CI Notifications\n.\n\n\nIn Action:\n CI Notifications\n\u00b6\n\n\nNow that CI is also configured, let's take a look at how Atomist handles CI events.\n\n\nLet's make a little change the \nREADME.md\n of our \nsprockets\n repo, then commit it.\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\nThis project is configured so that the commit triggers a Travis build. Atomist is now receiving CI notifications, and is notified of the build started.",
            "title": "Connect Atomist to CI"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/#travis-ci-setup",
            "text": "Travis uses your GitHub user access token. Once you have set up Travis for your GitHub account, you are ready to go. No additional authorization required. If you have not yet setup Travis and want to as part of getting started with Atomist, please see the  Travis getting started  documentation.   Atomist works with Travis-CI.org and Travis-CI.com. Travis Enterprise is not currently supported.   You will need to enable your projects to be built using Travis if they aren't already set up. See the  Travis documentation  to set up Travis builds.  Next, configure your Travis builds to send notifications to Atomist. In the  .travis.yml  configuration file in the project repo, add the following webhook configuration.  notifications: \n   webhooks: \n     urls: \n       -   http://webhook.atomist.com/travis \n     on_success:   always \n     on_failure:   always \n     on_start:   always \n     on_cancel:   always \n     on_error:   always   That's all that you need to do. Now, Travis will send all notifications to Atomist. To test it out, see the  In Action: CI Notifications  section.",
            "title": "Travis CI Setup"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/#jenkins-setup",
            "text": "Atomist requires the  Notification plugin  for Jenkins. The Notification plugin is what will send event notifications to Atomist, so that we can notify and take action based on build events.   If you don't already have the Notification plugin installed, go to the Plugin Manager in the Jenkins admin interface, select it and complete the installation.  \n     To enable the plugin, be sure to restart Jenkins after installation.  \n     Now that the Notification plugin is installed and enabled, it's time to configure project Notifications settings. Select a project that you would like Atomist to get events from. Next, select \"Configure\".  \n     We're going to walk through setting up a webhook. In the Job Notifications section of the project configuration, click the \"Add Endpoint\" button.  \n     In the Notification configuration section, configure the endpoint URL as  https://webhook.atomist.com/jenkins  and check that the other parameters match the information shown below.  \n     Now, Jenkins is set up to send all notifications to Atomist. To test it out, see the next section,  In Action: CI Notifications .",
            "title": "Jenkins Setup"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/#in-action-ci-notifications",
            "text": "Now that CI is also configured, let's take a look at how Atomist handles CI events.  Let's make a little change the  README.md  of our  sprockets  repo, then commit it.  \n     \n     This project is configured so that the commit triggers a Travis build. Atomist is now receiving CI notifications, and is notified of the build started.",
            "title": "In Action: CI Notifications"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/",
            "text": "Right! You've seen some of the automation between issues, commits, builds that we provide out-of-the-box and now let's automate an action.\n\n\nIn Atomist that means writing a \nhandler\n in TypeScript using the Atomist's \nRug\n support. The \nhandler\n will be triggered by a certain type of activity that Atomist can detect, in this example case you want to notify the team when an issue labeled 'bug' gets fixed.\n\n\nCreate a new Rug Handlers project for your new automation\n\u00b6\n\n\nThe first thing you need is a project for your code. Although you can add Atomist Rug code to any existing project by simply adding a \n.atomist\n directory along with a few support files in this case we'll create and publish a new project for your first Atomist Rug development automation.\n\n\nAsk the Bot to list out the project generator that you need by typing \n@atomist generator rug\n and select the \nNewHandlersProject\n generator:\n\n\n\n  \n\n\n\n\n\nClick on the \nCreate project\n button and enter the following information to create your new project:\n\n\n\n  \n\n\n\n\n\nOnce done you can click on \nGenerate project\n in the project generation summary:\n\n\n\n  \n\n\n\n\n\nThen \n@atomist\n will create the new project in your GitHub organization:\n\n\n\n  \n\n\n\n\n\nAlso \n@atomist\n will have created a new \n#handlers\n channel in Slack that's tied to that project that shows some initial setup commits made by the project generator:\n\n\n\n  \n\n\n\n\n\nClone the new \nhandlers\n project locally and, because we're using TypeScript, change directory into the \n.atomist\n directory of the local \nhandlers\n project and enter \nnpm install\n to get the TypeScript library dependencies installed:\n\n\n\n\nTo develop your rugs in TypeScript you will need \nnode.js\n and \nnpm\n installed locally.\n\n\n\n\n> npm install\n/.../handlers/.atomist\n\u251c\u2500\u252c @atomist/github@0.2.0\n\u2502 \u2514\u2500\u2500 @atomist/rug@0.10.0\n\u251c\u2500\u2500 @atomist/rug@0.12.0\n\u2514\u2500\u252c @atomist/travis@0.6.1\n  \u2514\u2500\u2500 @atomist/rug@0.10.0\n\n\n\n\n\nNow it's time to write your new handler.\n\n\nWriting your new \nhandler\n\u00b6\n\n\nThe \nhandlers\n project you just generated contains a number of pre-existing handlers that you can take inspiration from. For our purposes we only want one new handler and the closest example in the \nhandlers\n project is \n.atomist/handlers/IssueHandler.ts\n.\n\n\nThe generated \nhandlers\n project contains a whole host of sample handlers and executors, including all the default handlers that you've seen in action already. You need to keep those handlers in this project as when you publish this Rug archive you will effectively override the default handlers, and we don't want to lose that functionality we've already seen.\n\n\nIn a new \n.atomist/handlers/CloseIssueThanks.ts\n file enter the following handler code:\n\n\nimport\n \n{\nAtomist\n}\n \nfrom\n \n'@atomist/rug/operations/Handler'\n\n\nimport\n \n{\nTreeNode\n}\n \nfrom\n \n'@atomist/rug/tree/PathExpression'\n\n\ndeclare\n \nvar\n \natomist\n: \nAtomist\n\n\n\natomist\n.\non\n<\nTreeNode\n,\n \nTreeNode\n>\n(\n\"/Issue()/belongsTo::Repo()/channel::ChatChannel()\"\n,\n \nm\n \n=>\n \n{\n\n   \nlet\n \nissue\n \n=\n \nm\n.\nroot\n()\n \nas\n \nany\n\n\n   \nif\n \n(\nissue\n.\nstate\n()\n \n!=\n \n\"closed\"\n)\n \n{\n\n     \nreturn\n\n   \n}\n\n\n   \natomist\n.\nmessageBuilder\n()\n\n    \n.\nsay\n(\n\"Thanks for closing this issue on \"\n \n+\n\n         \nissue\n.\nbelongsTo\n().\nname\n())\n\n    \n.\non\n(\nissue\n.\nbelongsTo\n().\nchannel\n().\nid\n()).\nsend\n()\n\n\n})\n\n\n\n\n\n\nNow it's time to publish and test your new handler.\n\n\n\n\nNOTE\n:\n\n\n\n\n\n\nAt the moment you can't test handlers locally and instead you need to publish and test your handler is invoked from it's results in Atomist.\n\n\n\n\nPublish your new \nhandler\n\u00b6\n\n\nTo make Atomist aware of your new \nhandler\n you need to publish the \nhandler\n project. This is often done via continuous integration but for our purposes here you're going to see how it's done manually using the \nRug CLI\n.\n\n\nInstalling and Configuring the Rug CLI\n\u00b6\n\n\nFirstly make sure you've installed the latest Rug CLI for your platform. Then in order to publish new rugs you need to configure the \nRug CLI\n with the credentials it needs to push your rugs to Atomists. To see this problem you can try to run the command \nrug repositories configure\n and you should see:\n\n\n> rug repositories configure\n\nNo token configured. Please run repositories login before running this command.\n\nRun the following \ncommand\n \nfor\n usage help:\n  rug repositories configure --help\n\n\n\n\n\nTo configure the Rug CLI you need to execute the \nrug repositories login\n command providing your GitHub credentials:\n\n\n> rug repositories login\n\n\nThe Rug CLI needs your GitHub login to identify you.\n\nThe \ncommand\n will create a GitHub Personal Access Token with scope \n'read:org'\n\nwhich you can revoke any \ntime\n on https://github.com/settings/tokens.  Your\npassword will not be displayed or stored. Your sensitive information will not\nbe sent to Atomist\n;\n only to api.github.com.\n\n  \u2192 Username : .....\n  \u2192 Password : .....\n\n  Please provide a MFA code\n  \u2192 MFA code : .....\n\nSuccessfully logged in to GitHub and stored token in ~/.atomist/cli.yml\n\n\n\n\n\n\n\nNOTE\n: No passwords are stored, only a unique personal access token with org/read scope. Also if you are using 2 Factor Authentication with GitHub you will be prompted for the \nMFA code\n as shown above.\n\n\n\n\nNow when you execute \nrug repositories configure\n you should see the Rug CLI configured with your team's unique repository:\n\n\n> rug repositories configure\n\n\u2192 Repositories\n  <unique identifier of your team's repository>\n    <your unique team's repository url here>\n\n\n\n\n\nYou're now all set to publish your \nhandlers\n project.\n\n\nPublishing your \nhandlers\n project using the Rug CLI\n\u00b6\n\n\nThe Rug CLI has the \npublish\n command to publish a Rug archive from your local copy. Execute the \nrug publish\n command from inside your \nhandlers\n project directory:\n\n\n> rug publish\nResolving dependencies \nfor\n antifragilesoftware:handlers:0.1.0 \u2190 \nlocal\n completed\nInvoking TypeScript Compiler on ts script sources                                                                   \n  Created .atomist/handlers/CloseIssueThanksHandler.js.map                                                          \n  Created .atomist/handlers/CloseIssueThanksHandler.js                                                              \nProcessing script sources completed\nLoading antifragilesoftware:handlers:0.1.0 \u2190 \nlocal\n into runtime completed\n  Created META-INF/maven/antifragilesoftware/handlers/pom.xml                                                       \n  Created .atomist/manifest.yml                                                                                     \n  Created .atomist/metadata.json                                                                                    \nGenerating archive metadata completed\n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip \u2192 t3v0s7ss2 \n(\n186\n kb\n)\n succeeded          \n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.pom \u2192 t3v0s7ss2 \n(\n927\n bytes\n)\n succeeded       \n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0-metadata.json \u2192 t3v0s7ss2 \n(\n762\n bytes\n)\n succeeded\n  Downloading antifragilesoftware/handlers/maven-metadata.xml \u2190 t3v0s7ss2 \n(\n382\n bytes\n)\n succeeded           \n  Uploading antifragilesoftware/handlers/maven-metadata.xml \u2192 t3v0s7ss2 \n(\n334\n bytes\n)\n succeeded             \nPublishing archive into remote repository completed\n\n\u2192 Archive\n  ~/code/src/github.com/antifragilesoftware/handlers/.atomist/target/handlers-0.1.0.zip \n(\n186\n kb in \n165\n files\n)\n\n\n\u2192 URL\n  https://atomist.jfrog.io/atomist/T3V0S7SS2/antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip\n\nSuccessfully published archive \nfor\n antifragilesoftware:handlers:0.1.0\n\n\n\n\n\nYour new \nhandlers\n rugs are now ready for action in your Atomist environment. To test that everything has published correctly you can execute \nrug search\n and you should see your Rug archive listed just for you:\n\n\n> rug search\nSearching https://api.atomist.com/catalog                                                                         \nSearching catalogs completed\n\n\u2192 Remote Archives \n(\n38\n archives found\n)\n\nyourorg:handlers \n[\nprivate\n]\n \n(\n0\n.1.0\n)\n\n...\n\n\n\n\n\nSeeing your new \nhandler\n in action\n\u00b6\n\n\nNow you can give your new \nCloseIssueThanksHandler\n handler a spin! Head back to the \n#sprocket\n channel and you should see a button to \nClose\n the issue we created earlier:\n\n\n\n  \n\n\n\n\n\nClick on \nClose\n (you could also close the issue in GitHub if you prefer) and several things will happen. Firstly \n@atomist\n will indicate with a message that the issue has been edited...\n\n\n\n  \n\n\n\n\n\n... then the panel for the issue in Slack will be updated with a \nReopen\n button ...\n\n\n\n  \n\n\n\n\n\n... and finally your new handler will be invoked and the \"thanks\" message will be displayed!\n\n\n\n  \n\n\n\n\n\nThere, you did it! You just created a new automation, and taught the bot to listen for events and run that automation!\n\n\nCongratulations, you've completed the Getting Started guide for Atomist!\n\u00b6\n\n\nYou've come a long way but to get even \nmore\n out of your development automation here are some suggested next steps...\n\n\n\n\nChecking out the \nQuick Starts\n for short introductions to a number of Atomist features.\n\n\nGet comfortable with writing and editing your development automation Rugs with the \nRug CLI\n.\n\n\nTake a deep-dive through Rug using \n@atomist\n in with the \nRug Koans\n.",
            "title": "Build Your Own Development Automation"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#create-a-new-rug-handlers-project-for-your-new-automation",
            "text": "The first thing you need is a project for your code. Although you can add Atomist Rug code to any existing project by simply adding a  .atomist  directory along with a few support files in this case we'll create and publish a new project for your first Atomist Rug development automation.  Ask the Bot to list out the project generator that you need by typing  @atomist generator rug  and select the  NewHandlersProject  generator:  \n     Click on the  Create project  button and enter the following information to create your new project:  \n     Once done you can click on  Generate project  in the project generation summary:  \n     Then  @atomist  will create the new project in your GitHub organization:  \n     Also  @atomist  will have created a new  #handlers  channel in Slack that's tied to that project that shows some initial setup commits made by the project generator:  \n     Clone the new  handlers  project locally and, because we're using TypeScript, change directory into the  .atomist  directory of the local  handlers  project and enter  npm install  to get the TypeScript library dependencies installed:   To develop your rugs in TypeScript you will need  node.js  and  npm  installed locally.   > npm install\n/.../handlers/.atomist\n\u251c\u2500\u252c @atomist/github@0.2.0\n\u2502 \u2514\u2500\u2500 @atomist/rug@0.10.0\n\u251c\u2500\u2500 @atomist/rug@0.12.0\n\u2514\u2500\u252c @atomist/travis@0.6.1\n  \u2514\u2500\u2500 @atomist/rug@0.10.0  Now it's time to write your new handler.",
            "title": "Create a new Rug Handlers project for your new automation"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#writing-your-new-handler",
            "text": "The  handlers  project you just generated contains a number of pre-existing handlers that you can take inspiration from. For our purposes we only want one new handler and the closest example in the  handlers  project is  .atomist/handlers/IssueHandler.ts .  The generated  handlers  project contains a whole host of sample handlers and executors, including all the default handlers that you've seen in action already. You need to keep those handlers in this project as when you publish this Rug archive you will effectively override the default handlers, and we don't want to lose that functionality we've already seen.  In a new  .atomist/handlers/CloseIssueThanks.ts  file enter the following handler code:  import   { Atomist }   from   '@atomist/rug/operations/Handler'  import   { TreeNode }   from   '@atomist/rug/tree/PathExpression'  declare   var   atomist :  Atomist  atomist . on < TreeNode ,   TreeNode > ( \"/Issue()/belongsTo::Repo()/channel::ChatChannel()\" ,   m   =>   { \n    let   issue   =   m . root ()   as   any \n\n    if   ( issue . state ()   !=   \"closed\" )   { \n      return \n    } \n\n    atomist . messageBuilder () \n     . say ( \"Thanks for closing this issue on \"   + \n          issue . belongsTo (). name ()) \n     . on ( issue . belongsTo (). channel (). id ()). send ()  })   Now it's time to publish and test your new handler.   NOTE :    At the moment you can't test handlers locally and instead you need to publish and test your handler is invoked from it's results in Atomist.",
            "title": "Writing your new handler"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#publish-your-new-handler",
            "text": "To make Atomist aware of your new  handler  you need to publish the  handler  project. This is often done via continuous integration but for our purposes here you're going to see how it's done manually using the  Rug CLI .",
            "title": "Publish your new handler"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#installing-and-configuring-the-rug-cli",
            "text": "Firstly make sure you've installed the latest Rug CLI for your platform. Then in order to publish new rugs you need to configure the  Rug CLI  with the credentials it needs to push your rugs to Atomists. To see this problem you can try to run the command  rug repositories configure  and you should see:  > rug repositories configure\n\nNo token configured. Please run repositories login before running this command.\n\nRun the following  command   for  usage help:\n  rug repositories configure --help  To configure the Rug CLI you need to execute the  rug repositories login  command providing your GitHub credentials:  > rug repositories login\n\n\nThe Rug CLI needs your GitHub login to identify you.\n\nThe  command  will create a GitHub Personal Access Token with scope  'read:org' \nwhich you can revoke any  time  on https://github.com/settings/tokens.  Your\npassword will not be displayed or stored. Your sensitive information will not\nbe sent to Atomist ;  only to api.github.com.\n\n  \u2192 Username : .....\n  \u2192 Password : .....\n\n  Please provide a MFA code\n  \u2192 MFA code : .....\n\nSuccessfully logged in to GitHub and stored token in ~/.atomist/cli.yml   NOTE : No passwords are stored, only a unique personal access token with org/read scope. Also if you are using 2 Factor Authentication with GitHub you will be prompted for the  MFA code  as shown above.   Now when you execute  rug repositories configure  you should see the Rug CLI configured with your team's unique repository:  > rug repositories configure\n\n\u2192 Repositories\n  <unique identifier of your team's repository>\n    <your unique team's repository url here>  You're now all set to publish your  handlers  project.",
            "title": "Installing and Configuring the Rug CLI"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#publishing-your-handlers-project-using-the-rug-cli",
            "text": "The Rug CLI has the  publish  command to publish a Rug archive from your local copy. Execute the  rug publish  command from inside your  handlers  project directory:  > rug publish\nResolving dependencies  for  antifragilesoftware:handlers:0.1.0 \u2190  local  completed\nInvoking TypeScript Compiler on ts script sources                                                                   \n  Created .atomist/handlers/CloseIssueThanksHandler.js.map                                                          \n  Created .atomist/handlers/CloseIssueThanksHandler.js                                                              \nProcessing script sources completed\nLoading antifragilesoftware:handlers:0.1.0 \u2190  local  into runtime completed\n  Created META-INF/maven/antifragilesoftware/handlers/pom.xml                                                       \n  Created .atomist/manifest.yml                                                                                     \n  Created .atomist/metadata.json                                                                                    \nGenerating archive metadata completed\n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip \u2192 t3v0s7ss2  ( 186  kb )  succeeded          \n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.pom \u2192 t3v0s7ss2  ( 927  bytes )  succeeded       \n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0-metadata.json \u2192 t3v0s7ss2  ( 762  bytes )  succeeded\n  Downloading antifragilesoftware/handlers/maven-metadata.xml \u2190 t3v0s7ss2  ( 382  bytes )  succeeded           \n  Uploading antifragilesoftware/handlers/maven-metadata.xml \u2192 t3v0s7ss2  ( 334  bytes )  succeeded             \nPublishing archive into remote repository completed\n\n\u2192 Archive\n  ~/code/src/github.com/antifragilesoftware/handlers/.atomist/target/handlers-0.1.0.zip  ( 186  kb in  165  files ) \n\n\u2192 URL\n  https://atomist.jfrog.io/atomist/T3V0S7SS2/antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip\n\nSuccessfully published archive  for  antifragilesoftware:handlers:0.1.0  Your new  handlers  rugs are now ready for action in your Atomist environment. To test that everything has published correctly you can execute  rug search  and you should see your Rug archive listed just for you:  > rug search\nSearching https://api.atomist.com/catalog                                                                         \nSearching catalogs completed\n\n\u2192 Remote Archives  ( 38  archives found ) \nyourorg:handlers  [ private ]   ( 0 .1.0 ) \n...",
            "title": "Publishing your handlers project using the Rug CLI"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#seeing-your-new-handler-in-action",
            "text": "Now you can give your new  CloseIssueThanksHandler  handler a spin! Head back to the  #sprocket  channel and you should see a button to  Close  the issue we created earlier:  \n     Click on  Close  (you could also close the issue in GitHub if you prefer) and several things will happen. Firstly  @atomist  will indicate with a message that the issue has been edited...  \n     ... then the panel for the issue in Slack will be updated with a  Reopen  button ...  \n     ... and finally your new handler will be invoked and the \"thanks\" message will be displayed!  \n     There, you did it! You just created a new automation, and taught the bot to listen for events and run that automation!",
            "title": "Seeing your new handler in action"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#congratulations-youve-completed-the-getting-started-guide-for-atomist",
            "text": "You've come a long way but to get even  more  out of your development automation here are some suggested next steps...   Checking out the  Quick Starts  for short introductions to a number of Atomist features.  Get comfortable with writing and editing your development automation Rugs with the  Rug CLI .  Take a deep-dive through Rug using  @atomist  in with the  Rug Koans .",
            "title": "Congratulations, you've completed the Getting Started guide for Atomist!"
        },
        {
            "location": "/quick-starts/",
            "text": "Introduction to Quick Starts\n\u00b6\n\n\nQuick Starts get you up and rolling with Atomist as fast as possible.\n\n\nAtomist Button\n\u00b6\n\n\nAtomist Buttons let you start a project super-quick: one click to get started!\n\n\nButtons Quick Start\n\n\nAtomist Bot\n\u00b6\n\n\nThe Bot awaits your instructions in our Atomist Community Slack.\n\n\nBot Quick Start\n\n\nRug CLI\n\u00b6\n\n\nNow you can try automated code changes with Rug on your local file\nsystem. Run any publicly published generator or editor. Make your own\nRugs and try them out!\n\n\nRug CLI Quick Start\n\n\nRug TypeScript\n\u00b6\n\n\nYou can use TypeScript to create your Rugs. This Quick Start will show you how:\n\n\nRug TypeScript Quick Start\n\n\nMore\n\u00b6\n\n\nTo hear about new Quick Starts as our tools roll out,\nfollow \n@atomist\n on Twitter\nand \nThe Composition\n on\nMedium. Or even better...\n\n\nGet rolling with Atomist by signing up to our community:\n\n\n\n\nJoin the Atomist Community\n\n\n\n\nThere, you'll get announcements on new features as we release them and\nalso get to chat with the core Atomist team about your experience with\nour tools.",
            "title": "Introduction"
        },
        {
            "location": "/quick-starts/#introduction-to-quick-starts",
            "text": "Quick Starts get you up and rolling with Atomist as fast as possible.",
            "title": "Introduction to Quick Starts"
        },
        {
            "location": "/quick-starts/#atomist-button",
            "text": "Atomist Buttons let you start a project super-quick: one click to get started!  Buttons Quick Start",
            "title": "Atomist Button"
        },
        {
            "location": "/quick-starts/#atomist-bot",
            "text": "The Bot awaits your instructions in our Atomist Community Slack.  Bot Quick Start",
            "title": "Atomist Bot"
        },
        {
            "location": "/quick-starts/#rug-cli",
            "text": "Now you can try automated code changes with Rug on your local file\nsystem. Run any publicly published generator or editor. Make your own\nRugs and try them out!  Rug CLI Quick Start",
            "title": "Rug CLI"
        },
        {
            "location": "/quick-starts/#rug-typescript",
            "text": "You can use TypeScript to create your Rugs. This Quick Start will show you how:  Rug TypeScript Quick Start",
            "title": "Rug TypeScript"
        },
        {
            "location": "/quick-starts/#more",
            "text": "To hear about new Quick Starts as our tools roll out,\nfollow  @atomist  on Twitter\nand  The Composition  on\nMedium. Or even better...  Get rolling with Atomist by signing up to our community:   Join the Atomist Community   There, you'll get announcements on new features as we release them and\nalso get to chat with the core Atomist team about your experience with\nour tools.",
            "title": "More"
        },
        {
            "location": "/quick-starts/buttons/",
            "text": "Buttons Quick Start\n\u00b6\n\n\nButtons are image links that when clicked trigger the execution of an\nAtomist project generator or editor.  Clicking on existing Atomist\nButtons is the easiest way to get started with Atomist, all you do is\nclick a link!\n\n\nYou will need a \nGitHub\n account to use buttons.  The first time\nyou click one of the Atomist Buttons you will be prompted to authorize\nAtomist to interact with public repositories in your GitHub account.\n\n\n\n\nReview the request and click the \"Authorize application\" button at the\nbottom of the page.\n\n\nCreate New Projects Based on Atomist Generators\n\u00b6\n\n\nThere is a continually growing, public collection of Atomist\ngenerators that can be used to create new projects on GitHub.  Click\nthe link below to create a new public repository under your GitHub\naccount containing a working \nSpring Boot\n REST microservice.\n\n\n\n\nAfter you click the button, and possibly authorize Atomist as\ndescribed above, you will be redirected to a form prompting you for\nthe information needed to create the project.\n\n\n\n\nThere are default values for all but the first parameter, \"PROJECT\nNAME\".  Go ahead and type in a name for your project, e.g.,\n\natomist-test\n.  Once you have a valid value in the project name\nfield, you can click the \"Create Project\" button.\n\n\nAfter a few moments you will be redirected to your newly created\nproject on GitHub.  You can then clone and interact with this project\njust as you would with any other project on GitHub.",
            "title": "Buttons"
        },
        {
            "location": "/quick-starts/buttons/#buttons-quick-start",
            "text": "Buttons are image links that when clicked trigger the execution of an\nAtomist project generator or editor.  Clicking on existing Atomist\nButtons is the easiest way to get started with Atomist, all you do is\nclick a link!  You will need a  GitHub  account to use buttons.  The first time\nyou click one of the Atomist Buttons you will be prompted to authorize\nAtomist to interact with public repositories in your GitHub account.   Review the request and click the \"Authorize application\" button at the\nbottom of the page.",
            "title": "Buttons Quick Start"
        },
        {
            "location": "/quick-starts/buttons/#create-new-projects-based-on-atomist-generators",
            "text": "There is a continually growing, public collection of Atomist\ngenerators that can be used to create new projects on GitHub.  Click\nthe link below to create a new public repository under your GitHub\naccount containing a working  Spring Boot  REST microservice.   After you click the button, and possibly authorize Atomist as\ndescribed above, you will be redirected to a form prompting you for\nthe information needed to create the project.   There are default values for all but the first parameter, \"PROJECT\nNAME\".  Go ahead and type in a name for your project, e.g., atomist-test .  Once you have a valid value in the project name\nfield, you can click the \"Create Project\" button.  After a few moments you will be redirected to your newly created\nproject on GitHub.  You can then clone and interact with this project\njust as you would with any other project on GitHub.",
            "title": "Create New Projects Based on Atomist Generators"
        },
        {
            "location": "/quick-starts/bot/",
            "text": "Bot Quick Start\n\u00b6\n\n\nThe Atomist \nSlack\n bot provides a chat-based interface to\nAtomist capabilities for creating, evolving, and running software\nprojects.  The bot is currently running in\nthe \nAtomist Community Slack team\n.  So join the community\nand find out what it can do!\n\n\nThe best way to learn how to use the bot is to watch this short\ndemonstration of its capabilities.",
            "title": "Atomist Bot"
        },
        {
            "location": "/quick-starts/bot/#bot-quick-start",
            "text": "The Atomist  Slack  bot provides a chat-based interface to\nAtomist capabilities for creating, evolving, and running software\nprojects.  The bot is currently running in\nthe  Atomist Community Slack team .  So join the community\nand find out what it can do!  The best way to learn how to use the bot is to watch this short\ndemonstration of its capabilities.",
            "title": "Bot Quick Start"
        },
        {
            "location": "/quick-starts/rug-cli/",
            "text": "Rug CLI Quick Start\n\u00b6\n\n\nThe Rug CLI runs generators and editors against your local source\ncode. You can run published Rugs and your local Rugs, and see the\nresults in your project directory. This is essential when you're\ndeveloping your own generators and editors.\n\n\nThis quick start guide is more involved that those for Buttons and the\nBot, but don't fret! We are working diligently to make interacting\nwith the Rug CLI as simple and intuitive as possible.\n\n\nInstalling the Rug CLI\n\u00b6\n\n\nYou can install the Rug command-line interface using standard\npackaging tools for your operating system.\nSee \nRug CLI Installation\n for\ninstructions.\n\n\n'Git' Some Examples\n\u00b6\n\n\nTo generate and edit code with Rug automation, you should become\nfamiliar with Rug editors, generators, and reviewers.  The best way to\ndo that is to look at some examples.  Some simple examples of Rug\neditors can be found in the \ncommon-editors\n repo.  You can\nclone that repo with the following command.\n\n\n$ git clone https://github.com/atomist-rugs/common-editors.git\n$ \ncd\n common-editors\n$ ls -1F\nCHANGELOG.md\nCODE_OF_CONDUCT.md\nLICENSE\nREADME.md\nsrc/\n\n\n\n\n\nYou cloned the repo, but where are the Rugs?  Rugs are always located\nin the \n.atomist\n directory at the top level of the project, i.e., the\nsame directory that has the \n.git\n directory.\n\n\n$ ls -1F .atomist/\nbuild/\neditors/\nmanifest.yml\ntarget/\ntemplates/\ntests/\n\n\n\n\n\nHere you can see the standard layout for a Rug directory.  It has a\n\nmanifest.yml\n describing the contents of the project.  Think of this\nas the metadata for your Rugs, i.e., the name, version, dependencies,\netc.  The editors and generators are in the \neditors\n directory.  Any\ntemplates are in the \ntemplates\n directory.  Testing is integral to\nRug, so we also use a \ntests\n directory to hold all our tests.  There\nis also a \nbuild\n directory that contains the repository's CI scripts\nand configurations.\n\n\nLet's see what editors we have available.\n\n\n$ awk \n'$1 == \"editor\" { print $2 }'\n .atomist/editors/*.rug\nAddApacheSoftwareLicense20\nAddChangeLog\nAddReadme\nAddScalaMavenGitIgnore\nClassRenamer\nPackageMove\nPomParameterizer\nRemoveApacheSoftwareLicense20\nRemoveChangeLog\nRemoveCodeOfConduct\n\n\n\n\n\nFeel free to look around in the \n.atomist\n directory to see what is\nthere, investigate the Rug syntax, and see what the tests look like.\n\n\nTest Rugs\n\u00b6\n\n\nIt is a best practice to provide tests for your Rugs.  The first Rug\ncommand we are going to try will run all of the tests available in the\ncommon-editors repo.\n\n\n$ rug \ntest\n\nProcessing dependencies\n  Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types \n(\n0kb\n)\n succeeded\n  Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.pom \u2190 rug-types \n(\n0kb\n)\n succeeded\n  Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types \n(\n2kb\n)\n succeeded\n  Downloading com/atomist/rug/0.8.0/rug-0.8.0.pom \u2190 rug-types \n(\n13kb\n)\n succeeded\n  ... \n(\nmore downloads\n)\n\n  Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.jar \u2190 rug-types \n(\n1kb\n)\n succeeded\n  Downloading org/scala-lang/scala-reflect/2.11.8/scala-reflect-2.11.8.jar \u2190 maven-central \n(\n4466kb\n)\n succeeded\nResolving dependencies \nfor\n atomist-rugs:common-editors:0.7.0 \u2190 \nlocal\n completed\nLoading atomist-rugs:common-editors:0.7.0 \u2190 \nlocal\n into runtime completed\nExecuting scenario AddApacheSoftwareLicense20 should add a new LICENSE file according to a provided template...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nLICENSE\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\nLICENSE\n)\n,SimpleLiteral\n(\nVersion \n2\n.0, January \n2004\n))\n\nExecuting scenario AddChangeLog should add CHANGELOG.md...\n  Testing assertion fileExists\n(\nIdentifierFunctionArg\n(\nchangelog,None\n))\n\n  Testing assertion fileContains\n(\nIdentifierFunctionArg\n(\nchangelog,None\n)\n,IdentifierFunctionArg\n(\nrepo_slug,None\n))\n\nExecuting scenario AddChangeLog should overwrite CHANGELOG.md...\n  Testing assertion fileExists\n(\nIdentifierFunctionArg\n(\nchangelog,None\n))\n\n  Testing assertion fileContains\n(\nIdentifierFunctionArg\n(\nchangelog,None\n)\n,IdentifierFunctionArg\n(\nrepo_slug,None\n))\n\n  Testing assertion ParsedJavaScriptFunction\n(\nJavaScriptBlock\n(\n !result.fileContains\n(\nchangelog, \n\"common-editor\"\n)\n \n))\n\nExecuting scenario AddChangeLog should reject invalid repo_slug...\nExecuting scenario AddChangeLog should reject missing parameter...\nExecuting scenario AddScalaMavenGitIgnore should add a new .gitignore file according to a provided template...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\n.gitignore\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\n.gitignore\n)\n,SimpleLiteral\n(\n# Created by Atomist))\n\nExecuting scenario AddScalaMavenGitIgnore should overwrite an existing .gitignore file according to a provided template...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\n.gitignore\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\n.gitignore\n)\n,SimpleLiteral\n(\n# Created by Atomist))\n\nExecuting scenario AddScalaMavenGitIgnore should add a new .gitignore to a subdirectory...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nother/.gitignore\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\nother/.gitignore\n)\n,SimpleLiteral\n(\n# Created by Atomist))\n\nExecuting scenario AddReadme should add README.md...\n  Testing assertion fileExists\n(\nIdentifierFunctionArg\n(\nreadme,None\n))\n\n  Testing assertion fileContains\n(\nIdentifierFunctionArg\n(\nreadme,None\n)\n,IdentifierFunctionArg\n(\nnewName,None\n))\n\n  Testing assertion fileContains\n(\nIdentifierFunctionArg\n(\nreadme,None\n)\n,IdentifierFunctionArg\n(\nnewDescription,None\n))\n\nExecuting scenario AddReadme should reject invalid value name parameter...\nExecuting scenario AddReadme should reject missing parameter...\nExecuting scenario ClassRenamer should rename simple class...\n  Testing assertion EqualsExpression\n(\nfileCount\n()\n,SimpleLiteral\n(\n1\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\nsrc/main/java/Cat.java\n)\n,SimpleLiteral\n(\nclass Cat\n))\n\nExecuting scenario ClassRenamer should rename class and leave no references to old name...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nsrc/main/java/com/atomist/springrest/WeirdAndWonderful.java\n))\n\n  Testing assertion ParsedJavaScriptFunction\n(\nJavaScriptBlock\n(\n !result.anyFileContains\n(\n\".java\"\n, oldclass\n)\n \n))\n\nExecuting scenario ClassRenamer should rename class but leave any additional characters on the class name...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nsrc/main/java/com/atomist/springrest/WeirdAndWonderfulConfiguration.java\n))\n\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nsrc/main/java/com/atomist/springrest/WeirdAndWonderfulApplication.java\n))\n\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nsrc/test/java/com/atomist/springrest/WeirdAndWonderfulApplicationTests.java\n))\n\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nsrc/test/java/com/atomist/springrest/WeirdAndWonderfulOutOfContainerIntegrationTests.java\n))\n\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nsrc/test/java/com/atomist/springrest/WeirdAndWonderfulWebIntegrationTests.java\n))\n\n  Testing assertion ParsedJavaScriptFunction\n(\nJavaScriptBlock\n(\n !result.anyFileContains\n(\n\".java\"\n, \n\"SpringRest\"\n)\n \n))\n\nExecuting scenario PackageMove should move base package and leave no references to old packages...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nsrc/main/java/com/foo/bar/SpringRestConfiguration.java\n))\n\n  Testing assertion ParsedJavaScriptFunction\n(\nJavaScriptBlock\n(\n !result.anyFileContains\n(\n\".java\"\n, oldpack\n)\n \n))\n\nExecuting scenario PomParameterizer should establish a new project\n'\ns valid pom.xml...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\npom.xml\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\npom.xml\n)\n,SimpleLiteral\n(\n<artifactId>mynewproject</artifactId>\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\npom.xml\n)\n,SimpleLiteral\n(\n<groupId>mygroup</groupId>\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\npom.xml\n)\n,SimpleLiteral\n(\n<version>0.0.1-SNAPSHOT</version>\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\npom.xml\n)\n,SimpleLiteral\n(\n<description>My project description</description>\n))\n\nExecuting scenario RemoveApacheSoftwareLicense20 should remove Apache license...\n  Testing assertion ParsedJavaScriptFunction\n(\nJavaScriptBlock\n(\n !result.fileExists\n(\n\"LICENSE\"\n)\n \n))\n\nExecuting scenario RemoveApacheSoftwareLicense20 should not remove other license...\nExecuting scenario RemoveChangeLog should remove CHANGELOG...\n  Testing assertion ParsedJavaScriptFunction\n(\nJavaScriptBlock\n(\n !result.fileExists\n(\n\"CHANGELOG.md\"\n)\n \n))\n\nExecuting scenario RemoveApacheSoftwareLicense20 silently \ndo\n nothing \nif\n no CHANGELOG present...\nExecuting scenario RemoveCodeOfConduct should remove CODE_OF_CONDUCT...\n  Testing assertion ParsedJavaScriptFunction\n(\nJavaScriptBlock\n(\n !result.fileExists\n(\n\"CODE_OF_CONDUCT.md\"\n)\n \n))\n\nExecuting scenario RemoveCodeOfConduct silently \ndo\n nothing \nif\n no CODE_OF_CONDUCT present...\nRunning \ntest\n scenarios in atomist-rugs:common-editors:0.7.0 \u2190 \nlocal\n completed\n\nSuccessfully executed \n22\n of \n22\n scenarios: Test SUCCESS\n\n\n\n\n\nThe above command will download all the dependencies needed to run the\neditors defined in the common-editors repo.  Depending on the speed of\nyour network connection, this may take some time.  Each dependency\nonly need be downloaded once, so subsequent executions of \nrug\n will\nbe faster.\n\n\nAs you can see from the last line of output, all of the test scenarios\npassed.\n\n\nInstall a Rug Archive\n\u00b6\n\n\nThe next step is to create a Rug archive and install it locally so you\ncan use it on local projects.  This is accomplished with the \ninstall\n\ncommand.\n\n\n$ rug install\nResolving dependencies \nfor\n atomist-rugs:common-editors:0.7.0 \u2190 \nlocal\n completed\nLoading atomist-rugs:common-editors:0.7.0 \u2190 \nlocal\n into runtime completed\n  Generated META-INF/maven/atomist-rugs/common-editors/pom.xml\n  Generated .atomist/manifest.yml\n  Generated .atomist/metadata.json\nGenerating archive metadata completed\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.pom \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0-metadata.json \u2192 /Users/dd/.atomist/repository\nInstalling archive into \nlocal\n repository completed\n\n\u2192 Archive\n  ~/develop/atomist-rugs/common-editors/.atomist/target/common-editors-0.7.0.zip \n(\n39kb in \n43\n files\n)\n\n\n\u2192 Contents\n  \u251c\u2500\u252c .atomist\n  \n|\n \u251c\u2500\u252c build\n  \n|\n \n|\n \u251c\u2500\u2500 cli-build.yml\n  \n|\n \n|\n \u251c\u2500\u2500 cli-dev.yml\n  \n|\n \n|\n \u2514\u2500\u2500 cli-release.yml\n  \n|\n \u251c\u2500\u252c editors\n  \n|\n \n|\n \u251c\u2500\u2500 AddApacheSoftwareLicense20.rug\n  \n|\n \n|\n \u251c\u2500\u2500 AddChangeLog.rug\n  \n|\n \n|\n \u251c\u2500\u2500 AddReadme.rug\n  \n|\n \n|\n \u251c\u2500\u2500 AddScalaMavenGitIgnore.rug\n  \n|\n \n|\n \u251c\u2500\u2500 ClassRenamer.rug\n  \n|\n \n|\n \u251c\u2500\u2500 PackageMove.rug\n  \n|\n \n|\n \u251c\u2500\u2500 PomParameterizer.rug\n  \n|\n \n|\n \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rug\n  \n|\n \n|\n \u251c\u2500\u2500 RemoveChangeLog.rug\n  \n|\n \n|\n \u2514\u2500\u2500 RemoveCodeOfConduct.rug\n  \n|\n \u251c\u2500\u2500 manifest.yml\n  \n|\n \u251c\u2500\u2500 metadata.json\n  \n|\n \u251c\u2500\u252c templates\n  \n|\n \n|\n \u251c\u2500\u2500 ApacheSoftwareLicenseV20.vm\n  \n|\n \n|\n \u251c\u2500\u2500 CHANGELOG.md.mustache\n  \n|\n \n|\n \u251c\u2500\u2500 gitignore.vm\n  \n|\n \n|\n \u2514\u2500\u2500 readme.vm\n  \n|\n \u2514\u2500\u252c tests\n  \n|\n   \u251c\u2500\u2500 AddApacheSoftwareLicense20.rt\n  \n|\n   \u251c\u2500\u2500 AddChangeLog.rt\n  \n|\n   \u251c\u2500\u2500 AddGitIgnore.rt\n  \n|\n   \u251c\u2500\u2500 AddReadme.rt\n  \n|\n   \u251c\u2500\u2500 ClassRenamer.rt\n  \n|\n   \u251c\u2500\u2500 PackageMove.rt\n  \n|\n   \u251c\u2500\u2500 PomParameterizer.rt\n  \n|\n   \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rt\n  \n|\n   \u251c\u2500\u2500 RemoveChangeLog.rt\n  \n|\n   \u2514\u2500\u2500 RemoveCodeOfConduct.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u2500 CHANGELOG.md\n  \u251c\u2500\u2500 CODE_OF_CONDUCT.md\n  \u251c\u2500\u2500 LICENSE\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/common-editors\n  \n|\n \u2514\u2500\u2500 pom.xml\n  \u251c\u2500\u2500 README.md\n  \u251c\u2500\u252c src/main/java/com/atomist/springrest\n  \n|\n \u251c\u2500\u2500 SpringRestApplication.java\n  \n|\n \u2514\u2500\u2500 SpringRestConfiguration.java\n  \u251c\u2500\u252c src/main/resources\n  \n|\n \u251c\u2500\u2500 application.properties\n  \n|\n \u2514\u2500\u2500 logback.xml\n  \u2514\u2500\u252c src/test/java/com/atomist/springrest\n    \u251c\u2500\u2500 SpringRestApplicationTests.java\n    \u251c\u2500\u2500 SpringRestOutOfContainerIntegrationTests.java\n    \u2514\u2500\u2500 SpringRestWebIntegrationTests.java\n\nSuccessfully installed archive \nfor\n atomist-rugs:common-editors:0.7.0\n\n\n\n\n\nThis command packages up all of the Rugs in the \n.atomist\n directory\nand installs them in your local repository, typically\n\n~/.atomist/repository\n.\n\n\nList Editors\n\u00b6\n\n\nRemember above when we ran that arcane \nawk\n command to list the\neditors?  There is a better way!  Now that we some editors installed\nlocally, we can list our local editors.\n\n\n$ rug list\nResolving dependencies \nfor\n com.atomist:rug:0.8.0 completed\nListing \nlocal\n archives completed\n\n\u2192 Local Archives\n  atomist-rugs:common-editors \n(\n0\n.7.0\n)\n\n\nFor more information on specific archive version, run:\n  rug describe archive ARCHIVE -a VERSION\n\n\n\n\n\nLooks like the Rug Archive we installed is indeed installed.  That\nlast line of the output tells us how we can get more information.\nLet's try that command.  Since we only have one version available, we\ncan omit the \n-a\n command-line option.  When it is not provided, the\nlatest version is used.\n\n\n$ rug describe archive atomist-rugs:common-editors\nProcessing dependencies\n  Downloading atomist-rugs/common-editors/maven-metadata.xml \u2190 rugs \n(\n0kb\n)\n succeeded\nResolving dependencies \nfor\n atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\n\natomist-rugs:common-editors:0.7.0\n\n\u2192 Origin\n  atomist-rugs/common-editors.git#master \n(\n622ed10\n)\n\n\u2192 Archive\n  ~/.atomist/repository/atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip \n(\n39kb in \n43\n files\n)\n\n\n\u2192 Editors\n  AddApacheSoftwareLicense20 \n(\nadd the Apache Software License version \n2\n.0 file\n)\n\n  AddChangeLog \n(\nadds a new CHANGELOG\n)\n\n  AddReadme \n(\nadds a project specific README\n)\n\n  AddScalaMavenGitIgnore \n(\nadds a .gitignore suitable \nfor\n Scala Maven projects\n)\n\n  ClassRenamer \n(\nrenames a Java class, replacing one literal pattern with another\n)\n\n  PackageMove \n(\nrenames a Java package\n)\n\n  PomParameterizer \n(\nupdates a Maven pom to a new group, artifact, version and description\n)\n\n  RemoveApacheSoftwareLicense20 \n(\nremoves an Apache Software License version \n2\n.0 file \nif\n present\n)\n\n  RemoveChangeLog \n(\nremoves CHANGELOG file \nif\n present\n)\n\n  RemoveCodeOfConduct \n(\nremoves CODE_OF_CONDUCT file \nif\n present\n)\n\n\n\u2192 Requires\n  \n[\n0\n.8.0,1.0.0\n)\n\n\nTo get more information on any of the Rugs listed above, run:\n  rug describe editor\n|\ngenerator\n|\nexecutor\n|\nreviewer ARTIFACT\n\n\n\n\n\nThat list of editors looks familiar, we must be doing something right!\nAgain, the last line of the output tells us how we can get more\ninformation.  Let's try it.\n\n\n$ rug describe editor AddApacheSoftwareLicense20\n\nNo valid ARTIFACT provided, no default artifact defined and not in \nlocal\n mode.\n\nRun the following \ncommand\n \nfor\n usage help:\n  rug describe --help.\n\n\n\n\n\nHmm, looks like something went wrong.  Fortunately the error tells us\nwe either need to define a default artifact or run in local mode.  How\ndo we run in local mode?  The above output tells us to run \nrug\ndescribe --help\n for usage help.  Let's do it.\n\n\n$ rug describe --help\nUsage: rug describe \n[\nOPTION\n]\n... TYPE ARTIFACT\nPrint details about an archive or Rug.\n\nOptions:\n  -?,-h,--help          Print \nhelp\n information\n  -X,--error            Print verbose error messages\n  -o,--offline          Use only downloaded archives\n  -q,--quiet            Do not display progress messages\n  -r,--resolver-report  Print dependency tree\n  -s,--settings FILE    Use settings file FILE\n  -t,--timer            Print timing information\n  -u,--update           Update dependency resolution\n\nCommand Options:\n  -a,--archive-version AV  Use archive version AV\n  -l,--local               Use \nlocal\n working directory as archive\n\nTYPE should be \n'editor'\n, \n'generator'\n, \n'executor'\n, \n'reviewer'\n or\n\n'archive'\n and ARTIFACT should be the full name of an artifact, e.g.,\n\n\"atomist:spring-service:Spring Microservice\"\n.  If the name of the\nartifact has spaces in it, you need to put quotes around it.\n\nPlease report issues at https://github.com/atomist/rug-cli\n\n\n\n\n\nThe help output provides two pieces of information useful to us.\nFirst, it says the \nARTIFACT\n should be the full name of the artifact.\nWe only provided the editor name.  Perhaps we needed to prepend the\narchive name.  Second, the \n-l\n or \n--local\n command-line option tells\nthe CLI to use the current directory as an archive.  In other words,\nit tries to find an \n.atomist\n directory and use the Rugs in it.\nSince we are in a directory that has the \n.atomist\n directory with the\neditor we want to run, that seems promising.\n\n\n$ rug describe -l editor AddApacheSoftwareLicense20\nResolving dependencies \nfor\n atomist-rugs:common-editors:0.7.0 \u2190 \nlocal\n completed\nLoading atomist-rugs:common-editors:0.7.0 \u2190 \nlocal\n into runtime completed\n\nAddApacheSoftwareLicense20\natomist-rugs:common-editors:0.7.0\nadd the Apache Software License version \n2\n.0 file\n\n\u2192 Tags\n  apache \n(\napache\n)\n\n  license \n(\nlicense\n)\n\n  documentation \n(\ndocumentation\n)\n\n\u2192 Parameters\n  no parameters needed\n\nTo invoke the AddApacheSoftwareLicense20 editor, run:\n  rug edit \n\"atomist-rugs:common-editors:AddApacheSoftwareLicense20\"\n -a \n0\n.7.0 -l\n\n\n\n\n\nSuccess!  The output from that command also tells us what the full\nname of the editor is,\n\natomist-rugs:common-editors:AddApacheSoftwareLicense20\n.  We could\nhave guessed that.  Since we previously installed the editor, we could\nhave run the following command and gotten the same result.\n\n\n$ rug describe editor atomist-rugs:common-editors:AddApacheSoftwareLicense20\n\n\n\n\n\nThe \ndescribe editor\n output includes several pieces of useful\ninformation.  The description, \"adds the Apache Software License\nversion 2.0 file\", provides a slightly more verbose description than\nthe already descriptive editor name.  We can see that this editor has\nthree tags, \nlicense\n, \napache\n, and \ndocumentation\n, and it takes no\nparameters.\n\n\nAdding the Apache license seems like a good thing to do.  The last\nline of the output once again gives us the information we need: how to\nrun this editor.  Let's try it.\n\n\nRun an Editor\n\u00b6\n\n\nWe will just run the command we were provided above.  We remove the\n\n-l\n since, having installed the archive, we do not need to run it\nfrom the local directory, we can run it from the installed archive.\n\n\n$ rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20 -a \n0\n.7.0\nResolving dependencies \nfor\n atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\nRunning editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\u2192 Project\n  ~/develop/atomist-rugs/common-editors/ \n(\n282kb in \n302\n files\n)\n\n\n\u2192 Changes\n  \u251c\u2500\u2500 LICENSE created 11kb\n  \u2514\u2500\u2500 .atomist.yml created 3kb\n\nSuccessfully edited project common-editors\n\n\n\n\n\nLooks like two files were edited in the local repository.\n\n\n$ git status\nOn branch master\nYour branch is up-to-date with \n'origin/master'\n.\nChanges not staged \nfor\n commit:\n  \n(\nuse \n\"git add <file>...\"\n to update what will be committed\n)\n\n  \n(\nuse \n\"git checkout -- <file>...\"\n to discard changes in working directory\n)\n\n\n    modified:   .atomist.yml\n\nno changes added to commit \n(\nuse \n\"git add\"\n and/or \n\"git commit -a\"\n)\n\n\n\n\n\n\nHmm, git shows only one file has been modified.  Why?  Well, the\ncontents of the \nLICENSE\n file were set to be the Apache Software\nLicense, but that is what the contents already were.  Git is smart.\nWhat is that \natomist.yml\n file?\n\n\n$ cat .atomist.yml\n---\nkind: \n\"operation\"\n\nclient: \n\"rug-cli 0.20.0\"\n\neditor:\n  name: \n\"atomist-rugs.common-editors.AddApacheSoftwareLicense20\"\n\n  group: \n\"atomist-rugs\"\n\n  artifact: \n\"common-editors\"\n\n  version: \n\"0.7.0\"\n\n  origin:\n    repo: \n\"atomist-rugs/common-editors.git\"\n\n    branch: \n\"master\"\n\n    sha: \n\"622ed10\"\n\n\n\n\n\n\nLooks like it is a record of what we have done, nice!\n\n\nI suppose we should have guessed the editor would act on the local\ndirectory, but we don't really want to edit the current project.\nLet's create another project to edit.  We run the same command as\nabove, except we'll remove the archive version command-line option.\nIf you do not provide the \n-a\n option, the CLI will use the latest\ninstalled version, 0.7.0 in our case.\n\n\n$ \ncd\n ..\n$ mkdir atomist-test\n$ \ncd\n !$\n$ git init\n$ rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20\n$ rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20\nResolving dependencies \nfor\n atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\nRunning editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\u2192 Project\n  ~/develop/atomist-rugs/atomist-test/ \n(\n15\n kb in \n16\n files\n)\n\n\n\u2192 Changes\n  \u251c\u2500\u2500 LICENSE created \n11\n kb\n  \u2514\u2500\u2500 .atomist.yml created \n287\n bytes\n\nSuccessfully edited project atomist-test\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n  \n(\nuse \n\"git add <file>...\"\n to include in what will be committed\n)\n\n\n    .atomist.yml\n    LICENSE\n\nnothing added to commit but untracked files present \n(\nuse \n\"git add\"\n to track\n)\n\n\n\n\n\n\nThat's more like it!  What if we decide we do not want the Apache\nSoftware License?  There's an editor for that!\n\n\n$ rug edit atomist-rugs:common-editors:RemoveApacheSoftwareLicense20\nResolving dependencies \nfor\n atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\nRunning editor RemoveApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\u2192 Project\n  ~/develop/atomist-rugs/atomist-test/ \n(\n26\n kb in \n15\n files\n)\n\n\n\u2192 Changes\n  \u251c\u2500\u2500 LICENSE deleted \n15\n kb\n  \u2514\u2500\u2500 .atomist.yml created \n577\n bytes\n\nSuccessfully edited project atomist-test\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n  \n(\nuse \n\"git add <file>...\"\n to include in what will be committed\n)\n\n\n    .atomist.yml\n\nnothing added to commit but untracked files present \n(\nuse \n\"git add\"\n to track\n)\n\n\n\n\n\n\nWe see the \nLICENSE\n file is gone.  If we inspect the contents of the\n\n.atomist.yml\n file, we see a complete record of what Rug has done.\n\n\n$ cat .atomist.yml\n---\nkind: \n\"operation\"\n\nclient: \n\"rug-cli 0.20.0\"\n\neditor:\n  name: \n\"atomist-rugs.common-editors.AddApacheSoftwareLicense20\"\n\n  group: \n\"atomist-rugs\"\n\n  artifact: \n\"common-editors\"\n\n  version: \n\"0.7.0\"\n\n  origin:\n    repo: \n\"atomist-rugs/common-editors.git\"\n\n    branch: \n\"master\"\n\n    sha: \n\"622ed10\"\n\n\n---\nkind: \n\"operation\"\n\nclient: \n\"rug-cli 0.20.0\"\n\neditor:\n  name: \n\"atomist-rugs.common-editors.RemoveApacheSoftwareLicense20\"\n\n  group: \n\"atomist-rugs\"\n\n  artifact: \n\"common-editors\"\n\n  version: \n\"0.7.0\"\n\n  origin:\n    repo: \n\"atomist-rugs/common-editors.git\"\n\n    branch: \n\"master\"\n\n    sha: \n\"622ed10\"\n\n\n\n\n\n\nMore Information\n\u00b6\n\n\nYou made it!  That's it for our quick(-ish) introduction to the Rug\nCLI.  Please join our \nAtomist Community Slack\n to ask\nquestions, get help, and discuss all things Rug.\n\n\nMore detailed documentation can be found in the\n\nRug CLI reference documentation\n.",
            "title": "Rug CLI"
        },
        {
            "location": "/quick-starts/rug-cli/#rug-cli-quick-start",
            "text": "The Rug CLI runs generators and editors against your local source\ncode. You can run published Rugs and your local Rugs, and see the\nresults in your project directory. This is essential when you're\ndeveloping your own generators and editors.  This quick start guide is more involved that those for Buttons and the\nBot, but don't fret! We are working diligently to make interacting\nwith the Rug CLI as simple and intuitive as possible.",
            "title": "Rug CLI Quick Start"
        },
        {
            "location": "/quick-starts/rug-cli/#installing-the-rug-cli",
            "text": "You can install the Rug command-line interface using standard\npackaging tools for your operating system.\nSee  Rug CLI Installation  for\ninstructions.",
            "title": "Installing the Rug CLI"
        },
        {
            "location": "/quick-starts/rug-cli/#git-some-examples",
            "text": "To generate and edit code with Rug automation, you should become\nfamiliar with Rug editors, generators, and reviewers.  The best way to\ndo that is to look at some examples.  Some simple examples of Rug\neditors can be found in the  common-editors  repo.  You can\nclone that repo with the following command.  $ git clone https://github.com/atomist-rugs/common-editors.git\n$  cd  common-editors\n$ ls -1F\nCHANGELOG.md\nCODE_OF_CONDUCT.md\nLICENSE\nREADME.md\nsrc/  You cloned the repo, but where are the Rugs?  Rugs are always located\nin the  .atomist  directory at the top level of the project, i.e., the\nsame directory that has the  .git  directory.  $ ls -1F .atomist/\nbuild/\neditors/\nmanifest.yml\ntarget/\ntemplates/\ntests/  Here you can see the standard layout for a Rug directory.  It has a manifest.yml  describing the contents of the project.  Think of this\nas the metadata for your Rugs, i.e., the name, version, dependencies,\netc.  The editors and generators are in the  editors  directory.  Any\ntemplates are in the  templates  directory.  Testing is integral to\nRug, so we also use a  tests  directory to hold all our tests.  There\nis also a  build  directory that contains the repository's CI scripts\nand configurations.  Let's see what editors we have available.  $ awk  '$1 == \"editor\" { print $2 }'  .atomist/editors/*.rug\nAddApacheSoftwareLicense20\nAddChangeLog\nAddReadme\nAddScalaMavenGitIgnore\nClassRenamer\nPackageMove\nPomParameterizer\nRemoveApacheSoftwareLicense20\nRemoveChangeLog\nRemoveCodeOfConduct  Feel free to look around in the  .atomist  directory to see what is\nthere, investigate the Rug syntax, and see what the tests look like.",
            "title": "'Git' Some Examples"
        },
        {
            "location": "/quick-starts/rug-cli/#test-rugs",
            "text": "It is a best practice to provide tests for your Rugs.  The first Rug\ncommand we are going to try will run all of the tests available in the\ncommon-editors repo.  $ rug  test \nProcessing dependencies\n  Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types  ( 0kb )  succeeded\n  Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.pom \u2190 rug-types  ( 0kb )  succeeded\n  Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types  ( 2kb )  succeeded\n  Downloading com/atomist/rug/0.8.0/rug-0.8.0.pom \u2190 rug-types  ( 13kb )  succeeded\n  ...  ( more downloads ) \n  Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.jar \u2190 rug-types  ( 1kb )  succeeded\n  Downloading org/scala-lang/scala-reflect/2.11.8/scala-reflect-2.11.8.jar \u2190 maven-central  ( 4466kb )  succeeded\nResolving dependencies  for  atomist-rugs:common-editors:0.7.0 \u2190  local  completed\nLoading atomist-rugs:common-editors:0.7.0 \u2190  local  into runtime completed\nExecuting scenario AddApacheSoftwareLicense20 should add a new LICENSE file according to a provided template...\n  Testing assertion fileExists ( SimpleLiteral ( LICENSE )) \n  Testing assertion fileContains ( SimpleLiteral ( LICENSE ) ,SimpleLiteral ( Version  2 .0, January  2004 )) \nExecuting scenario AddChangeLog should add CHANGELOG.md...\n  Testing assertion fileExists ( IdentifierFunctionArg ( changelog,None )) \n  Testing assertion fileContains ( IdentifierFunctionArg ( changelog,None ) ,IdentifierFunctionArg ( repo_slug,None )) \nExecuting scenario AddChangeLog should overwrite CHANGELOG.md...\n  Testing assertion fileExists ( IdentifierFunctionArg ( changelog,None )) \n  Testing assertion fileContains ( IdentifierFunctionArg ( changelog,None ) ,IdentifierFunctionArg ( repo_slug,None )) \n  Testing assertion ParsedJavaScriptFunction ( JavaScriptBlock (  !result.fileContains ( changelog,  \"common-editor\" )   )) \nExecuting scenario AddChangeLog should reject invalid repo_slug...\nExecuting scenario AddChangeLog should reject missing parameter...\nExecuting scenario AddScalaMavenGitIgnore should add a new .gitignore file according to a provided template...\n  Testing assertion fileExists ( SimpleLiteral ( .gitignore )) \n  Testing assertion fileContains ( SimpleLiteral ( .gitignore ) ,SimpleLiteral ( # Created by Atomist)) \nExecuting scenario AddScalaMavenGitIgnore should overwrite an existing .gitignore file according to a provided template...\n  Testing assertion fileExists ( SimpleLiteral ( .gitignore )) \n  Testing assertion fileContains ( SimpleLiteral ( .gitignore ) ,SimpleLiteral ( # Created by Atomist)) \nExecuting scenario AddScalaMavenGitIgnore should add a new .gitignore to a subdirectory...\n  Testing assertion fileExists ( SimpleLiteral ( other/.gitignore )) \n  Testing assertion fileContains ( SimpleLiteral ( other/.gitignore ) ,SimpleLiteral ( # Created by Atomist)) \nExecuting scenario AddReadme should add README.md...\n  Testing assertion fileExists ( IdentifierFunctionArg ( readme,None )) \n  Testing assertion fileContains ( IdentifierFunctionArg ( readme,None ) ,IdentifierFunctionArg ( newName,None )) \n  Testing assertion fileContains ( IdentifierFunctionArg ( readme,None ) ,IdentifierFunctionArg ( newDescription,None )) \nExecuting scenario AddReadme should reject invalid value name parameter...\nExecuting scenario AddReadme should reject missing parameter...\nExecuting scenario ClassRenamer should rename simple class...\n  Testing assertion EqualsExpression ( fileCount () ,SimpleLiteral ( 1 )) \n  Testing assertion fileContains ( SimpleLiteral ( src/main/java/Cat.java ) ,SimpleLiteral ( class Cat )) \nExecuting scenario ClassRenamer should rename class and leave no references to old name...\n  Testing assertion fileExists ( SimpleLiteral ( src/main/java/com/atomist/springrest/WeirdAndWonderful.java )) \n  Testing assertion ParsedJavaScriptFunction ( JavaScriptBlock (  !result.anyFileContains ( \".java\" , oldclass )   )) \nExecuting scenario ClassRenamer should rename class but leave any additional characters on the class name...\n  Testing assertion fileExists ( SimpleLiteral ( src/main/java/com/atomist/springrest/WeirdAndWonderfulConfiguration.java )) \n  Testing assertion fileExists ( SimpleLiteral ( src/main/java/com/atomist/springrest/WeirdAndWonderfulApplication.java )) \n  Testing assertion fileExists ( SimpleLiteral ( src/test/java/com/atomist/springrest/WeirdAndWonderfulApplicationTests.java )) \n  Testing assertion fileExists ( SimpleLiteral ( src/test/java/com/atomist/springrest/WeirdAndWonderfulOutOfContainerIntegrationTests.java )) \n  Testing assertion fileExists ( SimpleLiteral ( src/test/java/com/atomist/springrest/WeirdAndWonderfulWebIntegrationTests.java )) \n  Testing assertion ParsedJavaScriptFunction ( JavaScriptBlock (  !result.anyFileContains ( \".java\" ,  \"SpringRest\" )   )) \nExecuting scenario PackageMove should move base package and leave no references to old packages...\n  Testing assertion fileExists ( SimpleLiteral ( src/main/java/com/foo/bar/SpringRestConfiguration.java )) \n  Testing assertion ParsedJavaScriptFunction ( JavaScriptBlock (  !result.anyFileContains ( \".java\" , oldpack )   )) \nExecuting scenario PomParameterizer should establish a new project ' s valid pom.xml...\n  Testing assertion fileExists ( SimpleLiteral ( pom.xml )) \n  Testing assertion fileContains ( SimpleLiteral ( pom.xml ) ,SimpleLiteral ( <artifactId>mynewproject</artifactId> )) \n  Testing assertion fileContains ( SimpleLiteral ( pom.xml ) ,SimpleLiteral ( <groupId>mygroup</groupId> )) \n  Testing assertion fileContains ( SimpleLiteral ( pom.xml ) ,SimpleLiteral ( <version>0.0.1-SNAPSHOT</version> )) \n  Testing assertion fileContains ( SimpleLiteral ( pom.xml ) ,SimpleLiteral ( <description>My project description</description> )) \nExecuting scenario RemoveApacheSoftwareLicense20 should remove Apache license...\n  Testing assertion ParsedJavaScriptFunction ( JavaScriptBlock (  !result.fileExists ( \"LICENSE\" )   )) \nExecuting scenario RemoveApacheSoftwareLicense20 should not remove other license...\nExecuting scenario RemoveChangeLog should remove CHANGELOG...\n  Testing assertion ParsedJavaScriptFunction ( JavaScriptBlock (  !result.fileExists ( \"CHANGELOG.md\" )   )) \nExecuting scenario RemoveApacheSoftwareLicense20 silently  do  nothing  if  no CHANGELOG present...\nExecuting scenario RemoveCodeOfConduct should remove CODE_OF_CONDUCT...\n  Testing assertion ParsedJavaScriptFunction ( JavaScriptBlock (  !result.fileExists ( \"CODE_OF_CONDUCT.md\" )   )) \nExecuting scenario RemoveCodeOfConduct silently  do  nothing  if  no CODE_OF_CONDUCT present...\nRunning  test  scenarios in atomist-rugs:common-editors:0.7.0 \u2190  local  completed\n\nSuccessfully executed  22  of  22  scenarios: Test SUCCESS  The above command will download all the dependencies needed to run the\neditors defined in the common-editors repo.  Depending on the speed of\nyour network connection, this may take some time.  Each dependency\nonly need be downloaded once, so subsequent executions of  rug  will\nbe faster.  As you can see from the last line of output, all of the test scenarios\npassed.",
            "title": "Test Rugs"
        },
        {
            "location": "/quick-starts/rug-cli/#install-a-rug-archive",
            "text": "The next step is to create a Rug archive and install it locally so you\ncan use it on local projects.  This is accomplished with the  install \ncommand.  $ rug install\nResolving dependencies  for  atomist-rugs:common-editors:0.7.0 \u2190  local  completed\nLoading atomist-rugs:common-editors:0.7.0 \u2190  local  into runtime completed\n  Generated META-INF/maven/atomist-rugs/common-editors/pom.xml\n  Generated .atomist/manifest.yml\n  Generated .atomist/metadata.json\nGenerating archive metadata completed\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.pom \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0-metadata.json \u2192 /Users/dd/.atomist/repository\nInstalling archive into  local  repository completed\n\n\u2192 Archive\n  ~/develop/atomist-rugs/common-editors/.atomist/target/common-editors-0.7.0.zip  ( 39kb in  43  files ) \n\n\u2192 Contents\n  \u251c\u2500\u252c .atomist\n   |  \u251c\u2500\u252c build\n   |   |  \u251c\u2500\u2500 cli-build.yml\n   |   |  \u251c\u2500\u2500 cli-dev.yml\n   |   |  \u2514\u2500\u2500 cli-release.yml\n   |  \u251c\u2500\u252c editors\n   |   |  \u251c\u2500\u2500 AddApacheSoftwareLicense20.rug\n   |   |  \u251c\u2500\u2500 AddChangeLog.rug\n   |   |  \u251c\u2500\u2500 AddReadme.rug\n   |   |  \u251c\u2500\u2500 AddScalaMavenGitIgnore.rug\n   |   |  \u251c\u2500\u2500 ClassRenamer.rug\n   |   |  \u251c\u2500\u2500 PackageMove.rug\n   |   |  \u251c\u2500\u2500 PomParameterizer.rug\n   |   |  \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rug\n   |   |  \u251c\u2500\u2500 RemoveChangeLog.rug\n   |   |  \u2514\u2500\u2500 RemoveCodeOfConduct.rug\n   |  \u251c\u2500\u2500 manifest.yml\n   |  \u251c\u2500\u2500 metadata.json\n   |  \u251c\u2500\u252c templates\n   |   |  \u251c\u2500\u2500 ApacheSoftwareLicenseV20.vm\n   |   |  \u251c\u2500\u2500 CHANGELOG.md.mustache\n   |   |  \u251c\u2500\u2500 gitignore.vm\n   |   |  \u2514\u2500\u2500 readme.vm\n   |  \u2514\u2500\u252c tests\n   |    \u251c\u2500\u2500 AddApacheSoftwareLicense20.rt\n   |    \u251c\u2500\u2500 AddChangeLog.rt\n   |    \u251c\u2500\u2500 AddGitIgnore.rt\n   |    \u251c\u2500\u2500 AddReadme.rt\n   |    \u251c\u2500\u2500 ClassRenamer.rt\n   |    \u251c\u2500\u2500 PackageMove.rt\n   |    \u251c\u2500\u2500 PomParameterizer.rt\n   |    \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rt\n   |    \u251c\u2500\u2500 RemoveChangeLog.rt\n   |    \u2514\u2500\u2500 RemoveCodeOfConduct.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u2500 CHANGELOG.md\n  \u251c\u2500\u2500 CODE_OF_CONDUCT.md\n  \u251c\u2500\u2500 LICENSE\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/common-editors\n   |  \u2514\u2500\u2500 pom.xml\n  \u251c\u2500\u2500 README.md\n  \u251c\u2500\u252c src/main/java/com/atomist/springrest\n   |  \u251c\u2500\u2500 SpringRestApplication.java\n   |  \u2514\u2500\u2500 SpringRestConfiguration.java\n  \u251c\u2500\u252c src/main/resources\n   |  \u251c\u2500\u2500 application.properties\n   |  \u2514\u2500\u2500 logback.xml\n  \u2514\u2500\u252c src/test/java/com/atomist/springrest\n    \u251c\u2500\u2500 SpringRestApplicationTests.java\n    \u251c\u2500\u2500 SpringRestOutOfContainerIntegrationTests.java\n    \u2514\u2500\u2500 SpringRestWebIntegrationTests.java\n\nSuccessfully installed archive  for  atomist-rugs:common-editors:0.7.0  This command packages up all of the Rugs in the  .atomist  directory\nand installs them in your local repository, typically ~/.atomist/repository .",
            "title": "Install a Rug Archive"
        },
        {
            "location": "/quick-starts/rug-cli/#list-editors",
            "text": "Remember above when we ran that arcane  awk  command to list the\neditors?  There is a better way!  Now that we some editors installed\nlocally, we can list our local editors.  $ rug list\nResolving dependencies  for  com.atomist:rug:0.8.0 completed\nListing  local  archives completed\n\n\u2192 Local Archives\n  atomist-rugs:common-editors  ( 0 .7.0 ) \n\nFor more information on specific archive version, run:\n  rug describe archive ARCHIVE -a VERSION  Looks like the Rug Archive we installed is indeed installed.  That\nlast line of the output tells us how we can get more information.\nLet's try that command.  Since we only have one version available, we\ncan omit the  -a  command-line option.  When it is not provided, the\nlatest version is used.  $ rug describe archive atomist-rugs:common-editors\nProcessing dependencies\n  Downloading atomist-rugs/common-editors/maven-metadata.xml \u2190 rugs  ( 0kb )  succeeded\nResolving dependencies  for  atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\n\natomist-rugs:common-editors:0.7.0\n\n\u2192 Origin\n  atomist-rugs/common-editors.git#master  ( 622ed10 ) \n\u2192 Archive\n  ~/.atomist/repository/atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip  ( 39kb in  43  files ) \n\n\u2192 Editors\n  AddApacheSoftwareLicense20  ( add the Apache Software License version  2 .0 file ) \n  AddChangeLog  ( adds a new CHANGELOG ) \n  AddReadme  ( adds a project specific README ) \n  AddScalaMavenGitIgnore  ( adds a .gitignore suitable  for  Scala Maven projects ) \n  ClassRenamer  ( renames a Java class, replacing one literal pattern with another ) \n  PackageMove  ( renames a Java package ) \n  PomParameterizer  ( updates a Maven pom to a new group, artifact, version and description ) \n  RemoveApacheSoftwareLicense20  ( removes an Apache Software License version  2 .0 file  if  present ) \n  RemoveChangeLog  ( removes CHANGELOG file  if  present ) \n  RemoveCodeOfConduct  ( removes CODE_OF_CONDUCT file  if  present ) \n\n\u2192 Requires\n   [ 0 .8.0,1.0.0 ) \n\nTo get more information on any of the Rugs listed above, run:\n  rug describe editor | generator | executor | reviewer ARTIFACT  That list of editors looks familiar, we must be doing something right!\nAgain, the last line of the output tells us how we can get more\ninformation.  Let's try it.  $ rug describe editor AddApacheSoftwareLicense20\n\nNo valid ARTIFACT provided, no default artifact defined and not in  local  mode.\n\nRun the following  command   for  usage help:\n  rug describe --help.  Hmm, looks like something went wrong.  Fortunately the error tells us\nwe either need to define a default artifact or run in local mode.  How\ndo we run in local mode?  The above output tells us to run  rug\ndescribe --help  for usage help.  Let's do it.  $ rug describe --help\nUsage: rug describe  [ OPTION ] ... TYPE ARTIFACT\nPrint details about an archive or Rug.\n\nOptions:\n  -?,-h,--help          Print  help  information\n  -X,--error            Print verbose error messages\n  -o,--offline          Use only downloaded archives\n  -q,--quiet            Do not display progress messages\n  -r,--resolver-report  Print dependency tree\n  -s,--settings FILE    Use settings file FILE\n  -t,--timer            Print timing information\n  -u,--update           Update dependency resolution\n\nCommand Options:\n  -a,--archive-version AV  Use archive version AV\n  -l,--local               Use  local  working directory as archive\n\nTYPE should be  'editor' ,  'generator' ,  'executor' ,  'reviewer'  or 'archive'  and ARTIFACT should be the full name of an artifact, e.g., \"atomist:spring-service:Spring Microservice\" .  If the name of the\nartifact has spaces in it, you need to put quotes around it.\n\nPlease report issues at https://github.com/atomist/rug-cli  The help output provides two pieces of information useful to us.\nFirst, it says the  ARTIFACT  should be the full name of the artifact.\nWe only provided the editor name.  Perhaps we needed to prepend the\narchive name.  Second, the  -l  or  --local  command-line option tells\nthe CLI to use the current directory as an archive.  In other words,\nit tries to find an  .atomist  directory and use the Rugs in it.\nSince we are in a directory that has the  .atomist  directory with the\neditor we want to run, that seems promising.  $ rug describe -l editor AddApacheSoftwareLicense20\nResolving dependencies  for  atomist-rugs:common-editors:0.7.0 \u2190  local  completed\nLoading atomist-rugs:common-editors:0.7.0 \u2190  local  into runtime completed\n\nAddApacheSoftwareLicense20\natomist-rugs:common-editors:0.7.0\nadd the Apache Software License version  2 .0 file\n\n\u2192 Tags\n  apache  ( apache ) \n  license  ( license ) \n  documentation  ( documentation ) \n\u2192 Parameters\n  no parameters needed\n\nTo invoke the AddApacheSoftwareLicense20 editor, run:\n  rug edit  \"atomist-rugs:common-editors:AddApacheSoftwareLicense20\"  -a  0 .7.0 -l  Success!  The output from that command also tells us what the full\nname of the editor is, atomist-rugs:common-editors:AddApacheSoftwareLicense20 .  We could\nhave guessed that.  Since we previously installed the editor, we could\nhave run the following command and gotten the same result.  $ rug describe editor atomist-rugs:common-editors:AddApacheSoftwareLicense20  The  describe editor  output includes several pieces of useful\ninformation.  The description, \"adds the Apache Software License\nversion 2.0 file\", provides a slightly more verbose description than\nthe already descriptive editor name.  We can see that this editor has\nthree tags,  license ,  apache , and  documentation , and it takes no\nparameters.  Adding the Apache license seems like a good thing to do.  The last\nline of the output once again gives us the information we need: how to\nrun this editor.  Let's try it.",
            "title": "List Editors"
        },
        {
            "location": "/quick-starts/rug-cli/#run-an-editor",
            "text": "We will just run the command we were provided above.  We remove the -l  since, having installed the archive, we do not need to run it\nfrom the local directory, we can run it from the installed archive.  $ rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20 -a  0 .7.0\nResolving dependencies  for  atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\nRunning editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\u2192 Project\n  ~/develop/atomist-rugs/common-editors/  ( 282kb in  302  files ) \n\n\u2192 Changes\n  \u251c\u2500\u2500 LICENSE created 11kb\n  \u2514\u2500\u2500 .atomist.yml created 3kb\n\nSuccessfully edited project common-editors  Looks like two files were edited in the local repository.  $ git status\nOn branch master\nYour branch is up-to-date with  'origin/master' .\nChanges not staged  for  commit:\n   ( use  \"git add <file>...\"  to update what will be committed ) \n   ( use  \"git checkout -- <file>...\"  to discard changes in working directory ) \n\n    modified:   .atomist.yml\n\nno changes added to commit  ( use  \"git add\"  and/or  \"git commit -a\" )   Hmm, git shows only one file has been modified.  Why?  Well, the\ncontents of the  LICENSE  file were set to be the Apache Software\nLicense, but that is what the contents already were.  Git is smart.\nWhat is that  atomist.yml  file?  $ cat .atomist.yml\n---\nkind:  \"operation\" \nclient:  \"rug-cli 0.20.0\" \neditor:\n  name:  \"atomist-rugs.common-editors.AddApacheSoftwareLicense20\" \n  group:  \"atomist-rugs\" \n  artifact:  \"common-editors\" \n  version:  \"0.7.0\" \n  origin:\n    repo:  \"atomist-rugs/common-editors.git\" \n    branch:  \"master\" \n    sha:  \"622ed10\"   Looks like it is a record of what we have done, nice!  I suppose we should have guessed the editor would act on the local\ndirectory, but we don't really want to edit the current project.\nLet's create another project to edit.  We run the same command as\nabove, except we'll remove the archive version command-line option.\nIf you do not provide the  -a  option, the CLI will use the latest\ninstalled version, 0.7.0 in our case.  $  cd  ..\n$ mkdir atomist-test\n$  cd  !$\n$ git init\n$ rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20\n$ rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20\nResolving dependencies  for  atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\nRunning editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\u2192 Project\n  ~/develop/atomist-rugs/atomist-test/  ( 15  kb in  16  files ) \n\n\u2192 Changes\n  \u251c\u2500\u2500 LICENSE created  11  kb\n  \u2514\u2500\u2500 .atomist.yml created  287  bytes\n\nSuccessfully edited project atomist-test\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n   ( use  \"git add <file>...\"  to include in what will be committed ) \n\n    .atomist.yml\n    LICENSE\n\nnothing added to commit but untracked files present  ( use  \"git add\"  to track )   That's more like it!  What if we decide we do not want the Apache\nSoftware License?  There's an editor for that!  $ rug edit atomist-rugs:common-editors:RemoveApacheSoftwareLicense20\nResolving dependencies  for  atomist-rugs:common-editors:latest completed\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\nRunning editor RemoveApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\u2192 Project\n  ~/develop/atomist-rugs/atomist-test/  ( 26  kb in  15  files ) \n\n\u2192 Changes\n  \u251c\u2500\u2500 LICENSE deleted  15  kb\n  \u2514\u2500\u2500 .atomist.yml created  577  bytes\n\nSuccessfully edited project atomist-test\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n   ( use  \"git add <file>...\"  to include in what will be committed ) \n\n    .atomist.yml\n\nnothing added to commit but untracked files present  ( use  \"git add\"  to track )   We see the  LICENSE  file is gone.  If we inspect the contents of the .atomist.yml  file, we see a complete record of what Rug has done.  $ cat .atomist.yml\n---\nkind:  \"operation\" \nclient:  \"rug-cli 0.20.0\" \neditor:\n  name:  \"atomist-rugs.common-editors.AddApacheSoftwareLicense20\" \n  group:  \"atomist-rugs\" \n  artifact:  \"common-editors\" \n  version:  \"0.7.0\" \n  origin:\n    repo:  \"atomist-rugs/common-editors.git\" \n    branch:  \"master\" \n    sha:  \"622ed10\" \n\n---\nkind:  \"operation\" \nclient:  \"rug-cli 0.20.0\" \neditor:\n  name:  \"atomist-rugs.common-editors.RemoveApacheSoftwareLicense20\" \n  group:  \"atomist-rugs\" \n  artifact:  \"common-editors\" \n  version:  \"0.7.0\" \n  origin:\n    repo:  \"atomist-rugs/common-editors.git\" \n    branch:  \"master\" \n    sha:  \"622ed10\"",
            "title": "Run an Editor"
        },
        {
            "location": "/quick-starts/rug-cli/#more-information",
            "text": "You made it!  That's it for our quick(-ish) introduction to the Rug\nCLI.  Please join our  Atomist Community Slack  to ask\nquestions, get help, and discuss all things Rug.  More detailed documentation can be found in the Rug CLI reference documentation .",
            "title": "More Information"
        },
        {
            "location": "/quick-starts/rug-typescript/",
            "text": "Rug TypeScript Quick Start\n\u00b6\n\n\nRugs can be written in \nTypeScript\n\nor the \nRug DSL\n. The TypeScript approach is usually preferable\nover the \nRug DSL\n when you have some real programmatic work to\ndo in your Rugs where the DSL is too constraining. Also using\nTypeScript has the significant added bonuses of being type-safe and\nhaving great existing tooling support for features like\ncode-completion.\n\n\nIn this Quick Start you're going to set up your Rug project for\nwriting and testing Rugs written in TypeScript and using\nthe \nRug CLI\n.\n\n\nGetting set up for TypeScript Rugs\n\u00b6\n\n\nTo enable your Rug project for TypeScript all you need to do is:\n\n\n\n\nAdd a \nstandard \npackage.json\n file\n into the \n.atomist\n directory, amending for your own Rug project's settings.\n\n\nInstall \nnode\n and \nnpm\n for local TypeScript development and, specifically, to install any dependencies your Rug TypeScript sources may have.\n\n\n\n\nYou can have both Rug DSL and Rug TypeScript files in the \nsame\n Rug project. A good example of this is available in the \ntravis-editors\n Rug project\n.\n\n\n\n\nNOTE:\n A Rug editor and generator for this work is being produced and will reside in the \nrug-editors\n Rug project\n.\n\n\n\n\nAdding a \npackage.json\n file\n\u00b6\n\n\nAs a starting point, simply add a \nstandard \npackage.json\n file\n to your \n.atomist\n directory that contains the following:\n\n\n{\n\n  \n\"dependencies\"\n:\n \n{\n\n    \n\"@atomist/rug\"\n:\n \n\"0.12.0\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\nAll you need as a minimum in the \npackage.json\n file is the dependency on the version of Rug that matches what is specified in your \n.atomist/manifest.yml\n file.\n\n\nInstall Node and NPM and run \nnpm install\n\u00b6\n\n\nTo get any dependencies that your Rug TypeScript code may need you should now install \nnode.js\n, which will install the Node Package Manager (npm) at the same time.\n\n\nOnce you have these two installed on your machine you should be able to successfully execute \nnpm install\n in your \n.atomist\n directory to see the following:\n\n\n$ npm install\n@yourusername/scattered-rugs@0.1.0 ...scattered-rugs/.atomist\n\u2514\u2500\u2500 @atomist/rug@0.12.0\n\n\n\n\n\nThis will create a \nnode_modules\n directory which can be ignored, using something like \n.gitignore\n if you're using \ngit\n, and not checked into source control as it is only needed for local development.\n\n\nWriting your first TypeScript Rug editor\n\u00b6\n\n\nNow you are set up for working with Rug in TypeScript, let's write a simple editor. As usual, we start by constructing a test for our future editor and we can do this using the convenience of a Rug DSL BDD test:\n\n\nscenario SimpleSampleEditor should just add a file called \"README.md\" to the target project\n\ngiven\n  Empty\n\nwhen\n  SimpleSampleEditor\n\nthen\n  fileExists \"README.md\"\n    and fileContains \"README.md\" \"Hello, Rug TypeScript World!\"\n\n\n\n\n\nDrop this test into a file called \n.atomist/tests/MyFirstEditor.rt\n and then execute \nrug test\n using the Rug CLI (link) and you should see something like the following:\n\n\n$ rug \ntest\n\nResolving dependencies \nfor\n yourusername:scattered-rugs:0.1.0 \u2190 \nlocal\n completed\nLoading yourusername:scattered-rugs:0.1.0 \u2190 \nlocal\n into runtime completed\nRunning \ntest\n scenarios in yourusername:scattered-rugs:0.1.0 \u2190 \nlocal\n completed\n\n\u2192 Failed Scenarios\n  SimpleSampleEditor should just add a file called \n\"README.md\"\n to the target project \n(\n1\n of \n1\n assertions failed\n)\n\n    Failed Assertions\n       Scenario \n'SimpleSampleEditor should just add a file called \"README.md\" to the target project'\n tests editor \n'SimpleSampleEditor'\n, which was not found.\nKnown operations are \n[]\n\n\n\n\n\n\nWith our test \nhappily\n failing you can now write the following Rug TypeScript editor to meet the assertions of the test. Create a file called \nSimpleSampleEditor.ts\n in the \n.atomist/editors\n directory that contains the following:\n\n\nimport\n \n{\n \nEditProject\n \n}\n \nfrom\n \n\"@atomist/rug/operations/ProjectEditor\"\n\n\nimport\n \n{\n \nEditor\n,\n \nTags\n,\n \nParameter\n \n}\n \nfrom\n \n\"@atomist/rug/operations/Decorators\"\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Core'\n\n\n\n@Editor\n(\n\"SimpleSampleEditor\"\n,\n\"A simple sample Rug TypeScript editor\"\n)\n\n\n@Tags\n(\n\"simple\"\n)\n\n\nclass\n \nMySimpleEditor\n \nimplements\n \nEditProject\n{\n\n\n    \n@Parameter\n({\ndescription\n:\n \n\"Does fun things!\"\n,\n \npattern\n:\n \n\"@any\"\n})\n\n    \ndescription\n: \nstring\n \n=\n \n\"Hello, Rug TypeScript World!\"\n\n\n    \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n        \nproject\n.\naddFile\n(\n\"README.md\"\n,\n \nthis\n.\ndescription\n);\n\n    \n}\n\n\n}\n\n\n\nexport\n \nlet\n \nsimple\n \n=\n \nnew\n \nMySimpleEditor\n()\n\n\n\n\n\n\nWalking through this editor the contents are:\n\n\n\n\nImporting the TypeScript typings for working with Rug.\n\n\nDeclaring the editor using the \n@Editor\n decorator, passing in its name and description\n\n\nTagging the editor using the \n@Tag\n decorator to aid discoverability\n\n\nImplementing the \nEditProject\n interface to enforce the \nedit\n function signature\n\n\nDeclaring any required parameters using the \n@Parameter\n decorator. The value of the field is used as the default value if no value is supplied during invocation\n\n\nFinally, exporting an instance your editor that will be used as a prototype for creating one for each request (for thread safety)\n\n\n\n\nYou should now be able to execute \nrug test\n from your project's root directory and get a similar output to the following:\n\n\n$ rug \ntest\n\nResolving dependencies \nfor\n yourusername:scattered-rugs:0.1.0 \u2190 \nlocal\n completed\nLoading yourusername:scattered-rugs:0.1.0 \u2190 \nlocal\n into runtime completed\nExecuting scenario SimpleSampleEditor should just add a file called \n\"README.md\"\n to the target project...\n  Testing assertion fileExists\n(\nSimpleLiteral\n(\nREADME.md\n))\n\n  Testing assertion fileContains\n(\nSimpleLiteral\n(\nREADME.md\n)\n,SimpleLiteral\n(\nHello, Rug TypeScript World!\n))\n\nRunning \ntest\n scenarios in yourusername:scattered-rugs:0.1.0 \u2190 \nlocal\n completed\n\nSuccessfully executed \n1\n of \n1\n scenarios: Test SUCCESS\n\n\n\n\n\nMore Information\n\u00b6\n\n\nThat's it for our brief introduction to Rug\nTypeScript.  Please join our \nAtomist Community Slack\n to ask\nquestions, get help, and discuss all things Rug.",
            "title": "Rug TypeScript"
        },
        {
            "location": "/quick-starts/rug-typescript/#rug-typescript-quick-start",
            "text": "Rugs can be written in  TypeScript \nor the  Rug DSL . The TypeScript approach is usually preferable\nover the  Rug DSL  when you have some real programmatic work to\ndo in your Rugs where the DSL is too constraining. Also using\nTypeScript has the significant added bonuses of being type-safe and\nhaving great existing tooling support for features like\ncode-completion.  In this Quick Start you're going to set up your Rug project for\nwriting and testing Rugs written in TypeScript and using\nthe  Rug CLI .",
            "title": "Rug TypeScript Quick Start"
        },
        {
            "location": "/quick-starts/rug-typescript/#getting-set-up-for-typescript-rugs",
            "text": "To enable your Rug project for TypeScript all you need to do is:   Add a  standard  package.json  file  into the  .atomist  directory, amending for your own Rug project's settings.  Install  node  and  npm  for local TypeScript development and, specifically, to install any dependencies your Rug TypeScript sources may have.   You can have both Rug DSL and Rug TypeScript files in the  same  Rug project. A good example of this is available in the  travis-editors  Rug project .   NOTE:  A Rug editor and generator for this work is being produced and will reside in the  rug-editors  Rug project .",
            "title": "Getting set up for TypeScript Rugs"
        },
        {
            "location": "/quick-starts/rug-typescript/#adding-a-packagejson-file",
            "text": "As a starting point, simply add a  standard  package.json  file  to your  .atomist  directory that contains the following:  { \n   \"dependencies\" :   { \n     \"@atomist/rug\" :   \"0.12.0\" \n   }  }   All you need as a minimum in the  package.json  file is the dependency on the version of Rug that matches what is specified in your  .atomist/manifest.yml  file.",
            "title": "Adding a package.json file"
        },
        {
            "location": "/quick-starts/rug-typescript/#install-node-and-npm-and-run-npm-install",
            "text": "To get any dependencies that your Rug TypeScript code may need you should now install  node.js , which will install the Node Package Manager (npm) at the same time.  Once you have these two installed on your machine you should be able to successfully execute  npm install  in your  .atomist  directory to see the following:  $ npm install\n@yourusername/scattered-rugs@0.1.0 ...scattered-rugs/.atomist\n\u2514\u2500\u2500 @atomist/rug@0.12.0  This will create a  node_modules  directory which can be ignored, using something like  .gitignore  if you're using  git , and not checked into source control as it is only needed for local development.",
            "title": "Install Node and NPM and run npm install"
        },
        {
            "location": "/quick-starts/rug-typescript/#writing-your-first-typescript-rug-editor",
            "text": "Now you are set up for working with Rug in TypeScript, let's write a simple editor. As usual, we start by constructing a test for our future editor and we can do this using the convenience of a Rug DSL BDD test:  scenario SimpleSampleEditor should just add a file called \"README.md\" to the target project\n\ngiven\n  Empty\n\nwhen\n  SimpleSampleEditor\n\nthen\n  fileExists \"README.md\"\n    and fileContains \"README.md\" \"Hello, Rug TypeScript World!\"  Drop this test into a file called  .atomist/tests/MyFirstEditor.rt  and then execute  rug test  using the Rug CLI (link) and you should see something like the following:  $ rug  test \nResolving dependencies  for  yourusername:scattered-rugs:0.1.0 \u2190  local  completed\nLoading yourusername:scattered-rugs:0.1.0 \u2190  local  into runtime completed\nRunning  test  scenarios in yourusername:scattered-rugs:0.1.0 \u2190  local  completed\n\n\u2192 Failed Scenarios\n  SimpleSampleEditor should just add a file called  \"README.md\"  to the target project  ( 1  of  1  assertions failed ) \n    Failed Assertions\n       Scenario  'SimpleSampleEditor should just add a file called \"README.md\" to the target project'  tests editor  'SimpleSampleEditor' , which was not found.\nKnown operations are  []   With our test  happily  failing you can now write the following Rug TypeScript editor to meet the assertions of the test. Create a file called  SimpleSampleEditor.ts  in the  .atomist/editors  directory that contains the following:  import   {   EditProject   }   from   \"@atomist/rug/operations/ProjectEditor\"  import   {   Editor ,   Tags ,   Parameter   }   from   \"@atomist/rug/operations/Decorators\"  import   {   Project   }   from   '@atomist/rug/model/Core'  @Editor ( \"SimpleSampleEditor\" , \"A simple sample Rug TypeScript editor\" )  @Tags ( \"simple\" )  class   MySimpleEditor   implements   EditProject { \n\n     @Parameter ({ description :   \"Does fun things!\" ,   pattern :   \"@any\" }) \n     description :  string   =   \"Hello, Rug TypeScript World!\" \n\n     edit ( project :  Project )   { \n         project . addFile ( \"README.md\" ,   this . description ); \n     }  }  export   let   simple   =   new   MySimpleEditor ()   Walking through this editor the contents are:   Importing the TypeScript typings for working with Rug.  Declaring the editor using the  @Editor  decorator, passing in its name and description  Tagging the editor using the  @Tag  decorator to aid discoverability  Implementing the  EditProject  interface to enforce the  edit  function signature  Declaring any required parameters using the  @Parameter  decorator. The value of the field is used as the default value if no value is supplied during invocation  Finally, exporting an instance your editor that will be used as a prototype for creating one for each request (for thread safety)   You should now be able to execute  rug test  from your project's root directory and get a similar output to the following:  $ rug  test \nResolving dependencies  for  yourusername:scattered-rugs:0.1.0 \u2190  local  completed\nLoading yourusername:scattered-rugs:0.1.0 \u2190  local  into runtime completed\nExecuting scenario SimpleSampleEditor should just add a file called  \"README.md\"  to the target project...\n  Testing assertion fileExists ( SimpleLiteral ( README.md )) \n  Testing assertion fileContains ( SimpleLiteral ( README.md ) ,SimpleLiteral ( Hello, Rug TypeScript World! )) \nRunning  test  scenarios in yourusername:scattered-rugs:0.1.0 \u2190  local  completed\n\nSuccessfully executed  1  of  1  scenarios: Test SUCCESS",
            "title": "Writing your first TypeScript Rug editor"
        },
        {
            "location": "/quick-starts/rug-typescript/#more-information",
            "text": "That's it for our brief introduction to Rug\nTypeScript.  Please join our  Atomist Community Slack  to ask\nquestions, get help, and discuss all things Rug.",
            "title": "More Information"
        },
        {
            "location": "/rug/why-and-what-is-rug/",
            "text": "Why and What is Rug?\n\u00b6\n\n\nRug is a medium for code that modifies code. Rug helps developers automate development.\nWhen a coding task is common, tedious, nitpicky, or hard to remember how to do correctly,\n there's value in encoding how it's done, instead of performing the typing every time.\n\n\nThe Rug ecosystem includes a language, runtime, test runner, and package manager.\nThe Rug language is optional; there's also a \nTypeScript module\n,\nso you can combine a general-purpose language with the tooling of Rug.\nThe Rug runtime runs as a service, accessible from any Slack that has invited the Atomist bot (try it in \nAtomist Community slack\n).\nThere's also the \nRug CLI\n for local use, essential for Rug development.\n\n\nSome Use Cases for Rug\n\u00b6\n\n\nWe are constantly finding new uses for Rug and here are a sample of\nthe cases that we, and others, have used Rug for so far:\n\n\n\n\nHelping technical leads to guide development teams in best\n    practices on various technologies from initial project creation\n    through to the full lifecycle of a project\n\n\nSafely applying and evaluating new technologies to existing\n    projects\n\n\nHelping open source project owners to guide their users on how to\n    start out with, and continuously update and evolve, the software\n    based on their work.\n\n\nHelping to apply best-practice tools and techniques from the\n    microservices toolbox\n\n\n\n\nLearn more\n\u00b6\n\n\n\n\nRug Language\n\n\nWhat goes in a Rug project?\n\n\nA day in the life of a Rug project\n\n\nRug CLI\n\n\n\n\nWant to share how \nyou\n are using Rug? Join\nthe \nAtomist Community Slack\n.",
            "title": "Why and What is Rug?"
        },
        {
            "location": "/rug/why-and-what-is-rug/#why-and-what-is-rug",
            "text": "Rug is a medium for code that modifies code. Rug helps developers automate development.\nWhen a coding task is common, tedious, nitpicky, or hard to remember how to do correctly,\n there's value in encoding how it's done, instead of performing the typing every time.  The Rug ecosystem includes a language, runtime, test runner, and package manager.\nThe Rug language is optional; there's also a  TypeScript module ,\nso you can combine a general-purpose language with the tooling of Rug.\nThe Rug runtime runs as a service, accessible from any Slack that has invited the Atomist bot (try it in  Atomist Community slack ).\nThere's also the  Rug CLI  for local use, essential for Rug development.",
            "title": "Why and What is Rug?"
        },
        {
            "location": "/rug/why-and-what-is-rug/#some-use-cases-for-rug",
            "text": "We are constantly finding new uses for Rug and here are a sample of\nthe cases that we, and others, have used Rug for so far:   Helping technical leads to guide development teams in best\n    practices on various technologies from initial project creation\n    through to the full lifecycle of a project  Safely applying and evaluating new technologies to existing\n    projects  Helping open source project owners to guide their users on how to\n    start out with, and continuously update and evolve, the software\n    based on their work.  Helping to apply best-practice tools and techniques from the\n    microservices toolbox",
            "title": "Some Use Cases for Rug"
        },
        {
            "location": "/rug/why-and-what-is-rug/#learn-more",
            "text": "Rug Language  What goes in a Rug project?  A day in the life of a Rug project  Rug CLI   Want to share how  you  are using Rug? Join\nthe  Atomist Community Slack .",
            "title": "Learn more"
        },
        {
            "location": "/rug/rug-dsl/",
            "text": "Rug Language\n\u00b6\n\n\nIn a nutshell, Rug is an\n\nExternal Domain Specific Language\n.\n\n\nThe Rug DSL was designed to work alongside your existing projects in\nas unintrusive a fashion as possible to automate all the slow,\nannoying tasks of working in a modern software development\nenvironment.\n\n\nA key design goal was to respect your own tooling as much as possible\nso that \nevery project should be a working Atomist project, and\nevery Atomist project a working project\n.\n\n\nWhy a New Language?\n\u00b6\n\n\nWriting a language is hard, and there are already a \nlot\n of languages\nout there! So why do we need yet another one? Well the fact is that\noriginally we didn't actually start out to create one. At Atomist we\nhad a simple mission to:\n\n\n\n\nSimplify\n your Software Development Life by \nremoving the\nannoyances\n of \nCreating\n, \nMaintaining\n and \nRunning\n\nyour software.\n\n\n\n\nIt turns out there are a \nlot of annoyances\n, which was great as\nthere was so much we could help with!\n\n\nFrom the delay between deciding to create a project and getting\neverything all set up so you can get creating, through to helping\nteams adopt best practices. It became very obvious to us that\n\nnothing so far had hit these full-development-cycle problems\n and\nso that's what we wanted to do.\n\n\nAnd then there was the \nmicroservices architectural style\n that\n\ntook these annoyances and turned them up to 11!\n\n\nWe worked our way through these annoyances, examining them every step,\ncreated tools where we needed, created languages as well, and the\nresult so far is \nRug.\n\n\n\n\nRug ties your software development room together.\n\n\n\n\nWhat Rug is, and is not\n\u00b6\n\n\nRug is a \nsimple\n, English-like, \nDSL\n that provides a way to...\n\n\n\n\nSelect and manipulate\n files, projects and even\n    multiple-projects.\n\n\nCompose\n operations to maximize reuse.\n\n\nDeclare parameters\n to allow automated gathering of valid user\n    input to drive operations.\n\n\n\n\nQuite simply, Rug and its supporting systems are \n\"Software that\nWrites and Evolves Software\".\n\n\nRug is not a full-blown language with a complete set of control\nstructures as this is not its purpose.\n\n\nKey Rug Concepts\n\u00b6\n\n\nTo keep Rug focussed and simple, there are only 7 concepts in Rug\nitself:\n\n\n\n\nGenerators\n, which can be used to\n    create new projects from an existing model project.\n\n\nEditors\n, which are used to make\n    principled changes to a single project\n\n\nTemplates, content used by\n    \ngenerators\n\n    and \neditors\n)\n\n\nReviewers (coming soon), which can inspect projects and match on\n    patterns, but can't change them\n\n\nExecutors (coming soon), which enable you to take coordinated actions\n    across multiple projects\n\n\nHandlers (coming soon), which are triggered by events in your software\n    development lifecycle\n\n\nTests\n (and a simple but powerful\n    test-driven environment so that you can have real confidence in\n    your Rug scripts)\n\n\n\n\nRug and the Atomist (Ro)Bot\n\u00b6\n\n\nWith Rug we wanted a way to create a system that actually helped you\ncreate and evolve your software projects as quickly, and as correctly\nas possible. We assumed from the get-go that you were developing in a\npolyglot environment, and so anything we created had to be open to\nworking with whatever artifacts you needed to create.\n\n\nTo this end we created a Bot and a collection of services that allow\nyou to run Rug in a number of different useful settings.\n\n\nRug is Evolving \nFast\n, but that's \nOK\n\u00b6\n\n\nWe're developing the Rug language to be as powerful, simple\nand consistent as possible. Normally languages cannot evolve\nparticularly quickly as they need to be updated in lock-step with the\ncommunity that is using them. When you create\na \nRug project\n and write your Rug generators, editors\netc. within it you tie the version of the language to the project\nyou're creating.\n\n\nThis gives you the power to select the version of the Rug language you\ndepend upon, safe in the knowledge that if you can run your Rug build\nyour Rug scripts locally with the version of Rug you wrote them to,\nthey can be run anywhere Rug can be.\n\n\nYou also of course have the power to decide when you upgrade to a\nnewer version of Rug for particular language features that may have\ncome to light after you originally created your Rug project. As we\n evolve the languages, we'll create Rug editors to do this upgrade programatically!\n\n\nRug can be Extended with Rug Language Extensions\n\u00b6\n\n\nThere is already a \nlot\n of power in\nthe \nCore Rug Language Extensions\n that are built\ninto the Rug language but the intention is not for this to be the\nonly, exhaustive set of types you can use.\n\n\nRug itself can be extended with new language extensions for new languages,\nframeworks or even systems.\n\n\n\n\nNOTE: More complete documentation on how to extend, package and\ndistribute Rug Language Extensions is coming soon.\n\n\n\n\nIf you want to see some Rugs, check out the rug projects in \natomist-rugs\n.",
            "title": "Rug Language"
        },
        {
            "location": "/rug/rug-dsl/#rug-language",
            "text": "In a nutshell, Rug is an External Domain Specific Language .  The Rug DSL was designed to work alongside your existing projects in\nas unintrusive a fashion as possible to automate all the slow,\nannoying tasks of working in a modern software development\nenvironment.  A key design goal was to respect your own tooling as much as possible\nso that  every project should be a working Atomist project, and\nevery Atomist project a working project .",
            "title": "Rug Language"
        },
        {
            "location": "/rug/rug-dsl/#why-a-new-language",
            "text": "Writing a language is hard, and there are already a  lot  of languages\nout there! So why do we need yet another one? Well the fact is that\noriginally we didn't actually start out to create one. At Atomist we\nhad a simple mission to:   Simplify  your Software Development Life by  removing the\nannoyances  of  Creating ,  Maintaining  and  Running \nyour software.   It turns out there are a  lot of annoyances , which was great as\nthere was so much we could help with!  From the delay between deciding to create a project and getting\neverything all set up so you can get creating, through to helping\nteams adopt best practices. It became very obvious to us that nothing so far had hit these full-development-cycle problems  and\nso that's what we wanted to do.  And then there was the  microservices architectural style  that took these annoyances and turned them up to 11!  We worked our way through these annoyances, examining them every step,\ncreated tools where we needed, created languages as well, and the\nresult so far is  Rug.   Rug ties your software development room together.",
            "title": "Why a New Language?"
        },
        {
            "location": "/rug/rug-dsl/#what-rug-is-and-is-not",
            "text": "Rug is a  simple , English-like,  DSL  that provides a way to...   Select and manipulate  files, projects and even\n    multiple-projects.  Compose  operations to maximize reuse.  Declare parameters  to allow automated gathering of valid user\n    input to drive operations.   Quite simply, Rug and its supporting systems are  \"Software that\nWrites and Evolves Software\".  Rug is not a full-blown language with a complete set of control\nstructures as this is not its purpose.",
            "title": "What Rug is, and is not"
        },
        {
            "location": "/rug/rug-dsl/#key-rug-concepts",
            "text": "To keep Rug focussed and simple, there are only 7 concepts in Rug\nitself:   Generators , which can be used to\n    create new projects from an existing model project.  Editors , which are used to make\n    principled changes to a single project  Templates, content used by\n     generators \n    and  editors )  Reviewers (coming soon), which can inspect projects and match on\n    patterns, but can't change them  Executors (coming soon), which enable you to take coordinated actions\n    across multiple projects  Handlers (coming soon), which are triggered by events in your software\n    development lifecycle  Tests  (and a simple but powerful\n    test-driven environment so that you can have real confidence in\n    your Rug scripts)",
            "title": "Key Rug Concepts"
        },
        {
            "location": "/rug/rug-dsl/#rug-and-the-atomist-robot",
            "text": "With Rug we wanted a way to create a system that actually helped you\ncreate and evolve your software projects as quickly, and as correctly\nas possible. We assumed from the get-go that you were developing in a\npolyglot environment, and so anything we created had to be open to\nworking with whatever artifacts you needed to create.  To this end we created a Bot and a collection of services that allow\nyou to run Rug in a number of different useful settings.",
            "title": "Rug and the Atomist (Ro)Bot"
        },
        {
            "location": "/rug/rug-dsl/#rug-is-evolving-fast-but-thats-ok",
            "text": "We're developing the Rug language to be as powerful, simple\nand consistent as possible. Normally languages cannot evolve\nparticularly quickly as they need to be updated in lock-step with the\ncommunity that is using them. When you create\na  Rug project  and write your Rug generators, editors\netc. within it you tie the version of the language to the project\nyou're creating.  This gives you the power to select the version of the Rug language you\ndepend upon, safe in the knowledge that if you can run your Rug build\nyour Rug scripts locally with the version of Rug you wrote them to,\nthey can be run anywhere Rug can be.  You also of course have the power to decide when you upgrade to a\nnewer version of Rug for particular language features that may have\ncome to light after you originally created your Rug project. As we\n evolve the languages, we'll create Rug editors to do this upgrade programatically!",
            "title": "Rug is Evolving Fast, but that's OK"
        },
        {
            "location": "/rug/rug-dsl/#rug-can-be-extended-with-rug-language-extensions",
            "text": "There is already a  lot  of power in\nthe  Core Rug Language Extensions  that are built\ninto the Rug language but the intention is not for this to be the\nonly, exhaustive set of types you can use.  Rug itself can be extended with new language extensions for new languages,\nframeworks or even systems.   NOTE: More complete documentation on how to extend, package and\ndistribute Rug Language Extensions is coming soon.   If you want to see some Rugs, check out the rug projects in  atomist-rugs .",
            "title": "Rug can be Extended with Rug Language Extensions"
        },
        {
            "location": "/rug/rug-archive/",
            "text": "What goes in a Rug Archive?\n\u00b6\n\n\nA key design goal was to respect your own tooling as much as possible\nso that \nevery project should be a working Atomist project, and\nevery Atomist project is a working project\n.\n\n\nThe Atomist Rug DSL was designed to work unintrusively alongside your\nexisting projects to automate all the slow, annoying tasks of working\nin a modern software development environment.\n\n\nAtomist's Rug DSL can be expressed and packaged alongside your\nexisting projects. A project that has a \n.atomist\n directory, along\nwith some other artifacts that we'll explain here, is referred to as a\n\nRug project\n.\n\n\nA packaged (zipped) Rug Project is referred to as a \nRug project\n.\n\n\nExploring a very basic Rug Project\n\u00b6\n\n\nA very basic Rug project, along with some example Rug scripts and\nother bits and pieces, is provided by creating a new project using\nthe \nRug project generator\n.  You can run this\ngenerator using the Atomist Button below.\n\n\n\n\nThe resulting project will have the following contents:\n\n\nREADME.md\n.atomist/\n  pom.xml\n  assembly.xml\n  tests/\n  editors/\n  reviewers/\n  templates/\n.atomist.yml\n\n\n\n\n\nThe \nREADME.md\n is a standard project README file.  The\n\natomist.yml\n file provides information on what Rugs have operated\non the repo.  The contents of the \n.atomist\n directory are described\nin the next section.\n\n\nThe \n.atomist\n directory\n\u00b6\n\n\nAtomist Rug artifacts need to work happily alongside whatever\nlanguages, frameworks or other artifacts may be present in your\nproject. For this reason, Rug artifacts are safely contained in a\n\n.atomist\n directory that has the following general structure:\n\n\n.atomist/\n  manifest.yml <= Metadata for the Rug project\n  editors/     <= Rugs providing editors, generators, and conditional predicates\n  executors/   <= Rugs that will work across multiple repositories\n  reviewers/   <= Rugs that will provide feedback\n  templates/   <= Templates  used by Rugs\n  tests/       <= BDD-style tests for your Rugs\n\n\n\n\n\nFiles in the \neditors\n, \nexecutors\n, and \nreviewers\n directory use the\n\n.rug\n extension if they are using the Rug DSL or the \n.ts\n extension\nif they are written in TypeScript.\n\n\nThe templates in the \ntemplates\n directory can be\neither \nVelocity\n templates with a \n.vm\n extension\nor \nMustache\n templates with a \n.mustache\n extension.\n\n\nRug tests use the \n.rt\n extension.\n\n\nNext steps\n\u00b6\n\n\n\n\nExplore the syntax of Rug tests\n\n\nExplore the syntax of Rug editors\n\n\nExplore the syntax of Rug generators",
            "title": "What Goes in a Rug Archive?"
        },
        {
            "location": "/rug/rug-archive/#what-goes-in-a-rug-archive",
            "text": "A key design goal was to respect your own tooling as much as possible\nso that  every project should be a working Atomist project, and\nevery Atomist project is a working project .  The Atomist Rug DSL was designed to work unintrusively alongside your\nexisting projects to automate all the slow, annoying tasks of working\nin a modern software development environment.  Atomist's Rug DSL can be expressed and packaged alongside your\nexisting projects. A project that has a  .atomist  directory, along\nwith some other artifacts that we'll explain here, is referred to as a Rug project .  A packaged (zipped) Rug Project is referred to as a  Rug project .",
            "title": "What goes in a Rug Archive?"
        },
        {
            "location": "/rug/rug-archive/#exploring-a-very-basic-rug-project",
            "text": "A very basic Rug project, along with some example Rug scripts and\nother bits and pieces, is provided by creating a new project using\nthe  Rug project generator .  You can run this\ngenerator using the Atomist Button below.   The resulting project will have the following contents:  README.md\n.atomist/\n  pom.xml\n  assembly.xml\n  tests/\n  editors/\n  reviewers/\n  templates/\n.atomist.yml  The  README.md  is a standard project README file.  The atomist.yml  file provides information on what Rugs have operated\non the repo.  The contents of the  .atomist  directory are described\nin the next section.",
            "title": "Exploring a very basic Rug Project"
        },
        {
            "location": "/rug/rug-archive/#the-atomist-directory",
            "text": "Atomist Rug artifacts need to work happily alongside whatever\nlanguages, frameworks or other artifacts may be present in your\nproject. For this reason, Rug artifacts are safely contained in a .atomist  directory that has the following general structure:  .atomist/\n  manifest.yml <= Metadata for the Rug project\n  editors/     <= Rugs providing editors, generators, and conditional predicates\n  executors/   <= Rugs that will work across multiple repositories\n  reviewers/   <= Rugs that will provide feedback\n  templates/   <= Templates  used by Rugs\n  tests/       <= BDD-style tests for your Rugs  Files in the  editors ,  executors , and  reviewers  directory use the .rug  extension if they are using the Rug DSL or the  .ts  extension\nif they are written in TypeScript.  The templates in the  templates  directory can be\neither  Velocity  templates with a  .vm  extension\nor  Mustache  templates with a  .mustache  extension.  Rug tests use the  .rt  extension.",
            "title": "The .atomist directory"
        },
        {
            "location": "/rug/rug-archive/#next-steps",
            "text": "Explore the syntax of Rug tests  Explore the syntax of Rug editors  Explore the syntax of Rug generators",
            "title": "Next steps"
        },
        {
            "location": "/rug/rug-lifecycle/",
            "text": "A Day in the Life of a Rug Project\n\u00b6\n\n\nThis page describes the nature, structure and lifecycle of a Rug\nproject.\n\n\nIf you haven't done so and you want to follow along, please \ninstall\nthe Rug CLI\n.\n\n\nInception\n\u00b6\n\n\nThe easiest way to create a new Rug project is by using the\n\nNewRugArchiveProject\n generator via the bot or CLI. Here, we'll show\nhow to do it with the CLI.\n\n\n$ rug generate atomist-rugs:rug-archive:NewRugArchiveProject \n\\\n\n    my-rug-project \n\\\n\n    \ngroup_id\n=\natomist-rugs \n\\\n\n    \nversion\n=\n0\n.1.0 \n\\\n\n    \ndescription\n=\n\"My first Rug project\"\n\nProcessing dependencies\n  Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.pom \u2190 rugs \n(\n806\n bytes\n)\n succeeded\n  Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.zip \u2190 rugs \n(\n18\n kb\n)\n succeeded\nResolving dependencies \nfor\n atomist-rugs:rug-archive:0.2.1 completed\nLoading atomist-rugs:rug-archive:0.2.1 into runtime completed\nRunning generator NewRugArchiveProject of atomist-rugs:rug-archive:0.2.1 completed\n\n\u2192 Project\n  ~/develop/my-rug-project/ \n(\n5\n kb in \n7\n files\n)\n\n\n\u2192 Changes\n  \u251c\u2500\u252c .atomist\n  \n|\n \u251c\u2500\u252c editors\n  \n|\n \n|\n \u2514\u2500\u2500 AddReadme.rug\n  \n|\n \u251c\u2500\u2500 manifest.yml\n  \n|\n \u251c\u2500\u252c templates\n  \n|\n \n|\n \u2514\u2500\u2500 readme.vm\n  \n|\n \u2514\u2500\u252c tests\n  \n|\n   \u2514\u2500\u2500 AddReadme.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u2514\u2500\u2500 README.md\n\nSuccessfully generated new project my-rug-project\n\n\n\n\n\nThat command created a new directory named \nmy-rug-project\n in the\ncurrent directory, \n~/develop\n in this case.\n\n\nStructure\n\u00b6\n\n\nThe created Rug project has the following directory structure:\n\n\n$ tree -a my-rug-project\nmy-rug-project\n\u251c\u2500\u2500 .atomist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 editors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 AddReadme.rug\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 readme.vm\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AddReadme.rt\n\u251c\u2500\u2500 .atomist.yml\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 README.md\n\n\n4\n directories, \n7\n files\n\n\n\n\n\nThe editor \nAddReadme.rug\n and corresponding test \nAddReadme.rt\n have\nbeen generated when running the generate command.\n\n\nLet's take a look at the \nmanifest.yml\n:\n\n\n$ \ncd\n my-rug-project/.atomist\n$ cat manifest.yml\ngroup: atomist-rugs\nartifact: my-rug-project\nversion: \n\"0.1.0\"\n\nrequires: \n\"[0.8.0,1.0.0)\"\n\ndependencies:\nextensions:\n\n\n\n\n\nThe \nmanifest.yml\n specifies the unique coordinates of the Rug archive\nas well as its version.  Dependencies and extensions can also be\ndeclared\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroup\n\n\nThe group of the Rug archive, should be the GitHub org\n\n\n\n\n\n\nartifact\n\n\nA unique identifier within the \ngroup\n, should be the GitHub repository name\n\n\n\n\n\n\nversion\n\n\nVersion of the Rug archive\n\n\n\n\n\n\nrequires\n\n\nThe rug-lib version this project is being developed with. Version range is allowed\n\n\n\n\n\n\ndependencies\n\n\nList of project dependencies in form group:artifact:version. Version ranges are allowed\n\n\n\n\n\n\nextensions\n\n\nList of binary dependencies, e.g., Rug Extension types. Version ranges are allowed\n\n\n\n\n\n\n\n\nRunning Tests\n\u00b6\n\n\nAfter making changes to your Rug code, you should run the tests.  The\ngenerated Rug project already has some tests.\n\n\n$ rug \ntest\n\nResolving dependencies \nfor\n atomist-rugs:my-rug-project:0.1.0 \u2190 \nlocal\n completed\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190 \nlocal\n into runtime completed\nExecuting scenario AddReadme should add README.md...\n  Testing assertion fileExists\n(\nIdentifierFunctionArg\n(\nreadme,None\n))\n\n  Testing assertion fileContains\n(\nIdentifierFunctionArg\n(\nreadme,None\n)\n,IdentifierFunctionArg\n(\nnewName,None\n))\n\n  Testing assertion fileContains\n(\nIdentifierFunctionArg\n(\nreadme,None\n)\n,IdentifierFunctionArg\n(\nnewDescription,None\n))\n\nExecuting scenario AddReadme should reject invalid value name parameter...\nExecuting scenario AddReadme should reject missing parameter...\nRunning \ntest\n scenarios in atomist-rugs:my-rug-project:0.1.0 \u2190 \nlocal\n completed\n\nSuccessfully executed \n3\n of \n3\n scenarios: Test SUCCESS\n\n\n\n\n\nInstalling\n\u00b6\n\n\nTo package the Rug project up and make it available to the Rug CLI to\nrun from any directory, you must install it:\n\n\n$ rug install\nResolving dependencies \nfor\n atomist-rugs:my-rug-project:0.1.0 \u2190 \nlocal\n completed\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190 \nlocal\n into runtime completed\n  Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml\n  Created .atomist/manifest.yml\n  Created .atomist/metadata.json\nGenerating archive metadata completed\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 /Users/dd/.atomist/repository\nInstalling archive into \nlocal\n repository completed\n\n\u2192 Archive\n  ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip \n(\n4\n kb in \n9\n files\n)\n\n\n\u2192 Contents\n  \u251c\u2500\u252c .atomist\n  \n|\n \u251c\u2500\u252c editors\n  \n|\n \n|\n \u2514\u2500\u2500 AddReadme.rug\n  \n|\n \u251c\u2500\u2500 manifest.yml\n  \n|\n \u251c\u2500\u2500 metadata.json\n  \n|\n \u251c\u2500\u252c templates\n  \n|\n \n|\n \u2514\u2500\u2500 readme.vm\n  \n|\n \u2514\u2500\u252c tests\n  \n|\n   \u2514\u2500\u2500 AddReadme.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project\n  \n|\n \u2514\u2500\u2500 pom.xml\n  \u2514\u2500\u2500 README.md\n\nSuccessfully installed archive \nfor\n atomist-rugs:my-rug-project:0.1.0\n\n\n\n\n\nThe \ninstall\n command takes the project, packages it up for\ndistribution, and installs it under \n~/.atomist/repository\n.\n\n\nThe contents of the archive can be further tuned by adding entries to\n\n.gitignore\n and \n.atomist/ignore\n, the packaging step considers the\ncontents of these files when creating the archive.\n\n\nPublishing\n\u00b6\n\n\nPublishing is the process of uploading an archive to a Maven\nrepository so it can only be used by others.  Before publishing a Rug\narchive, you first need to configure a publishing repository in your\n\n~/.atomst/cli.yml\n.  You must have write permission to this\nrepository, set the \npublish\n field to \ntrue\n, and you will typically\nhave to supply authentication information.  For example, if you have\nthe environment variables \nMAVEN_BASE_URL\n, \nMAVEN_USER\n, and\n\nMAVEN_TOKEN\n set appropriate for your Maven repository, you would use\nthe following configuration in your \n~/.atomist/cli.yml\n:\n\n\nremote-repositories\n:\n\n  \nrugs-release\n:\n\n    \npublish\n:\n \ntrue\n\n    \nurl\n:\n \n\"${MAVEN_BASE_URL}/rugs-release\"\n\n    \nauthentication\n:\n\n      \nusername\n:\n \n\"${MAVEN_USER}\"\n\n      \npassword\n:\n \n\"${MAVEN_TOKEN}\"\n\n\n\n\n\n\nOnce you have your publishing repository configured, you simply run\n\nrug publish\n.\n\n\n$ rug publish\nResolving dependencies \nfor\n atomist-rugs:my-rug-project:0.1.0 \u2190 \nlocal\n completed\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190 \nlocal\n into runtime completed\n  Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml\n  Created .atomist/manifest.yml\n  Created .atomist/metadata.json\nGenerating archive metadata completed\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 rugs-release \n(\n4\n kb\n)\n succeeded\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 rugs-release \n(\n639\n bytes\n)\n succeeded\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 rugs-release \n(\n1\n kb\n)\n succeeded\n  Downloading atomist-rugs/my-rug-project/maven-metadata.xml \u2190 rugs-release \n(\n381\n bytes\n)\n succeeded\n  Uploading atomist-rugs/my-rug-project/maven-metadata.xml \u2192 rugs-release \n(\n333\n bytes\n)\n succeeded\nPublishing archive into remote repository completed\n\n\u2192 Archive\n  ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip \n(\n4\n kb in \n9\n files\n)\n\n\n\u2192 Contents\n  \u251c\u2500\u252c .atomist\n  \n|\n \u251c\u2500\u252c editors\n  \n|\n \n|\n \u2514\u2500\u2500 AddReadme.rug\n  \n|\n \u251c\u2500\u2500 manifest.yml\n  \n|\n \u251c\u2500\u2500 metadata.json\n  \n|\n \u251c\u2500\u252c templates\n  \n|\n \n|\n \u2514\u2500\u2500 readme.vm\n  \n|\n \u2514\u2500\u252c tests\n  \n|\n   \u2514\u2500\u2500 AddReadme.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project\n  \n|\n \u2514\u2500\u2500 pom.xml\n  \u2514\u2500\u2500 README.md\n\nSuccessfully published archive \nfor\n atomist-rugs:my-rug-project:0.1.0 to\n  https://atomist.jfrog.io/atomist/rugs-release/atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip\n\n\n\n\n\nThe \natomist-rugs:travis-editors:EnableTravisForRugArchiveTS\n editor\nconfigures testing, installing, and publishing archives as part of a\nTravis CI build.  See the \nbuild\n directory of the \ntravis-editors\n\nproject for more detail.",
            "title": "A Day in the Life of a Rug Archive"
        },
        {
            "location": "/rug/rug-lifecycle/#a-day-in-the-life-of-a-rug-project",
            "text": "This page describes the nature, structure and lifecycle of a Rug\nproject.  If you haven't done so and you want to follow along, please  install\nthe Rug CLI .",
            "title": "A Day in the Life of a Rug Project"
        },
        {
            "location": "/rug/rug-lifecycle/#inception",
            "text": "The easiest way to create a new Rug project is by using the NewRugArchiveProject  generator via the bot or CLI. Here, we'll show\nhow to do it with the CLI.  $ rug generate atomist-rugs:rug-archive:NewRugArchiveProject  \\ \n    my-rug-project  \\ \n     group_id = atomist-rugs  \\ \n     version = 0 .1.0  \\ \n     description = \"My first Rug project\" \nProcessing dependencies\n  Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.pom \u2190 rugs  ( 806  bytes )  succeeded\n  Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.zip \u2190 rugs  ( 18  kb )  succeeded\nResolving dependencies  for  atomist-rugs:rug-archive:0.2.1 completed\nLoading atomist-rugs:rug-archive:0.2.1 into runtime completed\nRunning generator NewRugArchiveProject of atomist-rugs:rug-archive:0.2.1 completed\n\n\u2192 Project\n  ~/develop/my-rug-project/  ( 5  kb in  7  files ) \n\n\u2192 Changes\n  \u251c\u2500\u252c .atomist\n   |  \u251c\u2500\u252c editors\n   |   |  \u2514\u2500\u2500 AddReadme.rug\n   |  \u251c\u2500\u2500 manifest.yml\n   |  \u251c\u2500\u252c templates\n   |   |  \u2514\u2500\u2500 readme.vm\n   |  \u2514\u2500\u252c tests\n   |    \u2514\u2500\u2500 AddReadme.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u2514\u2500\u2500 README.md\n\nSuccessfully generated new project my-rug-project  That command created a new directory named  my-rug-project  in the\ncurrent directory,  ~/develop  in this case.",
            "title": "Inception"
        },
        {
            "location": "/rug/rug-lifecycle/#structure",
            "text": "The created Rug project has the following directory structure:  $ tree -a my-rug-project\nmy-rug-project\n\u251c\u2500\u2500 .atomist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 editors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 AddReadme.rug\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 readme.vm\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AddReadme.rt\n\u251c\u2500\u2500 .atomist.yml\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 README.md 4  directories,  7  files  The editor  AddReadme.rug  and corresponding test  AddReadme.rt  have\nbeen generated when running the generate command.  Let's take a look at the  manifest.yml :  $  cd  my-rug-project/.atomist\n$ cat manifest.yml\ngroup: atomist-rugs\nartifact: my-rug-project\nversion:  \"0.1.0\" \nrequires:  \"[0.8.0,1.0.0)\" \ndependencies:\nextensions:  The  manifest.yml  specifies the unique coordinates of the Rug archive\nas well as its version.  Dependencies and extensions can also be\ndeclared     Key  Description      group  The group of the Rug archive, should be the GitHub org    artifact  A unique identifier within the  group , should be the GitHub repository name    version  Version of the Rug archive    requires  The rug-lib version this project is being developed with. Version range is allowed    dependencies  List of project dependencies in form group:artifact:version. Version ranges are allowed    extensions  List of binary dependencies, e.g., Rug Extension types. Version ranges are allowed",
            "title": "Structure"
        },
        {
            "location": "/rug/rug-lifecycle/#running-tests",
            "text": "After making changes to your Rug code, you should run the tests.  The\ngenerated Rug project already has some tests.  $ rug  test \nResolving dependencies  for  atomist-rugs:my-rug-project:0.1.0 \u2190  local  completed\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190  local  into runtime completed\nExecuting scenario AddReadme should add README.md...\n  Testing assertion fileExists ( IdentifierFunctionArg ( readme,None )) \n  Testing assertion fileContains ( IdentifierFunctionArg ( readme,None ) ,IdentifierFunctionArg ( newName,None )) \n  Testing assertion fileContains ( IdentifierFunctionArg ( readme,None ) ,IdentifierFunctionArg ( newDescription,None )) \nExecuting scenario AddReadme should reject invalid value name parameter...\nExecuting scenario AddReadme should reject missing parameter...\nRunning  test  scenarios in atomist-rugs:my-rug-project:0.1.0 \u2190  local  completed\n\nSuccessfully executed  3  of  3  scenarios: Test SUCCESS",
            "title": "Running Tests"
        },
        {
            "location": "/rug/rug-lifecycle/#installing",
            "text": "To package the Rug project up and make it available to the Rug CLI to\nrun from any directory, you must install it:  $ rug install\nResolving dependencies  for  atomist-rugs:my-rug-project:0.1.0 \u2190  local  completed\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190  local  into runtime completed\n  Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml\n  Created .atomist/manifest.yml\n  Created .atomist/metadata.json\nGenerating archive metadata completed\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 /Users/dd/.atomist/repository\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 /Users/dd/.atomist/repository\nInstalling archive into  local  repository completed\n\n\u2192 Archive\n  ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip  ( 4  kb in  9  files ) \n\n\u2192 Contents\n  \u251c\u2500\u252c .atomist\n   |  \u251c\u2500\u252c editors\n   |   |  \u2514\u2500\u2500 AddReadme.rug\n   |  \u251c\u2500\u2500 manifest.yml\n   |  \u251c\u2500\u2500 metadata.json\n   |  \u251c\u2500\u252c templates\n   |   |  \u2514\u2500\u2500 readme.vm\n   |  \u2514\u2500\u252c tests\n   |    \u2514\u2500\u2500 AddReadme.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project\n   |  \u2514\u2500\u2500 pom.xml\n  \u2514\u2500\u2500 README.md\n\nSuccessfully installed archive  for  atomist-rugs:my-rug-project:0.1.0  The  install  command takes the project, packages it up for\ndistribution, and installs it under  ~/.atomist/repository .  The contents of the archive can be further tuned by adding entries to .gitignore  and  .atomist/ignore , the packaging step considers the\ncontents of these files when creating the archive.",
            "title": "Installing"
        },
        {
            "location": "/rug/rug-lifecycle/#publishing",
            "text": "Publishing is the process of uploading an archive to a Maven\nrepository so it can only be used by others.  Before publishing a Rug\narchive, you first need to configure a publishing repository in your ~/.atomst/cli.yml .  You must have write permission to this\nrepository, set the  publish  field to  true , and you will typically\nhave to supply authentication information.  For example, if you have\nthe environment variables  MAVEN_BASE_URL ,  MAVEN_USER , and MAVEN_TOKEN  set appropriate for your Maven repository, you would use\nthe following configuration in your  ~/.atomist/cli.yml :  remote-repositories : \n   rugs-release : \n     publish :   true \n     url :   \"${MAVEN_BASE_URL}/rugs-release\" \n     authentication : \n       username :   \"${MAVEN_USER}\" \n       password :   \"${MAVEN_TOKEN}\"   Once you have your publishing repository configured, you simply run rug publish .  $ rug publish\nResolving dependencies  for  atomist-rugs:my-rug-project:0.1.0 \u2190  local  completed\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190  local  into runtime completed\n  Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml\n  Created .atomist/manifest.yml\n  Created .atomist/metadata.json\nGenerating archive metadata completed\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 rugs-release  ( 4  kb )  succeeded\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 rugs-release  ( 639  bytes )  succeeded\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 rugs-release  ( 1  kb )  succeeded\n  Downloading atomist-rugs/my-rug-project/maven-metadata.xml \u2190 rugs-release  ( 381  bytes )  succeeded\n  Uploading atomist-rugs/my-rug-project/maven-metadata.xml \u2192 rugs-release  ( 333  bytes )  succeeded\nPublishing archive into remote repository completed\n\n\u2192 Archive\n  ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip  ( 4  kb in  9  files ) \n\n\u2192 Contents\n  \u251c\u2500\u252c .atomist\n   |  \u251c\u2500\u252c editors\n   |   |  \u2514\u2500\u2500 AddReadme.rug\n   |  \u251c\u2500\u2500 manifest.yml\n   |  \u251c\u2500\u2500 metadata.json\n   |  \u251c\u2500\u252c templates\n   |   |  \u2514\u2500\u2500 readme.vm\n   |  \u2514\u2500\u252c tests\n   |    \u2514\u2500\u2500 AddReadme.rt\n  \u251c\u2500\u2500 .atomist.yml\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project\n   |  \u2514\u2500\u2500 pom.xml\n  \u2514\u2500\u2500 README.md\n\nSuccessfully published archive  for  atomist-rugs:my-rug-project:0.1.0 to\n  https://atomist.jfrog.io/atomist/rugs-release/atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip  The  atomist-rugs:travis-editors:EnableTravisForRugArchiveTS  editor\nconfigures testing, installing, and publishing archives as part of a\nTravis CI build.  See the  build  directory of the  travis-editors \nproject for more detail.",
            "title": "Publishing"
        },
        {
            "location": "/rug/rug-cli/",
            "text": "The Rug CLI\n\u00b6\n\n\nThe Rug command-line interface (CLI) provides developers with the\ntools they need to create and manage Rugs.  The links below will help\nyou from get started through becoming a power user.\n\n\n\n\nRug CLI Quick Start\n\n\nRug CLI Installation\n\n\nRug CLI Command Reference",
            "title": "Introduction"
        },
        {
            "location": "/rug/rug-cli/#the-rug-cli",
            "text": "The Rug command-line interface (CLI) provides developers with the\ntools they need to create and manage Rugs.  The links below will help\nyou from get started through becoming a power user.   Rug CLI Quick Start  Rug CLI Installation  Rug CLI Command Reference",
            "title": "The Rug CLI"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/",
            "text": "Rug CLI Installation\n\u00b6\n\n\nYou can install the Rug command-line interface (CLI) using the\nstandard developer packaging tools for your platform.  We currently\nsupport installing the Rug CLI on GNU/Linux Deb and RPM distributions,\nMac OS X/macOS using \nHomebrew\n, and MS Windows\nusing \nChocolatey\n.\n\n\nOnce you have it installed, continue with\nthe \nRug CLI Quick Start\n.\n\n\nInstall the Rug CLI on Mac OS X / macOS\n\u00b6\n\n\nThe easiest way to get start on a Mac is to install the Rug CLI using\nour \nHomebrew\n \ntap\n repository.\n\n\nOnce you have Homebrew installed, it is just two easy steps:\n\n\n$ brew tap atomist/tap\n$ brew install rug-cli\n\n\n\n\n\nIf you'd like to stay on the latest, possible unstable and un-released, version of the CLI you can install HEAD from:\n\n\n$ brew upgrade --HEAD rug-cli --fetch-HEAD\n\n\n\n\n\nInstall the RUG CLI on Linux\n\u00b6\n\n\nWe support installing via packages on Debian and RPM-based GNU/Linux\ndistributions.\n\n\nDebian/Ubuntu\n\u00b6\n\n\nTo install on a Debian-based distributions, follow the next instructions:\n\n\n\n\n\n\nGrab the public GPG key for the repository:\n\n\n$ wget -qO - \n'https://atomist.jfrog.io/atomist/api/gpg/key/public'\n \n|\n sudo apt-key add -\n\n\n\n2.  Add a new apt source entry:\n\n\n$ \necho\n \n\"deb https://atomist.jfrog.io/atomist/debian \n$(\nlsb_release -c -s\n)\n main\"\n \n|\n sudo tee /etc/apt/sources.list.d/atomist.list\n\n\n\n3.  Update the metadata:\n\n\n$ sudo apt-get update\n\n\n\n4.  Install the CLI:\n\n\n$ sudo apt-get install rug-cli\n\n\n\n\n\n\n\n\n\nNote about the JDK 8 requirement:\n\n\nRug and the CLI require Java 8. Until Rug CLI 0.22, the package would try\nto automatically install the appropriate JDK but different people install Java\ndifferently on their machine. Therefore, starting with Rug CLI 0.22, the package \nonly suggests to install the dependency and emits the following message when \nrunning the CLI without a proper Java 8 found:\n\n\n$ rug\nJAVA_HOME not \nset\n and cannot find javac to deduce location, please \nset\n JAVA_HOME.\n\n\n\n\n\nIn that case, you must ensure you set the \nJAVA_HOME\n variable for your system \nso that it points to a valid Java 8 JDK directory. On recent, Debian/Ubuntu\ndistributions, you can simply run \nsudo apt-get install openjdk-8-jdk\n. On older\ndistributions, either install Java 8 manually and set the according variable,\nor try the following instructions:\n\n\n$ sudo add-apt-repository ppa:openjdk-r/ppa\n$ sudo apt-get update\n$ sudo apt-get install openjdk-8-jdk\n\n\n\n\n\nRedHat/CentOS\n\u00b6\n\n\nTo install on a RedHat-based distributions, follow the next instructions:\n\n\n\n\n\n\nAdd a new yum repository:\n\n\n$ cat \n<<EOF | sudo tee /etc/yum.repos.d/atomist.repo\n\n\n[Atomist]\n\n\nname=Atomist\n\n\nbaseurl=https://atomist.jfrog.io/atomist/yum/\n\n\nenabled=1\n\n\ngpgcheck=0\n\n\nEOF\n\n\n\n\n\n\n\n\n\n\nInstall the CLI:\n\n\n$ sudo yum install rug-cli\n\n\n\n\n\n\n\n\n\nThe only required dependency is the JDK version 8 or later.\n\n\nInstall the RUG CLI on Windows\n\u00b6\n\n\nWe used \nNuget\n and \nChocolatey\n to package and\ndistribute the CLI on Windows systems (actually wherever .NET and\nPowershell run).\n\n\nThe following steps have been tested on Windows 10, your mileage may vary.\n\n\n\n\n\n\nInstall Chocolatey on your host as per\n    the \ndoc\n\n\n\n\n\n\nInstall the \njdk8\n\n    dependency using chocolatey as an Administrator:\n    \n(\nadmin\n)\n C:\n\\ \n> choco install jdk8\n\n\n\n\n\n\n\n\n\nThen, install the CLI using Chocolatey as an administrator:\n\n\n(\nadmin\n)\n C:\n\\ \n> choco install rug-cli -s \n\"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"\n\n\n\n\n\n\nThe CLI will be installed in\n\n%programdata%\\Chocolatey\\lib\\rug-cli\n and available to your\n\n%PATH%\n. You can now run as a normal user:\n\n\n(\nuser\n)\n C:\n\\ \n> rug --version\nrug \n0\n.13.0\natomist/rug-cli.git \n(\ngit revision 2cde8f5: last commit \n2016\n-12-01\n)\n\n\n\n\n\n\nNotice, you will find the \n.atomist\n directory for settings and\nartifacts in \n%USERPROFILE%\\.atomist\n\n\n\n\n\n\nYou can keep your Rug CLI up to dat by regularly upgrading:\n\n\n(\nadmin\n)\n C:\n\\ \n> choco upgrade rug-cli -s \n\"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"\n\n\n\n\n\n\nYou can remove the Rug CLI if you no longer want it installed:\n\n\n(\nadmin\n)\n C:\n\\ \n> choco uninstall rug-cli\n\n\n\n\n\nFiles and directories in \n%USERPROFILE%\\.atomist\n will not be\nremoved. You can safely delete that directory manually if you don't\nintend to use the CLI any longer.\n\n\nDocker installation\n\u00b6\n\n\nIf you cannot install using a system-wide approach, you can rely also on \ndownloading the CLI through a Docker image we provide.\n\n\n$ docker pull atomist-docker.jfrog.io/rug-cli\n\n\n\n\n\nRunning the image as will give you the Rug shell:\n\n\n$ docker run --rm -it atomist-docker.jfrog.io/rug-cli\nResolving dependencies \nfor\n com.atomist:rug:0.12.0 completed\nInitializing shell \nfor\n com.atomist:rug:0.12.0 completed\nPress \n'Tab'\n to complete. Type \n'help'\n and hit \n'Return'\n \nfor\n help, and \n'exit'\n to quit.\nrug \u2192 \n\n\n\n\n\nIf you want to run the CLI, the image expects you to call \nrug\n as its first \nargument. For instance:\n\n\n$ docker run --rm -it atomist-docker.jfrog.io/rug-cli rug --version\nrug \n0\n.23.0\nhttps://github.com/atomist/rug-cli.git \n(\ngit revision e77cf5f\n;\n last commit \n2017\n-02-14\n)\n\n\n\n\n\n\nNotice how the CLI stores its settings \ninside the container\n under\n\n/home/atomist/.atomist/cli.yml\n. All the dependencies will be downloaded into\nthe \n/home/atomist/.atomist/repository\n directory.\n\n\nYou can persist those on your host by providing the following argument to the\ndocker run command: \n-v $HOME/.atomist:/home/atomist/.atomist\n. \n\n\nTo use the CLI against a project on your host, you will also need to share your \nproject's directory with the container \n/home/atomist/project\n container's \nworking directory. For example, assuming you are currently in a Rug project:\n\n\n$ docker run --rm -it \n\\\n\n    --user \n$UID\n:\n`\nid -g\n`\n \n\\\n\n    -v \n$HOME\n/.atomist:/home/atomist/.atomist \n\\ \n\n    -v \n$PWD\n:/home/atomist/project \n\\\n\n    atomist-docker.jfrog.io/rug-cli \n\\\n\n    rug\n\n\n\n\n\nThe constraint here is the limit imposed by the management of permissions\nbetween your host's user and the user defined in the container.\n\n\nIn the container, the CLI is not run as \nroot\n but as a regular user that \nhopefully does not map any UID on your system. A possible workaround is \nto switch to a different user at runtime, hence the rather ugly command line \nabove. Another approach is to switch to \nuser namespace\n on your host.\n\n\nManual installation\n\u00b6\n\n\nIf you are not on a supported platform, or just prefer to install the\nRug CLI yourself, you can download the Rug CLI archive, unpack it, and\nsimply put it its \nbin\n directory in your \nPATH\n.\n\n\n\n\n\n\nMake sure you have Java 8 or later installed.  Run the following\n    command in a terminal and make sure you get an output something\n    like that shown.\n\n\n$ java -version\njava version \n\"1.8.0_66\"\n\nJava\n(\nTM\n)\n SE Runtime Environment \n(\nbuild \n1\n.8.0_66-b17\n)\n\nJava HotSpot\n(\nTM\n)\n \n64\n-Bit Server VM \n(\nbuild \n25\n.66-b17, mixed mode\n)\n\n\n\n\n\n\nIf that command is unsuccessful, see \nInstalling Java\n\nor \nInstalling OpenJDK\n.\n\n\n\n\n\n\nDownload either the \n.tar.gz\n or \n.zip\n archive from the\n    \nlatest Rug CLI release\n.\n\n\n\n\n\n\nUnpack the archive in an appropriate location.  Replace \nVERSION\n\n    with the version you downloaded.\n\n\n$ mkdir \n$HOME\n/opt\n$ \ncd\n \n$HOME\n/opt\n$ tar -x -z -f rug-cli-VERSION-bin.tar.gz\n$ ln -s rug-cli-VERSION rug-cli\n\n\n\n\n\nor\n\n\n$ mkdir \n$HOME\n/opt\n$ \ncd\n \n$HOME\n/opt\n$ unzip rug-cli-VERSION-bin.zip\n$ ln -s rug-cli-VERSION rug-cli\n\n\n\n\n\nOn MS Windows, download the \n.zip\n and double-click it to extract\nits contents.\n\n\n\n\n\n\nAdd the Rug CLI \nbin\n directory to your \nPATH\n.\n\n\n$ \nexport\n \nPATH\n=\n$PATH\n:\n$HOME\n/opt/rug-cli/bin\n\n\n\n\n\nAdd the above command to your shell startup script to ensure you\nalways will have access to the Rug CLI.  On MS Windows,\nsee \nHow to Edit Your System Path\n, adding the \nbin\n\ndirectory of the archive you unpacked in the previous step.",
            "title": "Rug CLI Installation"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#rug-cli-installation",
            "text": "You can install the Rug command-line interface (CLI) using the\nstandard developer packaging tools for your platform.  We currently\nsupport installing the Rug CLI on GNU/Linux Deb and RPM distributions,\nMac OS X/macOS using  Homebrew , and MS Windows\nusing  Chocolatey .  Once you have it installed, continue with\nthe  Rug CLI Quick Start .",
            "title": "Rug CLI Installation"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#install-the-rug-cli-on-mac-os-x-macos",
            "text": "The easiest way to get start on a Mac is to install the Rug CLI using\nour  Homebrew   tap  repository.  Once you have Homebrew installed, it is just two easy steps:  $ brew tap atomist/tap\n$ brew install rug-cli  If you'd like to stay on the latest, possible unstable and un-released, version of the CLI you can install HEAD from:  $ brew upgrade --HEAD rug-cli --fetch-HEAD",
            "title": "Install the Rug CLI on Mac OS X / macOS"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#install-the-rug-cli-on-linux",
            "text": "We support installing via packages on Debian and RPM-based GNU/Linux\ndistributions.",
            "title": "Install the RUG CLI on Linux"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#debianubuntu",
            "text": "To install on a Debian-based distributions, follow the next instructions:    Grab the public GPG key for the repository:  $ wget -qO -  'https://atomist.jfrog.io/atomist/api/gpg/key/public'   |  sudo apt-key add - \n\n2.  Add a new apt source entry:  $  echo   \"deb https://atomist.jfrog.io/atomist/debian  $( lsb_release -c -s )  main\"   |  sudo tee /etc/apt/sources.list.d/atomist.list \n\n3.  Update the metadata:  $ sudo apt-get update \n\n4.  Install the CLI:  $ sudo apt-get install rug-cli    Note about the JDK 8 requirement:  Rug and the CLI require Java 8. Until Rug CLI 0.22, the package would try\nto automatically install the appropriate JDK but different people install Java\ndifferently on their machine. Therefore, starting with Rug CLI 0.22, the package \nonly suggests to install the dependency and emits the following message when \nrunning the CLI without a proper Java 8 found:  $ rug\nJAVA_HOME not  set  and cannot find javac to deduce location, please  set  JAVA_HOME.  In that case, you must ensure you set the  JAVA_HOME  variable for your system \nso that it points to a valid Java 8 JDK directory. On recent, Debian/Ubuntu\ndistributions, you can simply run  sudo apt-get install openjdk-8-jdk . On older\ndistributions, either install Java 8 manually and set the according variable,\nor try the following instructions:  $ sudo add-apt-repository ppa:openjdk-r/ppa\n$ sudo apt-get update\n$ sudo apt-get install openjdk-8-jdk",
            "title": "Debian/Ubuntu"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#redhatcentos",
            "text": "To install on a RedHat-based distributions, follow the next instructions:    Add a new yum repository:  $ cat  <<EOF | sudo tee /etc/yum.repos.d/atomist.repo  [Atomist]  name=Atomist  baseurl=https://atomist.jfrog.io/atomist/yum/  enabled=1  gpgcheck=0  EOF     Install the CLI:  $ sudo yum install rug-cli    The only required dependency is the JDK version 8 or later.",
            "title": "RedHat/CentOS"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#install-the-rug-cli-on-windows",
            "text": "We used  Nuget  and  Chocolatey  to package and\ndistribute the CLI on Windows systems (actually wherever .NET and\nPowershell run).  The following steps have been tested on Windows 10, your mileage may vary.    Install Chocolatey on your host as per\n    the  doc    Install the  jdk8 \n    dependency using chocolatey as an Administrator:\n     ( admin )  C: \\  > choco install jdk8     Then, install the CLI using Chocolatey as an administrator:  ( admin )  C: \\  > choco install rug-cli -s  \"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"   The CLI will be installed in %programdata%\\Chocolatey\\lib\\rug-cli  and available to your %PATH% . You can now run as a normal user:  ( user )  C: \\  > rug --version\nrug  0 .13.0\natomist/rug-cli.git  ( git revision 2cde8f5: last commit  2016 -12-01 )   Notice, you will find the  .atomist  directory for settings and\nartifacts in  %USERPROFILE%\\.atomist    You can keep your Rug CLI up to dat by regularly upgrading:  ( admin )  C: \\  > choco upgrade rug-cli -s  \"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"   You can remove the Rug CLI if you no longer want it installed:  ( admin )  C: \\  > choco uninstall rug-cli  Files and directories in  %USERPROFILE%\\.atomist  will not be\nremoved. You can safely delete that directory manually if you don't\nintend to use the CLI any longer.",
            "title": "Install the RUG CLI on Windows"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#docker-installation",
            "text": "If you cannot install using a system-wide approach, you can rely also on \ndownloading the CLI through a Docker image we provide.  $ docker pull atomist-docker.jfrog.io/rug-cli  Running the image as will give you the Rug shell:  $ docker run --rm -it atomist-docker.jfrog.io/rug-cli\nResolving dependencies  for  com.atomist:rug:0.12.0 completed\nInitializing shell  for  com.atomist:rug:0.12.0 completed\nPress  'Tab'  to complete. Type  'help'  and hit  'Return'   for  help, and  'exit'  to quit.\nrug \u2192   If you want to run the CLI, the image expects you to call  rug  as its first \nargument. For instance:  $ docker run --rm -it atomist-docker.jfrog.io/rug-cli rug --version\nrug  0 .23.0\nhttps://github.com/atomist/rug-cli.git  ( git revision e77cf5f ;  last commit  2017 -02-14 )   Notice how the CLI stores its settings  inside the container  under /home/atomist/.atomist/cli.yml . All the dependencies will be downloaded into\nthe  /home/atomist/.atomist/repository  directory.  You can persist those on your host by providing the following argument to the\ndocker run command:  -v $HOME/.atomist:/home/atomist/.atomist .   To use the CLI against a project on your host, you will also need to share your \nproject's directory with the container  /home/atomist/project  container's \nworking directory. For example, assuming you are currently in a Rug project:  $ docker run --rm -it  \\ \n    --user  $UID : ` id -g `   \\ \n    -v  $HOME /.atomist:/home/atomist/.atomist  \\  \n    -v  $PWD :/home/atomist/project  \\ \n    atomist-docker.jfrog.io/rug-cli  \\ \n    rug  The constraint here is the limit imposed by the management of permissions\nbetween your host's user and the user defined in the container.  In the container, the CLI is not run as  root  but as a regular user that \nhopefully does not map any UID on your system. A possible workaround is \nto switch to a different user at runtime, hence the rather ugly command line \nabove. Another approach is to switch to  user namespace  on your host.",
            "title": "Docker installation"
        },
        {
            "location": "/rug/rug-cli/rug-cli-install/#manual-installation",
            "text": "If you are not on a supported platform, or just prefer to install the\nRug CLI yourself, you can download the Rug CLI archive, unpack it, and\nsimply put it its  bin  directory in your  PATH .    Make sure you have Java 8 or later installed.  Run the following\n    command in a terminal and make sure you get an output something\n    like that shown.  $ java -version\njava version  \"1.8.0_66\" \nJava ( TM )  SE Runtime Environment  ( build  1 .8.0_66-b17 ) \nJava HotSpot ( TM )   64 -Bit Server VM  ( build  25 .66-b17, mixed mode )   If that command is unsuccessful, see  Installing Java \nor  Installing OpenJDK .    Download either the  .tar.gz  or  .zip  archive from the\n     latest Rug CLI release .    Unpack the archive in an appropriate location.  Replace  VERSION \n    with the version you downloaded.  $ mkdir  $HOME /opt\n$  cd   $HOME /opt\n$ tar -x -z -f rug-cli-VERSION-bin.tar.gz\n$ ln -s rug-cli-VERSION rug-cli  or  $ mkdir  $HOME /opt\n$  cd   $HOME /opt\n$ unzip rug-cli-VERSION-bin.zip\n$ ln -s rug-cli-VERSION rug-cli  On MS Windows, download the  .zip  and double-click it to extract\nits contents.    Add the Rug CLI  bin  directory to your  PATH .  $  export   PATH = $PATH : $HOME /opt/rug-cli/bin  Add the above command to your shell startup script to ensure you\nalways will have access to the Rug CLI.  On MS Windows,\nsee  How to Edit Your System Path , adding the  bin \ndirectory of the archive you unpacked in the previous step.",
            "title": "Manual installation"
        },
        {
            "location": "/reference-docs/",
            "text": "Atomist Reference Documentation\n\u00b6\n\n\nThe Atomist Reference Documentation contains detailed information on\nvarious aspects of the Atomist development system.\n\n\nRug Reference Documentation\n\u00b6\n\n\nAtomist's features for creating and evolving projects are provided by\nRug.  The Rug ecosystem includes a DSL and a CLI.\n\n\nRug Reference Documentation\n\n\nAtomist Integrations\n\u00b6\n\n\nAtomist integrates with various other development systems to provide\nthe best possible developer experience.\n\n\nAtomist Integrations Reference Documentation",
            "title": "Introduction"
        },
        {
            "location": "/reference-docs/#atomist-reference-documentation",
            "text": "The Atomist Reference Documentation contains detailed information on\nvarious aspects of the Atomist development system.",
            "title": "Atomist Reference Documentation"
        },
        {
            "location": "/reference-docs/#rug-reference-documentation",
            "text": "Atomist's features for creating and evolving projects are provided by\nRug.  The Rug ecosystem includes a DSL and a CLI.  Rug Reference Documentation",
            "title": "Rug Reference Documentation"
        },
        {
            "location": "/reference-docs/#atomist-integrations",
            "text": "Atomist integrates with various other development systems to provide\nthe best possible developer experience.  Atomist Integrations Reference Documentation",
            "title": "Atomist Integrations"
        },
        {
            "location": "/reference-docs/rug/",
            "text": "The Rug Reference Documentation\n\u00b6\n\n\nThe Rug Reference Documentation provides detailed information on Rug,\nthe Rug Domain Specific Language (DSL), the Rug Command-Line Interface\n(CLI), and Rug best practices.\n\n\nKinds of Rugs\n\u00b6\n\n\nEach different kind of Rug provides a different way for you to\ninteract with a repository.  Rugs can be written using the Rug DSL and\nTypeScript.\n\n\n\n\nRug Tests\n: BDD test framework for Rugs\n\n\nRug Editors\n: Add, remove, and edit files\n\n\nRug Generators\n: Create new repositories\n\n\nRug Predicates\n: Determine whether a feature exists in a repository\n\n\nRug Microgrammars\n: Specify and work with a custom microgrammar to work effectively with files\n\n\nRug Reviewers (coming soon): Examine a repository for conformance to standards\n\n\nRug Executors (coming soon): Apply any of the above Rugs to multiple repositories at once\n\n\n\n\nRug Language Extensions\n\u00b6\n\n\nCore Rug Language Extensions\n define a set of core concepts that\nRug understands.  This understanding provides you with an API for\naccessing and manipulating these files rather than having to do raw\nfile manipulation.  See the documentation for each of the \nCore Rug Language Extensions\n\nfor details on what each API allows you to do.\n\n\nBeyond the Rug DSL\n\u00b6\n\n\nWhen writing Rugs using the Rug DSL you can escape into other\nlanguages if the Core Rug Language Extensions do not provide the functionality you\nneed.\n\n\n\n\nJavaScript\n\n\n\n\nRug CLI\n\u00b6\n\n\nThe Rug CLI allows you to develop your own Rugs, test, and run them\nlocally.  The \nRug CLI Reference Documentation\n provides\ninformation on each \nrug\n command.\n\n\nRug Conventions\n\u00b6\n\n\nThe \nRug Conventions\n provide a set of best practices\nwhen developing Rugs.",
            "title": "Introduction"
        },
        {
            "location": "/reference-docs/rug/#the-rug-reference-documentation",
            "text": "The Rug Reference Documentation provides detailed information on Rug,\nthe Rug Domain Specific Language (DSL), the Rug Command-Line Interface\n(CLI), and Rug best practices.",
            "title": "The Rug Reference Documentation"
        },
        {
            "location": "/reference-docs/rug/#kinds-of-rugs",
            "text": "Each different kind of Rug provides a different way for you to\ninteract with a repository.  Rugs can be written using the Rug DSL and\nTypeScript.   Rug Tests : BDD test framework for Rugs  Rug Editors : Add, remove, and edit files  Rug Generators : Create new repositories  Rug Predicates : Determine whether a feature exists in a repository  Rug Microgrammars : Specify and work with a custom microgrammar to work effectively with files  Rug Reviewers (coming soon): Examine a repository for conformance to standards  Rug Executors (coming soon): Apply any of the above Rugs to multiple repositories at once",
            "title": "Kinds of Rugs"
        },
        {
            "location": "/reference-docs/rug/#rug-language-extensions",
            "text": "Core Rug Language Extensions  define a set of core concepts that\nRug understands.  This understanding provides you with an API for\naccessing and manipulating these files rather than having to do raw\nfile manipulation.  See the documentation for each of the  Core Rug Language Extensions \nfor details on what each API allows you to do.",
            "title": "Rug Language Extensions"
        },
        {
            "location": "/reference-docs/rug/#beyond-the-rug-dsl",
            "text": "When writing Rugs using the Rug DSL you can escape into other\nlanguages if the Core Rug Language Extensions do not provide the functionality you\nneed.   JavaScript",
            "title": "Beyond the Rug DSL"
        },
        {
            "location": "/reference-docs/rug/#rug-cli",
            "text": "The Rug CLI allows you to develop your own Rugs, test, and run them\nlocally.  The  Rug CLI Reference Documentation  provides\ninformation on each  rug  command.",
            "title": "Rug CLI"
        },
        {
            "location": "/reference-docs/rug/#rug-conventions",
            "text": "The  Rug Conventions  provide a set of best practices\nwhen developing Rugs.",
            "title": "Rug Conventions"
        },
        {
            "location": "/reference-docs/rug/rug-tests/",
            "text": "Rug Tests\n\u00b6\n\n\nRug provides a testing framework based on \nBDD\n concepts.\n\n\nThis takes the form of a test DSL that reuses features and types from Rug to ensure it is easy for Rug authors to adopt.\n\n\n\n\nRug is designed to support Test Driven Development using the BDD style, and we've seen the greatest productivity in its early use from those that create test scenarios and then follow the \nred\n -> \ngreen\n -> \nrefactor\n approach.\n\n\n\n\nA Quick Overview of a Rug Test\n\u00b6\n\n\nBefore taking a deeper dive into the all the syntax of Rug tests, let's look at some examples.\n\n\nConsider the following simple editor that will rename a Java file:\n\n\neditor\n \nRename\n\n\nwith\n \njava.class\n \nc\n \nwhen\n \nname\n \n=\n \n\"Dog\"\n\n\n    \ndo\n \nrename\n \n\"Cat\"\n\n\n\n\nWe want to test that the editor works as intended:\n\n\n\n\n\nscenario\n \nDogs can be turned into cats\n\n\n\ngiven\n\n\n   \nsrc/main/java/Dog.java\n \n=\n \n\"class Dog {}\"\n\n\n\nwhen\n\n\n   \nRename\n \nold_class\n=\n\"Dog\"\n, \nnew_class\n \n=\n \n\"Cat\"\n\n\n\nthen\n\n\n  \nfileCount\n \n=\n \n1\n\n\n  \nand\n \nfileContains\n \n\"src/main/java/Cat.java\"\n \n\"class Cat\"\n\n\n\n\n\n\nWalking through this test:\n\n\n\n\nEvery test starts with the keyword \nscenario\n followed by a free text description whose only limitation is that it must not contain a \n#\n character, otherwise any text after the \n#\n will be treated as a comment.\n\n\nEvery test is then typically broken down into three blocks of \ngiven\n, \nwhen\n, \nthen\n, following the BDD style. a \ngiven\n and \nthen\n blocks are mandatory, but the \nwhen\n block is not (you could execute when-related code as part of the \ngiven\n block), however for readability it is a best-practice to use the \nwhen\n.\n\n\nThis example only has one test scenario, but it is quite common to have more than one scenario in one file.\n\n\n\n\nRug test scenarios are written in \n.rt\n files (\n.rt\n naturally stands for Rug Test) and are located within a \nRug project\n in the \n.atomist/tests\n directory.\n\n\n\n\nNOTE: \n#\n is one comment approach in Rug. You can also use C-style \n/* */\n multi-line comments as well.\n\n\n\n\nDiving into the \nGiven\n Block Syntax\n\u00b6\n\n\nThe \ngiven\n block specifies the input to the editor-under-test in the form of multiple \nfile specifications\n. There are several choices for expressing file specs:\n\n\n\n\n\n\n\n\nFile spec\n\n\nSample\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n\n\ninline file\n\n\ndir/foo.txt = \"bar\"\n\n\nPopulates the file\n\n\n\n\n\n\n\n\nloaded file\n\n\ndir/foo.txt from \"/some/path/file.txt\"\n\n\nLoad the file content from the archive.\n\n\n\n\n\n\n\n\narchive root\n\n\nArchiveRoot\n\n\nLoads all the files in the archive this editor is in, excluding the content of the \n.atomist\n directory. This is useful and convenient when building templates, as it enables verification that the contents of the template are a valid starting point for the editor being tested.\n\n\n\n\n\n\n\n\n\n\nWhen\n You Run Your tests\n\u00b6\n\n\nThe \nwhen\n block is optional, but for clarity helps the test consumer to understand where the actual test is being run. Typically this is where the actual editor itself is invoked.\n\n\nThen\n Assertions\n\u00b6\n\n\nThe \nthen\n block then consists of one or more assertions about the final state of the project.\n\n\nSome \nWell-Known\n Assertions\n\u00b6\n\n\nCertain well-known assertions can be used alone. These are indicated in the following keywords:\n\n\n\n\nNoChange\n: The scenario passes if the editor does not change the input.\n\n\nNotApplicable\n: The scenario passes if the editor is not applied due to a precondition not being met.\n\n\nShouldFail\n: The scenario passes if the editor fails.\n\n\nMissingParameters\n: The scenario passes if the editor fails due to missing parameters. Used to test parameter validation.\n\n\nInvalidParameters\n: The scenario passes if the editor fails due to invalid parameters. Used to test parameter validation.\n\n\n\n\nGoing further with \nPredicate\n Assertions\n\u00b6\n\n\nMost often, assertions are \nRug predicates\n, chained with \nand\n.\n\n\nUnlike in Rug programs, using \nand\n does not create a single composed predicate, but chains separate predicates, allowing the test runtime to produce more informative error messages.\n\n\nThe Rug Test Grammar\n\u00b6\n\n\nThe full grammar of Rug tests is defined as:\n\n\n<test> ::= <given> <run> <when> <then>\n\n<given> ::= <filespec> { <filespec> }\n\n<filespec> ::= <filename> = <filecontents>\n\n<when> ::= <editorname> <namedargs>\n\n<namedargs> :: = <namedarg> { namedarg }\n\n<namedarg> :: <argname> = <argvalue>\n\n<then> ::= <assertion> { <assertion> }\n\n<assertion> ::= <function> <arg>\n\n\n\n\n\nAdvanced Usage\n\u00b6\n\n\nNo Change\n\u00b6\n\n\nWhen there's no change\n\n\nscenario\n \nFoobar\n\n\n\ngiven\n\n\n   \n\"src/main/java/Squirrel\"\n \n=\n \n\"class Squirrel {}\"\n\n\n\nwhen\n\n\n \nRename\n \nold_class\n=\n\"Dog\"\n, \nnew_class\n \n=\n \n\"Cat\"\n\n\n\nthen\n\n\n  \nNoChange\n\n\n\n\n\n\nThis scenario will pass only if there's no change in the input artifact source.\n\n\nMore debug information\n\u00b6\n\n\nFor help debugging a failing test, set debug=true to get a little tree of the directory structure after the editor runs.\n\n\nscenario\n \nFoobar\n\n\n\ndebug\n=\ntrue\n\n\n\ngiven\n...\n\n\n\n\n\n\nTo see the contents of a file in the output, use \ndump <filename>\n as an assertion predicate, like\n\n\nthen\n\n\n  \ndump\n \noutputFile\n\n\n    \nand\n \nfileContains\n \noutputFile\n \n\"should be in there\"\n\n\n\n\n\n\nFor more on debugging rugs, there's a walkthrough on \nThe Composition\n.",
            "title": "Rug Tests"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#rug-tests",
            "text": "Rug provides a testing framework based on  BDD  concepts.  This takes the form of a test DSL that reuses features and types from Rug to ensure it is easy for Rug authors to adopt.   Rug is designed to support Test Driven Development using the BDD style, and we've seen the greatest productivity in its early use from those that create test scenarios and then follow the  red  ->  green  ->  refactor  approach.",
            "title": "Rug Tests"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#a-quick-overview-of-a-rug-test",
            "text": "Before taking a deeper dive into the all the syntax of Rug tests, let's look at some examples.  Consider the following simple editor that will rename a Java file:  editor   Rename  with   java.class   c   when   name   =   \"Dog\"       do   rename   \"Cat\"  \n\nWe want to test that the editor works as intended:   scenario   Dogs can be turned into cats  given      src/main/java/Dog.java   =   \"class Dog {}\"  when      Rename   old_class = \"Dog\" ,  new_class   =   \"Cat\"  then     fileCount   =   1     and   fileContains   \"src/main/java/Cat.java\"   \"class Cat\"   Walking through this test:   Every test starts with the keyword  scenario  followed by a free text description whose only limitation is that it must not contain a  #  character, otherwise any text after the  #  will be treated as a comment.  Every test is then typically broken down into three blocks of  given ,  when ,  then , following the BDD style. a  given  and  then  blocks are mandatory, but the  when  block is not (you could execute when-related code as part of the  given  block), however for readability it is a best-practice to use the  when .  This example only has one test scenario, but it is quite common to have more than one scenario in one file.   Rug test scenarios are written in  .rt  files ( .rt  naturally stands for Rug Test) and are located within a  Rug project  in the  .atomist/tests  directory.   NOTE:  #  is one comment approach in Rug. You can also use C-style  /* */  multi-line comments as well.",
            "title": "A Quick Overview of a Rug Test"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#diving-into-the-given-block-syntax",
            "text": "The  given  block specifies the input to the editor-under-test in the form of multiple  file specifications . There are several choices for expressing file specs:     File spec  Sample  Meaning       inline file  dir/foo.txt = \"bar\"  Populates the file     loaded file  dir/foo.txt from \"/some/path/file.txt\"  Load the file content from the archive.     archive root  ArchiveRoot  Loads all the files in the archive this editor is in, excluding the content of the  .atomist  directory. This is useful and convenient when building templates, as it enables verification that the contents of the template are a valid starting point for the editor being tested.",
            "title": "Diving into the Given Block Syntax"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#when-you-run-your-tests",
            "text": "The  when  block is optional, but for clarity helps the test consumer to understand where the actual test is being run. Typically this is where the actual editor itself is invoked.",
            "title": "When You Run Your tests"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#then-assertions",
            "text": "The  then  block then consists of one or more assertions about the final state of the project.",
            "title": "Then Assertions"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#some-well-known-assertions",
            "text": "Certain well-known assertions can be used alone. These are indicated in the following keywords:   NoChange : The scenario passes if the editor does not change the input.  NotApplicable : The scenario passes if the editor is not applied due to a precondition not being met.  ShouldFail : The scenario passes if the editor fails.  MissingParameters : The scenario passes if the editor fails due to missing parameters. Used to test parameter validation.  InvalidParameters : The scenario passes if the editor fails due to invalid parameters. Used to test parameter validation.",
            "title": "Some Well-Known Assertions"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#going-further-with-predicate-assertions",
            "text": "Most often, assertions are  Rug predicates , chained with  and .  Unlike in Rug programs, using  and  does not create a single composed predicate, but chains separate predicates, allowing the test runtime to produce more informative error messages.",
            "title": "Going further with Predicate Assertions"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#the-rug-test-grammar",
            "text": "The full grammar of Rug tests is defined as:  <test> ::= <given> <run> <when> <then>\n\n<given> ::= <filespec> { <filespec> }\n\n<filespec> ::= <filename> = <filecontents>\n\n<when> ::= <editorname> <namedargs>\n\n<namedargs> :: = <namedarg> { namedarg }\n\n<namedarg> :: <argname> = <argvalue>\n\n<then> ::= <assertion> { <assertion> }\n\n<assertion> ::= <function> <arg>",
            "title": "The Rug Test Grammar"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#advanced-usage",
            "text": "",
            "title": "Advanced Usage"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#no-change",
            "text": "When there's no change  scenario   Foobar  given      \"src/main/java/Squirrel\"   =   \"class Squirrel {}\"  when    Rename   old_class = \"Dog\" ,  new_class   =   \"Cat\"  then     NoChange   This scenario will pass only if there's no change in the input artifact source.",
            "title": "No Change"
        },
        {
            "location": "/reference-docs/rug/rug-tests/#more-debug-information",
            "text": "For help debugging a failing test, set debug=true to get a little tree of the directory structure after the editor runs.  scenario   Foobar  debug = true  given ...   To see the contents of a file in the output, use  dump <filename>  as an assertion predicate, like  then     dump   outputFile       and   fileContains   outputFile   \"should be in there\"   For more on debugging rugs, there's a walkthrough on  The Composition .",
            "title": "More debug information"
        },
        {
            "location": "/reference-docs/rug/rug-editors/",
            "text": "Rug Editors\n\u00b6\n\n\nRug editors \nwork at the level of a specific project\n, for example\nthis is typically a particular \nrepository on GitHub\n.\n\n\nRug editors can be found in the \n/.atomist/editors\n directory of\na \nRug project\n.\n\n\nEditors also have access to template content in the same project,\npackaged under \n/.atomist/templates\n.\n\n\n\n\nNOTE: All Atomist files should be under the \n.atomist\n directory in the root of a project.\n\n\n\n\nRug editor files must have a \n.rug\n extension.  A \n.rug\n file can\ncontain one or more editors and reviewers.  A \n.rug\n file must always contain\nan editor with the same name as the source file (excluding the \n.rug\n\nextension), and may contain additional editors that are visible only within\nthe scope of the source file.\n\n\nFor reference, this convention is analogous to Java public class\npackaging.\n\n\nAny number of Rug editors can be bundled together in\na \nRug project\n. A good example of this is the\nopen source \nSpring Boot Editors\n Rug project.\n\n\nParameters and Templates\n\u00b6\n\n\nRug editors are built on the same underpinnings as your usual non-Rug\neditors. They share familiar concepts:\n\n\n\n\nParameters\n: Editors and reviewers can specify any number of\n    mandatory or optional parameters with an accompanying validation\n    pattern.\n\n\nTemplates\n: Editors can be packaged in archives including\n    templates that are written\n    in \nVelocity\n\n    or \nMustache\n.\n\n\n\n\nA Quick Tour of Rug Editor Syntax\n\u00b6\n\n\nThe Rug editor syntax can be summarised as a collection of\n\nSelectors\n and then \nActions\n on what is selected.\n\n\nWhite space is not significant. However we encourage sensible\nindentation.\n\n\nBefore we go into a more systematic presentation of Rug syntax, let's\nstart by building up a simple program: a project editor that appends\nto a file:\n\n\neditor\n \nAppendToSpecificFile\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \n\"\\nAnd this is a new line\"\n\n\n\n\n\n\nThe \nwith\n statement simply says \nfor each file in the project if name\nis \"myfile.txt\" append the given string to the end of the file.\n . The\n\nwith\n statement declared what we \nselect\n and what type it is\nexpected to be. The Rug language extension in the example above is\nthe \nCore Rug Language Extension\n\nof \nFile\n and this dictates what\nfunctions are exposed what has been selected.\n\n\nThe code between \nwhen\n and \ndo\n is\na \nRug Predicate\n, specifying which files to match.\n\n\nLet's make this a little more sophisticated. Perhaps we'd like to\ndecide what content we should append. This would be a natural\nparameter:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \nto_append\n\n\n\n\n\n\nNow we will append the value of the parameter to the end of the\nfile. Unlike our first, naive, editor, this editor can be used to\nmodify files in ways determined by the caller.\n\n\n\n\nNote:\n The parameter definition specifies a regular expression\nthat will be used to validate it before it's passed to the\neditor. So the editor's implementation can assume that it's valid\nupon execution.\n\n\n\n\nIt would be good to describe this editor so that users see information\nbeyond its name. We can do this with the \ndescription\n annotation. We\ncan also describe the parameter:\n\n\n@description\n \n\"\"\"Appends value of to_append parameter to\n\n\n     the end of files called myfile.txt\"\"\"\n\n\neditor\n \nAppendToFile\n\n\n\n@description\n \n\"Text to append to the file\"\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \nto_append\n\n\n\n\n\n\nNote the use of a triple-quoted string here. As in Scala,\ntriple-quoted strings may span lines and include double quotes without\nescaping.\n\n\nWe can add multiple \nwith\n blocks. So we could process another type of\nfile as follows:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \nto_append\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"MyClass.java\"\n\n\n  \ndo\n \nprepend\n \n\"// Ha ha! This is a sneaky comment.\\n\"\n\n\n\n\n\n\nSometimes we need to compute additional values. We do this with the\n\nlet\n keyword as shown to populate the \nx\n value below:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nlet\n \nx\n \n=\n \n\"This is a value\"\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \nbegin\n\n\n    \ndo\n \nprepend\n \nx\n\n\n    \ndo\n \nappend\n \nto_append\n\n\n  \nend\n\n\n\n\n\n\nSuch computed values will be exposed to templates as well as the\nremainder of the Rug program itself.\n\n\nWe can also perform multiple \ndo\n steps as follows, enclosing them in\na \nbegin/end\n block:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \ncontains\n \n\".txt\"\n\n\n  \nbegin\n\n\n    \ndo\n \nappend\n \nto_append\n\n\n    \ndo\n \nappend\n \n\"And now for something completely different\"\n\n\n  \nend\n\n\n\n\n\n\nWe can escape to JavaScript to compute the value of any expression, or\nperform a do manipulation. A JavaScript expression is enclosed in\ncurly braces. The following example builds the string to be appended\nusing JavaScript:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n { to_append + \" plus this from JavaScript\" }\n\n\n\n\n\n\nWe can also use JavaScript expressions in predicates, like this:\n\n\neditor\n \nAppendToFile\n\n\n\nwith\n \nFile\n\n\n  \nwhen\n \nname\n \ncontains\n \n\".txt\"\n \nand\n { 13 < 27 }\n\n\n    \ndo\n \nappend\n \n\"42\"\n\n\n\n\n\n\nEditor Composition\n\u00b6\n\n\nEditors can be composed. For example, executing the \nFoo\n editor in\nthe following Rug script will result in \nsome\n being replaced by \nfoo\n\nand then by \nbar\n, as the \nFoo\n editor invokes the \nBar\n editor.\n\n\neditor\n \nFoo\n\n\n\nwith\n \nFile\n \nf\n\n\n  \ndo\n \nreplaceAll\n \n\"some\" \"foo\"\n\n\nBar\n\n\n\n# ------\n\n\neditor\n \nBar\n\n\n\nwith\n \nFile\n \nf\n\n\n  \ndo\n \nreplaceAll\n \n\"foo\" \"bar\"\n\n\n\n\n\n\nIn this case, \nFoo\n and \nBar\n are in the same file, but they could be\nin separate files within the same project where we would use the \nuse\n\nstatement to bring in the editor in a different file. We can also\nrefer to editors outside the current project by introducing a\ndependency on the \nRug project\n that those\neditors that we want to import are located in to the\n\n.atomist/manifest.yml\n file.\n\n\nWhen composing by calling an editor that accepts parameters, the\nparameters are provided as a comma-separate list of\n\nparam_name=param_value\n tokens.\n\n\neditor\n \nCallerEditor\n\n\n\nCalledEditor\n \nfirst\n=\n\"some\"\n, \nsecond\n=\n\"thing\"\n\n\n\neditor\n \nCalledEditor\n\n\n\nparam\n \nfirst\n:\n \n^.*$\n\n\nparam\n \nsecond\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n\n\n  \nbegin\n\n\n    \ndo\n \nappend\n \nfirst\n\n\n    \ndo\n \nappend\n \nsecond\n\n\n  \nend\n\n\n\n\n\n\nSyntax Guide\n\u00b6\n\n\nNow for a more detailed tour of Rug syntax...\n\n\nCase conventions\n\u00b6\n\n\nRug identifiers must observe the following case conventions.\n\n\n\n\nType names\n, such as editors and reviewer names: Same convention\n    as for valid Java identifiers, except that they must begin with a\n    capital letter.\n\n\nFunction names\n, such as \nappend\n in the earlier examples: Same\n    convention as for valid Java identifiers, except that they must\n    begin with a lower case letter.\n\n\n\n\nReserved words\n\u00b6\n\n\nReserved words may not be used as identifiers. The following are Rug\nreserved words:\n\n\n\n\n\n\n\n\nReserved word\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n\n\n\n\neditor\n, \nreviewer\n\n\nIdentify program\n\n\n\n\n\n\n\n\n\n\nparam\n\n\nParameter declaration\n\n\n\n\n\n\n\n\n\n\nuses\n\n\nIdentify imported editor or reviewer\n\n\n\n\n\n\n\n\n\n\nprecondition\n\n\nPredicate that should hold for the editor be applicable or run\n\n\n\n\n\n\n\n\n\n\npostcondition\n\n\nPredicate that should hold after the editor has run. Including this makes an editor more robust, as it will fail rather than make any updates if the postcondition does not hold.\n\n\n\n\n\n\n\n\n\n\nwith\n\n\nSpecifies a with block\n\n\n\n\n\n\n\n\n\n\ndo\n\n\nBegins an action within a with block\n\n\n\n\n\n\n\n\n\n\nrun\n\n\nSpecifies an action within a with block that executes another project operation.\n\n\n\n\n\n\n\n\n\n\nbegin\n - \nend\n\n\nGroup a sequence of actions within a with block. Actions can include \ndo\n, a nested \nwith\n block, or \nrun\n. Each action will see the context in the state it was left in by the last action.\n\n\n\n\n\n\n\n\n\n\n\n\nRug Symbols\n\u00b6\n\n\n\n\n\n\n\n\nSymbol\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@\n\n\nPrefixes an \nannotation\n or a pre-packaged Rug variable lookup when using on declared parameters. Annotations are used to describe program elements.\n\n\n\n\n\n\n\n\n\n\n{}\n\n\nSurrounds a JavaScript block. The JavaScript expression(s) in the block are evaluated, and the return value can be used as a function argument.\n\n\n\n\n\n\n\n\n\n\n=\n\n\nEquality test\n\n\n\n\n\n\n\n\n\n\n\n\nString Literals\n\u00b6\n\n\nRug supports three types of string literals:\n\n\n\n\n\n\n\n\nString type\n\n\nNotes\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\nDouble quoted\n\n\nAs supported in Java, including escaping via \n\\\n\n\n\"Donny\" \"Walter\\n\" \"Jeff Bridges is the \\\"Dude\\\"\"\n\n\n\n\n\n\nSingle quoted\n\n\nAs in Python or JavaScript. However, does not support escaping\n\n\n'This is a test'\n\n\n\n\n\n\nTriple quoted\n\n\nCan span linebreaks, as in Python or Scala. Unlike in Python, only double quotes are allowed\n\n\n\"\"\"This content could span many lines\"\"\"\n\n\n\n\n\n\n\n\nAnnotations\n\u00b6\n\n\nAnnotations\n are used to describe the following program elements:\neditors, reviewers and parameters. For example:\n\n\n@description\n \n\"Takes EJBs and delivers a roundhouse kick to them\"\n\n\neditor\n \nRemoveEJB\n\n\n\n@default\n \n'This is a default value'\n\n\n@description\n \n'A magical parameter'\n\n\n@validInput\n \n'Valid input looks like this: Foo'\n\n\nparam\n \nname\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nisJava\n \nand\n \nimports\n \n\"javax.ejb\"\n\n\n  \ndo\n \nsetContent\n \n\"Now this won't compile, will it!\"\n\n\n\n\n\n\nThe permitted values are consistent with parameter definitions used\nextensively in Atomist components.\n\n\n\n\n\n\n\n\nAnnotation\n\n\nApplies to\n\n\nArgument Type\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n@description\n\n\neditor, reviewer or parameter\n\n\nString\n\n\nDescribes the parameter\n\n\n\n\n\n\n@optional\n\n\nparameter\n\n\nNone\n\n\nWhether the parameter is required. Default is required.\n\n\n\n\n\n\n@default\n\n\nparameter\n\n\nString\n\n\nDefault value for parameter.\n\n\n\n\n\n\n@validInput\n\n\nparameter\n\n\nString\n\n\nDescription of valid input, such as \"A valid email address\" or \"3-10 alphanumeric characters\"\n\n\n\n\n\n\n@hide\n\n\nparameter\n\n\nNone\n\n\nIndicates that this parameter is only for use by programs and should not be displayed to users.\n\n\n\n\n\n\n@displayName\n\n\nparameter\n\n\nString\n\n\nUI friendly name for parameter.\n\n\n\n\n\n\n@maxLength\n\n\nparameter\n\n\nInteger\n\n\nMaximum length of a parameter's string value.\n\n\n\n\n\n\n@minLength\n\n\nparameter\n\n\nInteger\n\n\nMinimum length of a parameter's string value.\n\n\n\n\n\n\n\n\nString arguments to annotations, like other strings in Rug, are either\ndouble-quoted strings or triple double-quoted strings.  Triple\ndouble-quoted strings can include special characters like newlines.\n\n\n@\n Annotations are also used to look up pre-packaged variables that\nare supplied to your script for use when declaring editor parameter\npatterns, for example:\n\n\neditor\n \nClassRenamer\n\n\n\nparam\n \nold_class\n:\n \n@java_class\n\n\nparam\n \nnew_class\n:\n \n@java_class\n\n\n\n\n\n\nCurrently pre-packaged variables that can be looked up in this manner\nfor parameter pattern declarations specifically include the following:\n\n\n\n\n\n\n\n\nAnnotation\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n@artifact_id\n\n\nRegular Expression\n\n\nMaven artifact identifier\n\n\n\n\n\n\n@group_name\n\n\nRegular Expression\n\n\nMaven group name\n\n\n\n\n\n\n@java_class\n\n\nRegular Expression\n\n\nJava class name\n\n\n\n\n\n\n@java_identifier\n\n\nRegular Expression\n\n\nJava identifier\n\n\n\n\n\n\n@java_package\n\n\nRegular Expression\n\n\nJava package name\n\n\n\n\n\n\n@project_name\n\n\nRegular Expression\n\n\nGitHub repository name\n\n\n\n\n\n\n@port\n\n\nRegular Expression\n\n\nIP port\n\n\n\n\n\n\n@ruby_class\n\n\nRegular Expression\n\n\nRuby class name\n\n\n\n\n\n\n@ruby_identifier\n\n\nRegular Expression\n\n\nRuby identifier\n\n\n\n\n\n\n@semantic_version\n\n\nRegular Expression\n\n\nSemantic version\n\n\n\n\n\n\n@url\n\n\nRegular Expression\n\n\nURL\n\n\n\n\n\n\n@uuid\n\n\nRegular Expression\n\n\nUUID\n\n\n\n\n\n\n\n\nComments in Rug\n\u00b6\n\n\nAny content on a line after \n#\n is a comment. For example:\n\n\neditor\n \nFoo\n\n\n\nwith\n \nFile\n \nf\n \n# Do something with this file\n\n\n  \ndo\n\n\n    \n# This is not something we'd want to do in real life\n\n\n    \nsetContent\n \n\"Something else\"\n\n\n\n\n\n\nC style multi-line comments are supported:\n\n\n/*\n\n\n    This is a comment that goes on so long\n\n\n    that we need line breaks.\n\n\n*/\n\n\neditor\n \nSample\n \n...\n\n\n\n\n\n\nNext\n\u00b6\n\n\n\n\nRug Generators\n\n\nRug Templates\n\n\nEscaping Rug into JavaScript\n\n\nCore Rug Language Extensions",
            "title": "Rug Editors"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#rug-editors",
            "text": "Rug editors  work at the level of a specific project , for example\nthis is typically a particular  repository on GitHub .  Rug editors can be found in the  /.atomist/editors  directory of\na  Rug project .  Editors also have access to template content in the same project,\npackaged under  /.atomist/templates .   NOTE: All Atomist files should be under the  .atomist  directory in the root of a project.   Rug editor files must have a  .rug  extension.  A  .rug  file can\ncontain one or more editors and reviewers.  A  .rug  file must always contain\nan editor with the same name as the source file (excluding the  .rug \nextension), and may contain additional editors that are visible only within\nthe scope of the source file.  For reference, this convention is analogous to Java public class\npackaging.  Any number of Rug editors can be bundled together in\na  Rug project . A good example of this is the\nopen source  Spring Boot Editors  Rug project.",
            "title": "Rug Editors"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#parameters-and-templates",
            "text": "Rug editors are built on the same underpinnings as your usual non-Rug\neditors. They share familiar concepts:   Parameters : Editors and reviewers can specify any number of\n    mandatory or optional parameters with an accompanying validation\n    pattern.  Templates : Editors can be packaged in archives including\n    templates that are written\n    in  Velocity \n    or  Mustache .",
            "title": "Parameters and Templates"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#a-quick-tour-of-rug-editor-syntax",
            "text": "The Rug editor syntax can be summarised as a collection of Selectors  and then  Actions  on what is selected.  White space is not significant. However we encourage sensible\nindentation.  Before we go into a more systematic presentation of Rug syntax, let's\nstart by building up a simple program: a project editor that appends\nto a file:  editor   AppendToSpecificFile  with   File   f   when   name   =   \"myfile.txt\"     do   append   \"\\nAnd this is a new line\"   The  with  statement simply says  for each file in the project if name\nis \"myfile.txt\" append the given string to the end of the file.  . The with  statement declared what we  select  and what type it is\nexpected to be. The Rug language extension in the example above is\nthe  Core Rug Language Extension \nof  File  and this dictates what\nfunctions are exposed what has been selected.  The code between  when  and  do  is\na  Rug Predicate , specifying which files to match.  Let's make this a little more sophisticated. Perhaps we'd like to\ndecide what content we should append. This would be a natural\nparameter:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append   to_append   Now we will append the value of the parameter to the end of the\nfile. Unlike our first, naive, editor, this editor can be used to\nmodify files in ways determined by the caller.   Note:  The parameter definition specifies a regular expression\nthat will be used to validate it before it's passed to the\neditor. So the editor's implementation can assume that it's valid\nupon execution.   It would be good to describe this editor so that users see information\nbeyond its name. We can do this with the  description  annotation. We\ncan also describe the parameter:  @description   \"\"\"Appends value of to_append parameter to       the end of files called myfile.txt\"\"\"  editor   AppendToFile  @description   \"Text to append to the file\"  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append   to_append   Note the use of a triple-quoted string here. As in Scala,\ntriple-quoted strings may span lines and include double quotes without\nescaping.  We can add multiple  with  blocks. So we could process another type of\nfile as follows:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append   to_append  with   File   f   when   name   =   \"MyClass.java\"     do   prepend   \"// Ha ha! This is a sneaky comment.\\n\"   Sometimes we need to compute additional values. We do this with the let  keyword as shown to populate the  x  value below:  editor   AppendToFile  param   to_append :   ^.*$  let   x   =   \"This is a value\"  with   File   f   when   name   =   \"myfile.txt\"     begin       do   prepend   x       do   append   to_append     end   Such computed values will be exposed to templates as well as the\nremainder of the Rug program itself.  We can also perform multiple  do  steps as follows, enclosing them in\na  begin/end  block:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   contains   \".txt\"     begin       do   append   to_append       do   append   \"And now for something completely different\"     end   We can escape to JavaScript to compute the value of any expression, or\nperform a do manipulation. A JavaScript expression is enclosed in\ncurly braces. The following example builds the string to be appended\nusing JavaScript:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append  { to_append + \" plus this from JavaScript\" }   We can also use JavaScript expressions in predicates, like this:  editor   AppendToFile  with   File     when   name   contains   \".txt\"   and  { 13 < 27 }       do   append   \"42\"",
            "title": "A Quick Tour of Rug Editor Syntax"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#editor-composition",
            "text": "Editors can be composed. For example, executing the  Foo  editor in\nthe following Rug script will result in  some  being replaced by  foo \nand then by  bar , as the  Foo  editor invokes the  Bar  editor.  editor   Foo  with   File   f     do   replaceAll   \"some\" \"foo\"  Bar  # ------  editor   Bar  with   File   f     do   replaceAll   \"foo\" \"bar\"   In this case,  Foo  and  Bar  are in the same file, but they could be\nin separate files within the same project where we would use the  use \nstatement to bring in the editor in a different file. We can also\nrefer to editors outside the current project by introducing a\ndependency on the  Rug project  that those\neditors that we want to import are located in to the .atomist/manifest.yml  file.  When composing by calling an editor that accepts parameters, the\nparameters are provided as a comma-separate list of param_name=param_value  tokens.  editor   CallerEditor  CalledEditor   first = \"some\" ,  second = \"thing\"  editor   CalledEditor  param   first :   ^.*$  param   second :   ^.*$  with   File   f     begin       do   append   first       do   append   second     end",
            "title": "Editor Composition"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#syntax-guide",
            "text": "Now for a more detailed tour of Rug syntax...",
            "title": "Syntax Guide"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#case-conventions",
            "text": "Rug identifiers must observe the following case conventions.   Type names , such as editors and reviewer names: Same convention\n    as for valid Java identifiers, except that they must begin with a\n    capital letter.  Function names , such as  append  in the earlier examples: Same\n    convention as for valid Java identifiers, except that they must\n    begin with a lower case letter.",
            "title": "Case conventions"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#reserved-words",
            "text": "Reserved words may not be used as identifiers. The following are Rug\nreserved words:     Reserved word  Purpose        editor ,  reviewer  Identify program      param  Parameter declaration      uses  Identify imported editor or reviewer      precondition  Predicate that should hold for the editor be applicable or run      postcondition  Predicate that should hold after the editor has run. Including this makes an editor more robust, as it will fail rather than make any updates if the postcondition does not hold.      with  Specifies a with block      do  Begins an action within a with block      run  Specifies an action within a with block that executes another project operation.      begin  -  end  Group a sequence of actions within a with block. Actions can include  do , a nested  with  block, or  run . Each action will see the context in the state it was left in by the last action.",
            "title": "Reserved words"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#rug-symbols",
            "text": "Symbol  Purpose        @  Prefixes an  annotation  or a pre-packaged Rug variable lookup when using on declared parameters. Annotations are used to describe program elements.      {}  Surrounds a JavaScript block. The JavaScript expression(s) in the block are evaluated, and the return value can be used as a function argument.      =  Equality test",
            "title": "Rug Symbols"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#string-literals",
            "text": "Rug supports three types of string literals:     String type  Notes  Examples      Double quoted  As supported in Java, including escaping via  \\  \"Donny\" \"Walter\\n\" \"Jeff Bridges is the \\\"Dude\\\"\"    Single quoted  As in Python or JavaScript. However, does not support escaping  'This is a test'    Triple quoted  Can span linebreaks, as in Python or Scala. Unlike in Python, only double quotes are allowed  \"\"\"This content could span many lines\"\"\"",
            "title": "String Literals"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#annotations",
            "text": "Annotations  are used to describe the following program elements:\neditors, reviewers and parameters. For example:  @description   \"Takes EJBs and delivers a roundhouse kick to them\"  editor   RemoveEJB  @default   'This is a default value'  @description   'A magical parameter'  @validInput   'Valid input looks like this: Foo'  param   name :   ^.*$  with   File   f   when   isJava   and   imports   \"javax.ejb\"     do   setContent   \"Now this won't compile, will it!\"   The permitted values are consistent with parameter definitions used\nextensively in Atomist components.     Annotation  Applies to  Argument Type  Meaning      @description  editor, reviewer or parameter  String  Describes the parameter    @optional  parameter  None  Whether the parameter is required. Default is required.    @default  parameter  String  Default value for parameter.    @validInput  parameter  String  Description of valid input, such as \"A valid email address\" or \"3-10 alphanumeric characters\"    @hide  parameter  None  Indicates that this parameter is only for use by programs and should not be displayed to users.    @displayName  parameter  String  UI friendly name for parameter.    @maxLength  parameter  Integer  Maximum length of a parameter's string value.    @minLength  parameter  Integer  Minimum length of a parameter's string value.     String arguments to annotations, like other strings in Rug, are either\ndouble-quoted strings or triple double-quoted strings.  Triple\ndouble-quoted strings can include special characters like newlines.  @  Annotations are also used to look up pre-packaged variables that\nare supplied to your script for use when declaring editor parameter\npatterns, for example:  editor   ClassRenamer  param   old_class :   @java_class  param   new_class :   @java_class   Currently pre-packaged variables that can be looked up in this manner\nfor parameter pattern declarations specifically include the following:     Annotation  Type  Description      @artifact_id  Regular Expression  Maven artifact identifier    @group_name  Regular Expression  Maven group name    @java_class  Regular Expression  Java class name    @java_identifier  Regular Expression  Java identifier    @java_package  Regular Expression  Java package name    @project_name  Regular Expression  GitHub repository name    @port  Regular Expression  IP port    @ruby_class  Regular Expression  Ruby class name    @ruby_identifier  Regular Expression  Ruby identifier    @semantic_version  Regular Expression  Semantic version    @url  Regular Expression  URL    @uuid  Regular Expression  UUID",
            "title": "Annotations"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#comments-in-rug",
            "text": "Any content on a line after  #  is a comment. For example:  editor   Foo  with   File   f   # Do something with this file     do       # This is not something we'd want to do in real life       setContent   \"Something else\"   C style multi-line comments are supported:  /*      This is a comment that goes on so long      that we need line breaks.  */  editor   Sample   ...",
            "title": "Comments in Rug"
        },
        {
            "location": "/reference-docs/rug/rug-editors/#next",
            "text": "Rug Generators  Rug Templates  Escaping Rug into JavaScript  Core Rug Language Extensions",
            "title": "Next"
        },
        {
            "location": "/reference-docs/rug/rug-generators/",
            "text": "Rug Generators\n\u00b6\n\n\nRug generators are used to create new projects from an existing model\nproject.  Generators are created using the \ngenerator\n keyword.\n\n\nWhen a generator creates a new project, it starts by copying all the\nfiles in the project in which it resides, excluding the \n.atomist\n\ndirectory, to the new project being created.\n\n\nTypically Rug generators do not contain logic of their own, but invoke\na number of other editors in order to manipulate the files copied from\nthe generator project.\n\n\nFor example, here is a complete \nSpring Rest Service\n\ngenerator:\n\n\n@tag\n \n\"java\"\n\n\n@tag\n \n\"spring\"\n\n\n@tag\n \n\"spring-boot\"\n\n\n@description\n \n\"Creates a new Spring Rest project\"\n\n\ngenerator\n \nNewSpringProject\n\n\n\n# Pattern to replace in old class name.\n\n\nold_class\n \n=\n \n\"SpringRest\"\n\n\n\n# Root package of the old file\n\n\nold_package\n \n=\n \n\"com.atomist.springrest\"\n\n\n\n# Now we invoke generic editors that do the actual work\n\n\nUpdateReadme\n\n\nPomParameterizer\n\n\nPackageMove\n\n\nClassRenamer\n\n\n\n\n\n\nThis generator uses four editors. The parameters from these editors\npropagate to the calling context--typically an interaction with a\nuser--except for \nold_class\n and \nold_package\n which are explicitly\nset.\n\n\nThis modular approach enables multiple project generators to share\ncommon functionality.",
            "title": "Rug Generators"
        },
        {
            "location": "/reference-docs/rug/rug-generators/#rug-generators",
            "text": "Rug generators are used to create new projects from an existing model\nproject.  Generators are created using the  generator  keyword.  When a generator creates a new project, it starts by copying all the\nfiles in the project in which it resides, excluding the  .atomist \ndirectory, to the new project being created.  Typically Rug generators do not contain logic of their own, but invoke\na number of other editors in order to manipulate the files copied from\nthe generator project.  For example, here is a complete  Spring Rest Service \ngenerator:  @tag   \"java\"  @tag   \"spring\"  @tag   \"spring-boot\"  @description   \"Creates a new Spring Rest project\"  generator   NewSpringProject  # Pattern to replace in old class name.  old_class   =   \"SpringRest\"  # Root package of the old file  old_package   =   \"com.atomist.springrest\"  # Now we invoke generic editors that do the actual work  UpdateReadme  PomParameterizer  PackageMove  ClassRenamer   This generator uses four editors. The parameters from these editors\npropagate to the calling context--typically an interaction with a\nuser--except for  old_class  and  old_package  which are explicitly\nset.  This modular approach enables multiple project generators to share\ncommon functionality.",
            "title": "Rug Generators"
        },
        {
            "location": "/reference-docs/rug/rug-templates/",
            "text": "Rug Templates\n\u00b6\n\n\nRug Templates are files that contain parameterized content that can be\nused by Rug \ngenerators\n\nand \neditors\n.  Templates are located in the\n\n.atomist/templates\n directory.\n\n\nCurrently Rug supports using\nboth \nVelocity\n\nand \nMustache\n styles of template.\nVelocity templates must have a \n.vm\n extension.  Mustache templates\nmust have a \n.mustache\n extension.",
            "title": "Rug Templates"
        },
        {
            "location": "/reference-docs/rug/rug-templates/#rug-templates",
            "text": "Rug Templates are files that contain parameterized content that can be\nused by Rug  generators \nand  editors .  Templates are located in the .atomist/templates  directory.  Currently Rug supports using\nboth  Velocity \nand  Mustache  styles of template.\nVelocity templates must have a  .vm  extension.  Mustache templates\nmust have a  .mustache  extension.",
            "title": "Rug Templates"
        },
        {
            "location": "/reference-docs/rug/rug-predicates/",
            "text": "Rug Predicates\n\u00b6\n\n\nWhen writing test assertions or when specifying that a Rug editor\nshould not be applied with a precondition it is often useful, and more\nreadable, to be able to specify and even reuse this logic by defining\na Rug predicate.\n\n\nA Rug predicate is an expression that returns a \nBoolean\n \ntrue\n or\n\nfalse\n value.\n\n\nA Simple Rug Predicate based on a \nCore Rug Language Extension\n being supported\n\u00b6\n\n\nThe simplest form of predicate is one that uses Rug to ask if the\nproject supports the assertions of a\nparticular \nCore Rug Language Extension\n. Every \nRug Language Extension\n is packaged with\na statement that declares whether it can be applied to a given project\n(usually in the form of detecting if certain files are present or\nnot), and the following example piggy-backs on that:\n\n\npredicate\n \nIsMaven\n\n\n  \nwith\n \npom\n\n\n\n\n\n\nIn this case the predicate simple states that it will only return true\nfor projects that the \nPOM Rug Language Extension\n\nsupports.\n\n\nFlexible Rug Predicates based Javascript\n\u00b6\n\n\nIf you need more power then a you can declare a Rug predicate that\nbegins by selecting the project itself and then can execute JavaScript\nlogic to indicate whether the predicate should pass:\n\n\n@description\n \n\"Only work on projects that do not have a .atomist directory already\"\n\n\npredicate\n \nIsNotRugArchive\n\n\n  \nwith\n \nproject\n \np\n\n\n    \nwhen\n \n{\n \n!\n \np\n.\ndirectoryExists\n(\n\".atomist\"\n)\n \n}\n\n\n\n\n\n\n\n\nNOTE:\n This sample is taken from the \nrug-editors\n project.\n\n\n\n\nRug Predicates in Rug Test Assertions\n\u00b6\n\n\nThe most common place that you will see a predicate being used in is a\nRug Test \nthen\n block as shown below:\n\n\n...\n\n\n\nthen\n\n\n  \nfileCount\n \n=\n \n1\n\n\n  \nand\n \nfileContains\n \n\"src/main/java/Cat.java\"\n \n\"class Cat\"\n\n\n\n\n\n\nIn this example \nfileCount = 1\n is an \nin-place Rug Predicate\n\ninterpreted to examine the output from the editor-under-test to then\nreturn a \nBoolean\n \ntrue\n or \nfalse\n value for the assertion.\n\n\n\n\n\nRug Predicates as Preconditions in Editors\n\u00b6\n\n\nPredicates can also be used as preconditions to protect an editor from\nbeing executed against a project it should not be applied to as shown\nbelow:\n\n\neditor\n \nAddHystrix\n\n\n\nprecondition\n \nIsSpringBoot\n\n\nprecondition\n \nIsMaven\n\n\n\n...\n \nrest\n \nof\n \neditor\n \nsyntax\n \n...\n\n\n\n\n\n\n\n\nNOTE:\n This sample is taken from a real-world editor in\nthe \nspring-boot-editors project\n.\n\n\n\n\nIn this case the \nprecondition\n expressions are naming the predicates\nthat should be applied. But where are those custom predicates coming\nfrom...\n\n\nPredicates in \n.rug\n Files for Reuse\n\u00b6\n\n\nIn the editor \nprecondition\n example shown above the actual predicates\nthemselves are expressed in their own \n.rug\n files. If you want to\nreuse a predicate then it \nmust\n be defined in its own file. Typically\nthis is a \n.rug\n file located in the \n.atomist/editors\n directory in\nthe \nRug project\n.\n\n\nSimilar to how the first editor in a \n.rug\n file must have the same\nname as the file, the \n.rug\n file that contains a predicate must have\nthe same name as the declared predicate.\n\n\nSo the following sample, taken from \nspring-boot-editors\n,\nis declared in a \n.atomist/editors/IsMaven.rug\n file:\n\n\npredicate\n \nIsMaven\n\n\n  \nwith\n \npom",
            "title": "Rug Predicates"
        },
        {
            "location": "/reference-docs/rug/rug-predicates/#rug-predicates",
            "text": "When writing test assertions or when specifying that a Rug editor\nshould not be applied with a precondition it is often useful, and more\nreadable, to be able to specify and even reuse this logic by defining\na Rug predicate.  A Rug predicate is an expression that returns a  Boolean   true  or false  value.",
            "title": "Rug Predicates"
        },
        {
            "location": "/reference-docs/rug/rug-predicates/#a-simple-rug-predicate-based-on-a-core-rug-language-extension-being-supported",
            "text": "The simplest form of predicate is one that uses Rug to ask if the\nproject supports the assertions of a\nparticular  Core Rug Language Extension . Every  Rug Language Extension  is packaged with\na statement that declares whether it can be applied to a given project\n(usually in the form of detecting if certain files are present or\nnot), and the following example piggy-backs on that:  predicate   IsMaven     with   pom   In this case the predicate simple states that it will only return true\nfor projects that the  POM Rug Language Extension \nsupports.",
            "title": "A Simple Rug Predicate based on a Core Rug Language Extension being supported"
        },
        {
            "location": "/reference-docs/rug/rug-predicates/#flexible-rug-predicates-based-javascript",
            "text": "If you need more power then a you can declare a Rug predicate that\nbegins by selecting the project itself and then can execute JavaScript\nlogic to indicate whether the predicate should pass:  @description   \"Only work on projects that do not have a .atomist directory already\"  predicate   IsNotRugArchive     with   project   p       when   {   !   p . directoryExists ( \".atomist\" )   }    NOTE:  This sample is taken from the  rug-editors  project.",
            "title": "Flexible Rug Predicates based Javascript"
        },
        {
            "location": "/reference-docs/rug/rug-predicates/#rug-predicates-in-rug-test-assertions",
            "text": "The most common place that you will see a predicate being used in is a\nRug Test  then  block as shown below:  ...  then     fileCount   =   1     and   fileContains   \"src/main/java/Cat.java\"   \"class Cat\"   In this example  fileCount = 1  is an  in-place Rug Predicate \ninterpreted to examine the output from the editor-under-test to then\nreturn a  Boolean   true  or  false  value for the assertion.",
            "title": "Rug Predicates in Rug Test Assertions"
        },
        {
            "location": "/reference-docs/rug/rug-predicates/#rug-predicates-as-preconditions-in-editors",
            "text": "Predicates can also be used as preconditions to protect an editor from\nbeing executed against a project it should not be applied to as shown\nbelow:  editor   AddHystrix  precondition   IsSpringBoot  precondition   IsMaven  ...   rest   of   editor   syntax   ...    NOTE:  This sample is taken from a real-world editor in\nthe  spring-boot-editors project .   In this case the  precondition  expressions are naming the predicates\nthat should be applied. But where are those custom predicates coming\nfrom...",
            "title": "Rug Predicates as Preconditions in Editors"
        },
        {
            "location": "/reference-docs/rug/rug-predicates/#predicates-in-rug-files-for-reuse",
            "text": "In the editor  precondition  example shown above the actual predicates\nthemselves are expressed in their own  .rug  files. If you want to\nreuse a predicate then it  must  be defined in its own file. Typically\nthis is a  .rug  file located in the  .atomist/editors  directory in\nthe  Rug project .  Similar to how the first editor in a  .rug  file must have the same\nname as the file, the  .rug  file that contains a predicate must have\nthe same name as the declared predicate.  So the following sample, taken from  spring-boot-editors ,\nis declared in a  .atomist/editors/IsMaven.rug  file:  predicate   IsMaven     with   pom",
            "title": "Predicates in .rug Files for Reuse"
        },
        {
            "location": "/reference-docs/rug/rug-path-expressions/",
            "text": "Rug Path expressions\n\u00b6\n\n\nReference documentation coming soon...",
            "title": "Rug Path Expressions"
        },
        {
            "location": "/reference-docs/rug/rug-path-expressions/#rug-path-expressions",
            "text": "Reference documentation coming soon...",
            "title": "Rug Path expressions"
        },
        {
            "location": "/reference-docs/rug/rug-microgrammars/",
            "text": "Rug Microgrammars\n\u00b6\n\n\nMicrogrammars are \n\"partial grammars designed to extract checker-specific features only\"\n (see \nthis post by Adrian Colyer\n for an introduction to the concept of Micro-grammars).\n\n\nWhen there is no existing \nRug Language Extension\n and plain file manipulation is too clumsy and random, the microgrammar support in Rug provides an effective way of declaring a way to safely select and extract a portion of a file so that it can be inspected and manipulated by your Rugs.\n\n\n\n\nFor more on micro-grammars we strongly recommend you check out this \npost by Adrian Colyer\n.\n\n\n\n\nPlease Note:\n Currently Rug microgrammar support only works inside TypeScript Rugs.\n\n\nA Rug micro-grammar in Action\n\u00b6\n\n\nThe following code shows a microgrammar being declared in a Rug TypeScript editor:\n\n\nclass\n \nMicrogrammarSampleEditor\n \nimplements\n \nProjectEditor\n \n{\n\n  \nname\n: \nstring\n \n=\n \n\"MicrogrammarSampleEditor\"\n\n  \ndescription\n: \nstring\n \n=\n \n\"Demonstrates using a microgrammar\"\n\n\n  \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n    \nlet\n \nmg\n \n=\n \nnew\n \nMicrogrammar\n(\n'modelVersion'\n,\n \n`<modelVersion>$mv1</modelVersion`\n,\n\n                \n{\n \nmv1\n \n:\n \n'\u00a7[a-zA-Z0-9_\\\\.]+\u00a7'\n \n}\n \n)\n\n\n    \nlet\n \neng\n: \nPathExpressionEngine\n \n=\n \nproject\n.\ncontext\n().\npathExpressionEngine\n().\naddType\n(\nmg\n)\n\n\n    \neng\n.\nwith\n<\nTextTreeNode\n>\n(\nproject\n,\n \n\"/*[@name='pom.xml']/modelVersion()/mv1()\"\n,\n \nn\n \n=>\n \n{\n\n\n      \nif\n \n(\nn\n.\nvalue\n()\n \n!=\n \n\"4.0.0\"\n)\n \nproject\n.\nfail\n(\n\"\"\n \n+\n \nn\n.\nvalue\n())\n\n\n      \nlet\n \nmsg\n \n=\n \n`The node is \n${\nn\n}\n`\n\n\n      \nn\n.\nupdate\n(\n'4.0.1'\n)\n\n    \n})\n\n  \n}\n\n\n}\n\n\n\n\n\n\nThis code breaks down as follows:\n\n\n\n\nLines 6 and 7\n - This is where the microgrammar is declared. The microgrammar is called \nmodelVersion\n and we are looking for anywhere in the file that matches \n<modelVersion>$mv1</modelVersion\n. The \n$mv1\n is the microgrammar's marker for a submatcher, holding the content we want to extract when the microgrammar matches. Finally on Line 7 we are declaring the submatcher, associating it with a regular expression that declares what the structure of the \nmv1\n content should be. The \u00a7 characters delineate a regular expression.\n\n\nLine 9\n - Adds this new microgrammar to this \nRug's path expression\n engine so that it can be applied.\n\n\nLine 11\n - Applies a \nRug path expression\n to the project, specifying that we are interested in any file in the project whose name begins with \npom.xml\n.\n\n\nLine 11\n - Applies a \nRug path expression\n to the project, specifying that we are interested in any file in the project whose name begins with \npom.xml\n. Then your new \nmodelVersion\n microgrammar is applied to those files and the contents of the microgrammar's \nmv1\n is made available and assigned to the variable \nn\n.\n\n\nLine 12\n - Inspecting the value of \nn\n the project editor is triggered to \nfail\n its editing if the value of \nn\n is not \n4.0.0\n.\n\n\nLine 15\n - The value of \nn\n as extracted using the micro-grammar, is embedded into a string message.\n\n\nLine 17\n - Finally the value of \nn\n is set to something new by calling the \nupdate\n method.\n\n\n\n\nThe result is: the modelVersion element's value is changed from 4.0.0 to 4.0.1 in the pom.xml file.\n\n\nThis little example hopefully demonstrates some of the real power of Rug microgrammars. You can copy a piece of the file you want to modify, pull the bits that matter to you out into submatchers, and then look at them or change them in the editor code. The parsing instruction looks like the content of the file, unlike regular expressions or any other parsing specification.\n\n\nWith a Rug microgrammar you can select, inspect and replace a set of values identified within a context in a file elegantly and meaningfully without the need for a full \nRug Language Extension\n.",
            "title": "Rug Microgrammars"
        },
        {
            "location": "/reference-docs/rug/rug-microgrammars/#rug-microgrammars",
            "text": "Microgrammars are  \"partial grammars designed to extract checker-specific features only\"  (see  this post by Adrian Colyer  for an introduction to the concept of Micro-grammars).  When there is no existing  Rug Language Extension  and plain file manipulation is too clumsy and random, the microgrammar support in Rug provides an effective way of declaring a way to safely select and extract a portion of a file so that it can be inspected and manipulated by your Rugs.   For more on micro-grammars we strongly recommend you check out this  post by Adrian Colyer .   Please Note:  Currently Rug microgrammar support only works inside TypeScript Rugs.",
            "title": "Rug Microgrammars"
        },
        {
            "location": "/reference-docs/rug/rug-microgrammars/#a-rug-micro-grammar-in-action",
            "text": "The following code shows a microgrammar being declared in a Rug TypeScript editor:  class   MicrogrammarSampleEditor   implements   ProjectEditor   { \n   name :  string   =   \"MicrogrammarSampleEditor\" \n   description :  string   =   \"Demonstrates using a microgrammar\" \n\n   edit ( project :  Project )   { \n     let   mg   =   new   Microgrammar ( 'modelVersion' ,   `<modelVersion>$mv1</modelVersion` , \n                 {   mv1   :   '\u00a7[a-zA-Z0-9_\\\\.]+\u00a7'   }   ) \n\n     let   eng :  PathExpressionEngine   =   project . context (). pathExpressionEngine (). addType ( mg ) \n\n     eng . with < TextTreeNode > ( project ,   \"/*[@name='pom.xml']/modelVersion()/mv1()\" ,   n   =>   { \n\n       if   ( n . value ()   !=   \"4.0.0\" )   project . fail ( \"\"   +   n . value ()) \n\n       let   msg   =   `The node is  ${ n } ` \n\n       n . update ( '4.0.1' ) \n     }) \n   }  }   This code breaks down as follows:   Lines 6 and 7  - This is where the microgrammar is declared. The microgrammar is called  modelVersion  and we are looking for anywhere in the file that matches  <modelVersion>$mv1</modelVersion . The  $mv1  is the microgrammar's marker for a submatcher, holding the content we want to extract when the microgrammar matches. Finally on Line 7 we are declaring the submatcher, associating it with a regular expression that declares what the structure of the  mv1  content should be. The \u00a7 characters delineate a regular expression.  Line 9  - Adds this new microgrammar to this  Rug's path expression  engine so that it can be applied.  Line 11  - Applies a  Rug path expression  to the project, specifying that we are interested in any file in the project whose name begins with  pom.xml .  Line 11  - Applies a  Rug path expression  to the project, specifying that we are interested in any file in the project whose name begins with  pom.xml . Then your new  modelVersion  microgrammar is applied to those files and the contents of the microgrammar's  mv1  is made available and assigned to the variable  n .  Line 12  - Inspecting the value of  n  the project editor is triggered to  fail  its editing if the value of  n  is not  4.0.0 .  Line 15  - The value of  n  as extracted using the micro-grammar, is embedded into a string message.  Line 17  - Finally the value of  n  is set to something new by calling the  update  method.   The result is: the modelVersion element's value is changed from 4.0.0 to 4.0.1 in the pom.xml file.  This little example hopefully demonstrates some of the real power of Rug microgrammars. You can copy a piece of the file you want to modify, pull the bits that matter to you out into submatchers, and then look at them or change them in the editor code. The parsing instruction looks like the content of the file, unlike regular expressions or any other parsing specification.  With a Rug microgrammar you can select, inspect and replace a set of values identified within a context in a file elegantly and meaningfully without the need for a full  Rug Language Extension .",
            "title": "A Rug micro-grammar in Action"
        },
        {
            "location": "/reference-docs/rug/extensions/",
            "text": "Core Rug Language Extensions\n\u00b6\n\n\nRug has a number of in-built language extensions that understand\nproject concepts and make it \nmuch\n simpler to write your\nRug \ntests\n, \ngenerators\n, \neditors\n, and reviewers (coming\nsoon).\n\n\nConsider the following line:\n\n\nwith\n \nFile\n \nf\n\n\n\n\n\n\nFile\n here is not a function or a reserved word in Rug, but a \nRug\nLanguage Extension\n. Rug Language Extensions are an important part point of Rug, enabling it to\nexpose a wide range of functionality in a native-seeming way. Language Extensions\nsupport a range of methods that can be used in \nwith\n predicates or\n\ndo\n statements.\n\n\nA number of Rug Language Extensions are currently shipped out of the box including:\n\n\n\n\nCljProject\n - Clojure projects\n\n\nCSharpFile\n - C# files\n\n\nDockerFile\n - Dockerfiles\n\n\nElmModule\n - Elm Modules\n\n\nEveryPom\n - all Maven POM files in a project\n\n\nFile\n - manipulate simple text files\n\n\nJavaProject\n - Java projects\n\n\nJavaSource\n - Java source files\n\n\nJavaType\n - Java classes\n\n\nJson\n - JSON files\n\n\nLine\n - manipulate specific lines in a project's files\n\n\nPom\n - projects containing Maven POM files\n\n\nProject\n - execute operations across a project\n\n\nProperties\n - Java properties files\n\n\nPythonFile\n - Python source files\n\n\nPythonRequirementsTxt\n - Python \nrequirements.txt\n files\n\n\nRugArchiveProject\n - Rug projects\n\n\nRugFile\n - Rug DSL files\n\n\nScalaFile\n - Scala files\n\n\nServices\n - \"services\", used by executors\n\n\nSpringBootProject\n - Spring Boot projects\n\n\nXml\n - XML files\n\n\nYml\n - YAML files",
            "title": "Introduction"
        },
        {
            "location": "/reference-docs/rug/extensions/#core-rug-language-extensions",
            "text": "Rug has a number of in-built language extensions that understand\nproject concepts and make it  much  simpler to write your\nRug  tests ,  generators ,  editors , and reviewers (coming\nsoon).  Consider the following line:  with   File   f   File  here is not a function or a reserved word in Rug, but a  Rug\nLanguage Extension . Rug Language Extensions are an important part point of Rug, enabling it to\nexpose a wide range of functionality in a native-seeming way. Language Extensions\nsupport a range of methods that can be used in  with  predicates or do  statements.  A number of Rug Language Extensions are currently shipped out of the box including:   CljProject  - Clojure projects  CSharpFile  - C# files  DockerFile  - Dockerfiles  ElmModule  - Elm Modules  EveryPom  - all Maven POM files in a project  File  - manipulate simple text files  JavaProject  - Java projects  JavaSource  - Java source files  JavaType  - Java classes  Json  - JSON files  Line  - manipulate specific lines in a project's files  Pom  - projects containing Maven POM files  Project  - execute operations across a project  Properties  - Java properties files  PythonFile  - Python source files  PythonRequirementsTxt  - Python  requirements.txt  files  RugArchiveProject  - Rug projects  RugFile  - Rug DSL files  ScalaFile  - Scala files  Services  - \"services\", used by executors  SpringBootProject  - Spring Boot projects  Xml  - XML files  Yml  - YAML files",
            "title": "Core Rug Language Extensions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/",
            "text": "Type: \nclj.project\n\u00b6\n\n\nClojure project\n\n\nclj.project\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ninterface com.atomist.rug.runtime.FunctionInvocationContext\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nOperate on this. Use when you want to operate on an object in an embedded language such as JavaScript or Clojure\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ninterface com.atomist.rug.runtime.FunctionInvocationContext\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ninterface com.atomist.rug.runtime.FunctionInvocationContext\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nsetProjectName\n\u00b6\n\n\nSet the project name to the given value\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "CljProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#type-cljproject",
            "text": "Clojure project",
            "title": "Type: clj.project"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#cljproject-operations",
            "text": "",
            "title": "clj.project Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  interface com.atomist.rug.runtime.FunctionInvocationContext  **",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-content",
            "text": "Return file content  Parameters  None",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-eval",
            "text": "Operate on this. Use when you want to operate on an object in an embedded language such as JavaScript or Clojure  Parameters     Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-filename",
            "text": "Return file name, excluding path  Parameters  None",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-linecount",
            "text": "Return the number of lines in the file  Parameters  None",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-majorproblem",
            "text": "Report a major problem  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  interface com.atomist.rug.runtime.FunctionInvocationContext  **",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-minorproblem",
            "text": "Report a minor problem  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  interface com.atomist.rug.runtime.FunctionInvocationContext  **",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-path",
            "text": "Return file path, with forward slashes  Parameters  None",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-setprojectname",
            "text": "Set the project name to the given value  Parameters     Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Operation: setProjectName"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-clj-project/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /  Parameters     Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/",
            "text": "Type: \nCSharpFile\n\u00b6\n\n\nC# file\n\n\nCSharpFile\n Operations\n\u00b6\n\n\nOperation: \naddUsing\n\u00b6\n\n\nAdd a using if it isn't already present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewUsing\n\n\nclass java.lang.String\n\n\nNew using (just the package)\n\n\n\n\n\n\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "CSharpFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#type-csharpfile",
            "text": "C# file",
            "title": "Type: CSharpFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#csharpfile-operations",
            "text": "",
            "title": "CSharpFile Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-addusing",
            "text": "Add a using if it isn't already present",
            "title": "Operation: addUsing"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters",
            "text": "Name  Type  Description      newUsing  class java.lang.String  New using (just the package)",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_1",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_4",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_11",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_12",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_13",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-c-sharp-file/#parameters_15",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/",
            "text": "Type: \nDockerFile\n\u00b6\n\n\nDocker file type\n\n\nDockerFile\n Operations\n\u00b6\n\n\nOperation: \naddAdd\n\u00b6\n\n\nAdd ADD directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naddContents\n\n\nclass java.lang.String\n\n\nThe contents of the ADD directive\n\n\n\n\n\n\n\n\nOperation: \naddCopy\n\u00b6\n\n\nAdd COPY directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncopyContents\n\n\nclass java.lang.String\n\n\nThe contents of the COPY directive\n\n\n\n\n\n\n\n\nOperation: \naddEnv\n\u00b6\n\n\nAdd Env directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenvContents\n\n\nclass java.lang.String\n\n\nThe contents of the Env directive\n\n\n\n\n\n\n\n\nOperation: \naddExpose\n\u00b6\n\n\nAdd EXPOSE directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexposeContents\n\n\nclass java.lang.String\n\n\nThe contents of the EXPOSE directive\n\n\n\n\n\n\n\n\nOperation: \naddLabel\n\u00b6\n\n\nAdd LABEL directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabelContents\n\n\nclass java.lang.String\n\n\nThe contents of the LABEL directive\n\n\n\n\n\n\n\n\nOperation: \naddMaintainer\n\u00b6\n\n\nAdd MAINTAINER directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaintainerName\n\n\nclass java.lang.String\n\n\nThe name of the MAINTAINER directive\n\n\n\n\n\n\nmaintainerEmail\n\n\nclass java.lang.String\n\n\nThe email of the MAINTAINER directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateCmd\n\u00b6\n\n\nAdd or update CMD directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncmdContents\n\n\nclass java.lang.String\n\n\nThe contents of the CMD directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateEntryPoint\n\u00b6\n\n\nAdd or update ENTRYPOINT directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentrypointContent\n\n\nclass java.lang.String\n\n\nThe contents of the ENTRYPOINT directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateExpose\n\u00b6\n\n\nAdd or update EXPOSE directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexposeContents\n\n\nclass java.lang.String\n\n\nThe contents of the EXPOSE directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateFrom\n\u00b6\n\n\nAdd or update FROM directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfromContents\n\n\nclass java.lang.String\n\n\nThe contents of the FROM directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateHealthcheck\n\u00b6\n\n\nAdd or update HEALTHCHECK directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhealthcheckContent\n\n\nclass java.lang.String\n\n\nThe contents of the HEALTHCHECK directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateLabel\n\u00b6\n\n\nAdd or update LABEL directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabelContents\n\n\nclass java.lang.String\n\n\nThe contents of the LABEL directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateMaintainer\n\u00b6\n\n\nAdd or update MAINTAINER directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaintainerName\n\n\nclass java.lang.String\n\n\nThe name of the MAINTAINER directive\n\n\n\n\n\n\nmaintainerEmail\n\n\nclass java.lang.String\n\n\nThe email of the MAINTAINER directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateWorkdir\n\u00b6\n\n\nAdd or update WORKDIR directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkdirContents\n\n\nclass java.lang.String\n\n\nThe contents of the WORKDIR directive\n\n\n\n\n\n\n\n\nOperation: \naddRun\n\u00b6\n\n\nAdd RUN directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrunContents\n\n\nclass java.lang.String\n\n\nThe contents of the RUN directive\n\n\n\n\n\n\n\n\nOperation: \naddVolume\n\u00b6\n\n\nAdd VOLUME directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvolumeContents\n\n\nclass java.lang.String\n\n\nThe contents of the VOLUME directive\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetExposedPorts\n\u00b6\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "DockerFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#type-dockerfile",
            "text": "Docker file type",
            "title": "Type: DockerFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#dockerfile-operations",
            "text": "",
            "title": "DockerFile Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addadd",
            "text": "Add ADD directive",
            "title": "Operation: addAdd"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters",
            "text": "Name  Type  Description      addContents  class java.lang.String  The contents of the ADD directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addcopy",
            "text": "Add COPY directive",
            "title": "Operation: addCopy"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_1",
            "text": "Name  Type  Description      copyContents  class java.lang.String  The contents of the COPY directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addenv",
            "text": "Add Env directive",
            "title": "Operation: addEnv"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_2",
            "text": "Name  Type  Description      envContents  class java.lang.String  The contents of the Env directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addexpose",
            "text": "Add EXPOSE directive",
            "title": "Operation: addExpose"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_3",
            "text": "Name  Type  Description      exposeContents  class java.lang.String  The contents of the EXPOSE directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addlabel",
            "text": "Add LABEL directive",
            "title": "Operation: addLabel"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_4",
            "text": "Name  Type  Description      labelContents  class java.lang.String  The contents of the LABEL directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addmaintainer",
            "text": "Add MAINTAINER directive",
            "title": "Operation: addMaintainer"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_5",
            "text": "Name  Type  Description      maintainerName  class java.lang.String  The name of the MAINTAINER directive    maintainerEmail  class java.lang.String  The email of the MAINTAINER directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdatecmd",
            "text": "Add or update CMD directive",
            "title": "Operation: addOrUpdateCmd"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_6",
            "text": "Name  Type  Description      cmdContents  class java.lang.String  The contents of the CMD directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdateentrypoint",
            "text": "Add or update ENTRYPOINT directive",
            "title": "Operation: addOrUpdateEntryPoint"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_7",
            "text": "Name  Type  Description      entrypointContent  class java.lang.String  The contents of the ENTRYPOINT directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdateexpose",
            "text": "Add or update EXPOSE directive",
            "title": "Operation: addOrUpdateExpose"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_8",
            "text": "Name  Type  Description      exposeContents  class java.lang.String  The contents of the EXPOSE directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdatefrom",
            "text": "Add or update FROM directive",
            "title": "Operation: addOrUpdateFrom"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_9",
            "text": "Name  Type  Description      fromContents  class java.lang.String  The contents of the FROM directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdatehealthcheck",
            "text": "Add or update HEALTHCHECK directive",
            "title": "Operation: addOrUpdateHealthcheck"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_10",
            "text": "Name  Type  Description      healthcheckContent  class java.lang.String  The contents of the HEALTHCHECK directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdatelabel",
            "text": "Add or update LABEL directive",
            "title": "Operation: addOrUpdateLabel"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_11",
            "text": "Name  Type  Description      labelContents  class java.lang.String  The contents of the LABEL directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdatemaintainer",
            "text": "Add or update MAINTAINER directive",
            "title": "Operation: addOrUpdateMaintainer"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_12",
            "text": "Name  Type  Description      maintainerName  class java.lang.String  The name of the MAINTAINER directive    maintainerEmail  class java.lang.String  The email of the MAINTAINER directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addorupdateworkdir",
            "text": "Add or update WORKDIR directive",
            "title": "Operation: addOrUpdateWorkdir"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_13",
            "text": "Name  Type  Description      workdirContents  class java.lang.String  The contents of the WORKDIR directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addrun",
            "text": "Add RUN directive",
            "title": "Operation: addRun"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_14",
            "text": "Name  Type  Description      runContents  class java.lang.String  The contents of the RUN directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-addvolume",
            "text": "Add VOLUME directive",
            "title": "Operation: addVolume"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_15",
            "text": "Name  Type  Description      volumeContents  class java.lang.String  The contents of the VOLUME directive",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_16",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_19",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_20",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_21",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-getexposedports",
            "text": "",
            "title": "Operation: getExposedPorts"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_23",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_25",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_26",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_27",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_30",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-docker-file/#parameters_33",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/",
            "text": "Type: \nElmModule\n\u00b6\n\n\nElm module\n\n\nElmModule\n Operations\n\u00b6\n\n\nOperation: \naddFunction\n\u00b6\n\n\nAdd a function with the given declaration\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nclass java.lang.String\n\n\nBody for the function\n\n\n\n\n\n\n\n\nOperation: \naddImportStatement\n\u00b6\n\n\nUpdate the given module import\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimportStatement\n\n\nclass java.lang.String\n\n\nThe complete import statement\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nexposes\n\u00b6\n\n\nDoes the module expose this?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nA function or type that might be exposed\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nimports\n\u00b6\n\n\nDoes the module import the given module?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmoduleName\n\n\nclass java.lang.String\n\n\nThe module name to check\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the module\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nremoveFunction\n\u00b6\n\n\nRemove a function with the given name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nName of the function to remove\n\n\n\n\n\n\n\n\nOperation: \nrename\n\u00b6\n\n\nChange the name of the module\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe module name to change to\n\n\n\n\n\n\n\n\nOperation: \nreplaceExposing\n\u00b6\n\n\nReplace the exposing\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewExposing\n\n\nclass java.lang.String\n\n\nNew content of exposing. Does not include exposing keyword. Will be either a CSV list or ..\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nupdateImport\n\u00b6\n\n\nUpdate the given module import\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noldModuleName\n\n\nclass java.lang.String\n\n\nThe old module import name\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe module name to change to",
            "title": "ElmModule"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#type-elmmodule",
            "text": "Elm module",
            "title": "Type: ElmModule"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#elmmodule-operations",
            "text": "",
            "title": "ElmModule Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-addfunction",
            "text": "Add a function with the given declaration",
            "title": "Operation: addFunction"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters",
            "text": "Name  Type  Description      body  class java.lang.String  Body for the function",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-addimportstatement",
            "text": "Update the given module import",
            "title": "Operation: addImportStatement"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_1",
            "text": "Name  Type  Description      importStatement  class java.lang.String  The complete import statement",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_5",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-exposes",
            "text": "Does the module expose this?",
            "title": "Operation: exposes"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_6",
            "text": "Name  Type  Description      name  class java.lang.String  A function or type that might be exposed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-imports",
            "text": "Does the module import the given module?",
            "title": "Operation: imports"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_9",
            "text": "Name  Type  Description      moduleName  class java.lang.String  The module name to check",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_14",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-name",
            "text": "Return the name of the module",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_20",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-removefunction",
            "text": "Remove a function with the given name",
            "title": "Operation: removeFunction"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_21",
            "text": "Name  Type  Description      name  class java.lang.String  Name of the function to remove",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-rename",
            "text": "Change the name of the module",
            "title": "Operation: rename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_22",
            "text": "Name  Type  Description      newName  class java.lang.String  The module name to change to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-replaceexposing",
            "text": "Replace the exposing",
            "title": "Operation: replaceExposing"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_23",
            "text": "Name  Type  Description      newExposing  class java.lang.String  New content of exposing. Does not include exposing keyword. Will be either a CSV list or ..",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_24",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#operation-updateimport",
            "text": "Update the given module import",
            "title": "Operation: updateImport"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-elm-module/#parameters_25",
            "text": "Name  Type  Description      oldModuleName  class java.lang.String  The old module import name    newName  class java.lang.String  The module name to change to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/",
            "text": "Type: \nEveryPom\n\u00b6\n\n\nPOM XML file\n\n\nEveryPom\n Operations\n\u00b6\n\n\nOperation: \naddChildNode\n\u00b6\n\n\nAdd the specified content under the indicated xpath-selected node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to add the content under\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe new node name to be added as a child\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nXML document to be added under the indicated node\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceBuildPlugin\n\u00b6\n\n\nAdds or replaces a build plugin\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin's artifactId\n\n\n\n\n\n\npluginContent\n\n\nclass java.lang.String\n\n\nThe XML content for the plugin\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency's scope\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyManagementDependency\n\u00b6\n\n\nAdds or replaces a dependency management dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\ndependencyContent\n\n\nclass java.lang.String\n\n\nThe XML content for the dependency\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency's version to be set\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency's scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency's version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyScope\n\u00b6\n\n\nAdd or replace a dependency's scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewScope\n\n\nclass java.lang.String\n\n\nThe new value of the dependency's scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyVersion\n\u00b6\n\n\nAdd or replace a dependency's version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency's version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceNode\n\u00b6\n\n\nAdds or replaces a node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparentNodeXPath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the parent node\n\n\n\n\n\n\nxPathOfNodeToReplace\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to replace\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe name of the node being placed\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nThe content of the node being placed\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceProperty\n\u00b6\n\n\nAdd or replace a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the property being set\n\n\n\n\n\n\npropertyValue\n\n\nclass java.lang.String\n\n\nThe value of the property being set\n\n\n\n\n\n\n\n\nOperation: \nartifactId\n\u00b6\n\n\nReturn the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nTests whether a node matching the given xpath expression is present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to test against for the presence of a node\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ndeleteNode\n\u00b6\n\n\nDeletes the specified node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to the node to delete\n\n\n\n\n\n\n\n\nOperation: \ndependencyScope\n\u00b6\n\n\nReturn the value of a dependency's scope as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndependencyVersion\n\u00b6\n\n\nReturn the value of a dependency's version as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndescription\n\u00b6\n\n\nReturn the content of the description element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetTextContentFor\n\u00b6\n\n\nGet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to retrieve the test content\n\n\n\n\n\n\n\n\nOperation: \ngroupId\n\u00b6\n\n\nReturn the content of the groupId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisBuildPluginPresent\n\u00b6\n\n\nReturn whether a build plugin is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyManagementDependencyPresent\n\u00b6\n\n\nReturn whether a dependency management dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyPresent\n\u00b6\n\n\nReturn whether a dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the content of the name element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackaging\n\u00b6\n\n\nReturn the content of the packaging element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentArtifactId\n\u00b6\n\n\nReturn the content of the parent artifactId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentGroupId\n\u00b6\n\n\nReturn the content of the parent groupId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentVersion\n\u00b6\n\n\nReturn the content of the parent version\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nproperty\n\u00b6\n\n\nReturn the value of a project property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprojectPropertyName\n\n\nclass java.lang.String\n\n\nThe project property you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \nremoveDependency\n\u00b6\n\n\nRemoves a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyScope\n\u00b6\n\n\nRemove a dependency's scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyVersion\n\u00b6\n\n\nRemove a dependency's version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveProperty\n\u00b6\n\n\nRemove a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the project property being deleted\n\n\n\n\n\n\n\n\nOperation: \nreplaceParent\n\u00b6\n\n\nSet the content of the parent block\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentBlock\n\n\nclass java.lang.String\n\n\nThe parent block that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetArtifactId\n\u00b6\n\n\nSet the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewArtifactId\n\n\nclass java.lang.String\n\n\nThe artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetDescription\n\u00b6\n\n\nSet the content of the description element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewDescription\n\n\nclass java.lang.String\n\n\nThe description that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetGroupId\n\u00b6\n\n\nSet the content of the groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewGroupId\n\n\nclass java.lang.String\n\n\nThe groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetPackaging\n\u00b6\n\n\nSet the content of the packaging element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackaging\n\n\nclass java.lang.String\n\n\nThe packaging that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentArtifactId\n\u00b6\n\n\nSet the content of the parent artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentArtifactId\n\n\nclass java.lang.String\n\n\nThe parent artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentGroupId\n\u00b6\n\n\nSet the content of the parent groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentGroupId\n\n\nclass java.lang.String\n\n\nThe parent groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentVersion\n\u00b6\n\n\nSet the content of the parent version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentVersion\n\n\nclass java.lang.String\n\n\nThe parent version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetProjectName\n\u00b6\n\n\nAdd or replace project name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe name being set\n\n\n\n\n\n\n\n\nOperation: \nsetTextContentFor\n\u00b6\n\n\nSet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to set the test content\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nNew text content for the XPath\n\n\n\n\n\n\n\n\nOperation: \nsetVersion\n\u00b6\n\n\nSet the content of the version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nversion\n\u00b6\n\n\nReturn the content of the version element\n\n\nParameters\n\u00b6\n\n\nNone",
            "title": "EveryPom"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#type-everypom",
            "text": "POM XML file",
            "title": "Type: EveryPom"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#everypom-operations",
            "text": "",
            "title": "EveryPom Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addchildnode",
            "text": "Add the specified content under the indicated xpath-selected node",
            "title": "Operation: addChildNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath selector for the node to add the content under    newNode  class java.lang.String  The new node name to be added as a child    nodeContent  class java.lang.String  XML document to be added under the indicated node",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacebuildplugin",
            "text": "Adds or replaces a build plugin",
            "title": "Operation: addOrReplaceBuildPlugin"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_1",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the build plugin's groupId    artifactId  class java.lang.String  The value of the build plugin's artifactId    pluginContent  class java.lang.String  The XML content for the plugin",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacedependency",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_2",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    scope  class java.lang.String  The value of the dependency's scope",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacedependency_1",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_3",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacedependencymanagementdependency",
            "text": "Adds or replaces a dependency management dependency",
            "title": "Operation: addOrReplaceDependencyManagementDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_4",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    dependencyContent  class java.lang.String  The XML content for the dependency",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacedependencyofversion",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_5",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newVersion  class java.lang.String  The value of the dependency's version to be set    scope  class java.lang.String  The value of the dependency's scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacedependencyofversion_1",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_6",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newVersion  class java.lang.String  The value of the dependency's version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacedependencyscope",
            "text": "Add or replace a dependency's scope",
            "title": "Operation: addOrReplaceDependencyScope"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_7",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newScope  class java.lang.String  The new value of the dependency's scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacedependencyversion",
            "text": "Add or replace a dependency's version",
            "title": "Operation: addOrReplaceDependencyVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_8",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newVersion  class java.lang.String  The value of the dependency's version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplacenode",
            "text": "Adds or replaces a node",
            "title": "Operation: addOrReplaceNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_9",
            "text": "Name  Type  Description      parentNodeXPath  class java.lang.String  The XPath selector for the parent node    xPathOfNodeToReplace  class java.lang.String  The XPath selector for the node to replace    newNode  class java.lang.String  The name of the node being placed    nodeContent  class java.lang.String  The content of the node being placed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-addorreplaceproperty",
            "text": "Add or replace a property",
            "title": "Operation: addOrReplaceProperty"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_10",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the property being set    propertyValue  class java.lang.String  The value of the property being set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-artifactid",
            "text": "Return the content of the artifactId element",
            "title": "Operation: artifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-contains",
            "text": "Tests whether a node matching the given xpath expression is present",
            "title": "Operation: contains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_14",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to test against for the presence of a node",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-deletenode",
            "text": "Deletes the specified node",
            "title": "Operation: deleteNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_16",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to the node to delete",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-dependencyscope",
            "text": "Return the value of a dependency's scope as specified by artifactId",
            "title": "Operation: dependencyScope"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_17",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-dependencyversion",
            "text": "Return the value of a dependency's version as specified by artifactId",
            "title": "Operation: dependencyVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_18",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-description",
            "text": "Return the content of the description element",
            "title": "Operation: description"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_20",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_21",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-gettextcontentfor",
            "text": "Get the text content for a specific xpath expression",
            "title": "Operation: getTextContentFor"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_23",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to retrieve the test content",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-groupid",
            "text": "Return the content of the groupId element",
            "title": "Operation: groupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-isbuildpluginpresent",
            "text": "Return whether a build plugin is present as specified by artifactId and groupId",
            "title": "Operation: isBuildPluginPresent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_25",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the build plugin you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the build plugin you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-isdependencymanagementdependencypresent",
            "text": "Return whether a dependency management dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyManagementDependencyPresent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_26",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency management dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency management dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-isdependencypresent",
            "text": "Return whether a dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyPresent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_27",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_30",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-name",
            "text": "Return the content of the name element",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_33",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-packaging",
            "text": "Return the content of the packaging element",
            "title": "Operation: packaging"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-parentartifactid",
            "text": "Return the content of the parent artifactId",
            "title": "Operation: parentArtifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_37",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-parentgroupid",
            "text": "Return the content of the parent groupId",
            "title": "Operation: parentGroupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-parentversion",
            "text": "Return the content of the parent version",
            "title": "Operation: parentVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_39",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_40",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_41",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_42",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-property",
            "text": "Return the value of a project property",
            "title": "Operation: property"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_43",
            "text": "Name  Type  Description      projectPropertyName  class java.lang.String  The project property you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-removedependency",
            "text": "Removes a dependency",
            "title": "Operation: removeDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_44",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-removedependencyscope",
            "text": "Remove a dependency's scope",
            "title": "Operation: removeDependencyScope"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_45",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-removedependencyversion",
            "text": "Remove a dependency's version",
            "title": "Operation: removeDependencyVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_46",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-removeproperty",
            "text": "Remove a property",
            "title": "Operation: removeProperty"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_47",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the project property being deleted",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-replaceparent",
            "text": "Set the content of the parent block",
            "title": "Operation: replaceParent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_48",
            "text": "Name  Type  Description      newParentBlock  class java.lang.String  The parent block that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setartifactid",
            "text": "Set the content of the artifactId element",
            "title": "Operation: setArtifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_49",
            "text": "Name  Type  Description      newArtifactId  class java.lang.String  The artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setdescription",
            "text": "Set the content of the description element",
            "title": "Operation: setDescription"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_50",
            "text": "Name  Type  Description      newDescription  class java.lang.String  The description that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setgroupid",
            "text": "Set the content of the groupId element",
            "title": "Operation: setGroupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_51",
            "text": "Name  Type  Description      newGroupId  class java.lang.String  The groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setpackaging",
            "text": "Set the content of the packaging element",
            "title": "Operation: setPackaging"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_52",
            "text": "Name  Type  Description      newPackaging  class java.lang.String  The packaging that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setparentartifactid",
            "text": "Set the content of the parent artifactId element",
            "title": "Operation: setParentArtifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_53",
            "text": "Name  Type  Description      newParentArtifactId  class java.lang.String  The parent artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setparentgroupid",
            "text": "Set the content of the parent groupId element",
            "title": "Operation: setParentGroupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_54",
            "text": "Name  Type  Description      newParentGroupId  class java.lang.String  The parent groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setparentversion",
            "text": "Set the content of the parent version element",
            "title": "Operation: setParentVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_55",
            "text": "Name  Type  Description      newParentVersion  class java.lang.String  The parent version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setprojectname",
            "text": "Add or replace project name",
            "title": "Operation: setProjectName"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_56",
            "text": "Name  Type  Description      newName  class java.lang.String  The name being set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-settextcontentfor",
            "text": "Set the text content for a specific xpath expression",
            "title": "Operation: setTextContentFor"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_57",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to set the test content    newContent  class java.lang.String  New text content for the XPath",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-setversion",
            "text": "Set the content of the version element",
            "title": "Operation: setVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_58",
            "text": "Name  Type  Description      newVersion  class java.lang.String  The version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_59",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#operation-version",
            "text": "Return the content of the version element",
            "title": "Operation: version"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-every-pom/#parameters_60",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/",
            "text": "Type: \nFile\n\u00b6\n\n\nType for a file within a project.\n\n\nFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend the given content to the file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to append\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nDoes the file content contain the given string?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwhat\n\n\nclass java.lang.String\n\n\nThe string to use when looking for it in the file\n\n\n\n\n\n\n\n\nOperation: \ncontainsMatch\n\u00b6\n\n\nDoes the file content contain a match for the given regex\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to look for in the file's content\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindMatches\n\u00b6\n\n\nReturn all matches for the given regexp in this file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\n\n\nOperation: \nfirstMatch\n\u00b6\n\n\nReturn the first match for the given regex, or the empty string if not found. Call containsMatch first to check presence.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\n\n\nOperation: \nisJava\n\u00b6\n\n\nIs this a Java file?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmustContain\n\u00b6\n\n\nIf the file already contains the specified text, does nothing. Otherwise appends it to the file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content that the file will contain\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nName of the file, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnameContains\n\u00b6\n\n\nDoes the file name (not path) contain the given string?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwhat\n\n\nclass java.lang.String\n\n\nThe string to use when looking for it in the file name or path\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprepend\n\u00b6\n\n\nPrepend the given content to the file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to prepend to the file\n\n\n\n\n\n\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regexp in this file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matching expressions with\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all instances of the given literal string in this file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace the matches with\n\n\n\n\n\n\n\n\nOperation: \nsetContent\n\u00b6\n\n\nSet entire file content to new string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nThe content to set the file to\n\n\n\n\n\n\n\n\nOperation: \nsetName\n\u00b6\n\n\nSet the file name, not path, to the given value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name to set the file to\n\n\n\n\n\n\n\n\nOperation: \nsetPath\n\u00b6\n\n\nChange the path to the given value. Path should use forward slashes to denote directories\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPath\n\n\nclass java.lang.String\n\n\nThe path to change the file to\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "File"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#type-file",
            "text": "Type for a file within a project.",
            "title": "Type: File"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#file-operations",
            "text": "",
            "title": "File Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-append",
            "text": "Append the given content to the file",
            "title": "Operation: append"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to append",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-contains",
            "text": "Does the file content contain the given string?",
            "title": "Operation: contains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_3",
            "text": "Name  Type  Description      what  class java.lang.String  The string to use when looking for it in the file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-containsmatch",
            "text": "Does the file content contain a match for the given regex",
            "title": "Operation: containsMatch"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_4",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to look for in the file's content",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_6",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-findmatches",
            "text": "Return all matches for the given regexp in this file",
            "title": "Operation: findMatches"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_9",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-firstmatch",
            "text": "Return the first match for the given regex, or the empty string if not found. Call containsMatch first to check presence.",
            "title": "Operation: firstMatch"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_10",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-isjava",
            "text": "Is this a Java file?",
            "title": "Operation: isJava"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_14",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_16",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-mustcontain",
            "text": "If the file already contains the specified text, does nothing. Otherwise appends it to the file",
            "title": "Operation: mustContain"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_17",
            "text": "Name  Type  Description      content  class java.lang.String  The content that the file will contain",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-name",
            "text": "Name of the file, excluding path",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-namecontains",
            "text": "Does the file name (not path) contain the given string?",
            "title": "Operation: nameContains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_19",
            "text": "Name  Type  Description      what  class java.lang.String  The string to use when looking for it in the file name or path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_20",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_21",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_23",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-prepend",
            "text": "Prepend the given content to the file",
            "title": "Operation: prepend"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_24",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to prepend to the file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_25",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regexp in this file",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_26",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replaceWith  class java.lang.String  The string to replace matching expressions with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-replace",
            "text": "Replace all instances of the given literal string in this file",
            "title": "Operation: replace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_27",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replaceWith  class java.lang.String  The string to replace the matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-setcontent",
            "text": "Set entire file content to new string",
            "title": "Operation: setContent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_28",
            "text": "Name  Type  Description      newContent  class java.lang.String  The content to set the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-setname",
            "text": "Set the file name, not path, to the given value",
            "title": "Operation: setName"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_29",
            "text": "Name  Type  Description      name  class java.lang.String  The name to set the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-setpath",
            "text": "Change the path to the given value. Path should use forward slashes to denote directories",
            "title": "Operation: setPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_30",
            "text": "Name  Type  Description      newPath  class java.lang.String  The path to change the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-file/#parameters_31",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/",
            "text": "Type: \nJavaProject\n\u00b6\n\n\nJava project\n\n\nJavaProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn't exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nisMaven\n\u00b6\n\n\nIs this a Maven project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpring\n\u00b6\n\n\nIs this a Spring project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpringBoot\n\u00b6\n\n\nIs this a Spring Boot project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \njavaFileCount\n\u00b6\n\n\nReturn the number of Java files in this module\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackages\n\u00b6\n\n\nList the packages in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nrenamePackage\n\u00b6\n\n\nRename the given package. All package under it will also be renamed\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noldPackage\n\n\nclass java.lang.String\n\n\nOld package name\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe new package name\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "JavaProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#type-javaproject",
            "text": "Java project",
            "title": "Type: JavaProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#javaproject-operations",
            "text": "",
            "title": "JavaProject Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_8",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_9",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_10",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_11",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn't exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_15",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_16",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_17",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_18",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_20",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_21",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_22",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_25",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_26",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_27",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_28",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-ismaven",
            "text": "Is this a Maven project?",
            "title": "Operation: isMaven"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-isspring",
            "text": "Is this a Spring project?",
            "title": "Operation: isSpring"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_30",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-isspringboot",
            "text": "Is this a Spring Boot project?",
            "title": "Operation: isSpringBoot"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-javafilecount",
            "text": "Return the number of Java files in this module",
            "title": "Operation: javaFileCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_32",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_33",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_34",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_35",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_36",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_37",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-name",
            "text": "Return the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_39",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_40",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-packages",
            "text": "List the packages in this project",
            "title": "Operation: packages"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_41",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_42",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-projects",
            "text": "Don't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_43",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_44",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-renamepackage",
            "text": "Rename the given package. All package under it will also be renamed",
            "title": "Operation: renamePackage"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_45",
            "text": "Name  Type  Description      oldPackage  class java.lang.String  Old package name    newPackage  class java.lang.String  The new package name",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_46",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-project/#parameters_47",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/",
            "text": "Type: \nJavaSource\n\u00b6\n\n\nJava source file\n\n\nJavaSource\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmovePackage\n\u00b6\n\n\nMove the source file to the given package\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe package to move the source file to\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npkg\n\u00b6\n\n\nReturn the package name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \ntypeCount\n\u00b6\n\n\nCount the types in this source file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "JavaSource"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#type-javasource",
            "text": "Java source file",
            "title": "Type: JavaSource"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#javasource-operations",
            "text": "",
            "title": "JavaSource Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-movepackage",
            "text": "Move the source file to the given package",
            "title": "Operation: movePackage"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_11",
            "text": "Name  Type  Description      newPackage  class java.lang.String  The package to move the source file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-pkg",
            "text": "Return the package name",
            "title": "Operation: pkg"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_17",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-typecount",
            "text": "Count the types in this source file",
            "title": "Operation: typeCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-source/#parameters_19",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/",
            "text": "Type: \nJavaType\n\u00b6\n\n\nJava class\n\n\nJavaType\n Operations\n\u00b6\n\n\nOperation: \naddAnnotation\n\u00b6\n\n\nAnnotate the element with the given annotation\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg\n\n\nclass java.lang.String\n\n\nPackage where the annotation is sourced\n\n\n\n\n\n\nannotation\n\n\nclass java.lang.String\n\n\nThe annotation to add\n\n\n\n\n\n\n\n\nOperation: \naddImport\n\u00b6\n\n\nAdd an import to the containing Java source\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfqn\n\n\nclass java.lang.String\n\n\nThe fully qualified name of the import\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nhasAnnotation\n\u00b6\n\n\nDoes the element have the given annotation?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nannotation\n\n\nclass java.lang.String\n\n\nThe string name of the annotation to look for\n\n\n\n\n\n\n\n\nOperation: \ninheritsFrom\n\u00b6\n\n\nDoes this type extend the given type?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsimpleName\n\n\nclass java.lang.String\n\n\nSimple name of the ancestor class we're looking for\n\n\n\n\n\n\n\n\nOperation: \nisAbstract\n\u00b6\n\n\nIs this abstract?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisInterface\n\u00b6\n\n\nIs this an interface?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nLine count\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmovePackage\n\u00b6\n\n\nMove the type to the given package\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe package to move the type to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the type\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npkg\n\u00b6\n\n\nReturn the package\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nremoveAnnotation\n\u00b6\n\n\nRemove annotation from the element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg\n\n\nclass java.lang.String\n\n\nPackage where the annotation is sourced\n\n\n\n\n\n\nannotation\n\n\nclass java.lang.String\n\n\nThe annotation to remove\n\n\n\n\n\n\n\n\nOperation: \nremoveImport\n\u00b6\n\n\nRemove an import from the containing Java source\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfqn\n\n\nclass java.lang.String\n\n\nThe fully qualified name of the import\n\n\n\n\n\n\n\n\nOperation: \nrename\n\u00b6\n\n\nRename the type\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe new name of the type\n\n\n\n\n\n\n\n\nOperation: \nrenameByReplace\n\u00b6\n\n\nRename the type by replacing a pattern in the name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\nclass java.lang.String\n\n\nThe name of the type to replace\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe replacement pattern\n\n\n\n\n\n\n\n\nOperation: \nsetHeaderComment\n\u00b6\n\n\nAdd or replace header comment for this type\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncomment\n\n\nclass java.lang.String\n\n\nNew header comment to set",
            "title": "JavaType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#type-javatype",
            "text": "Java class",
            "title": "Type: JavaType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#javatype-operations",
            "text": "",
            "title": "JavaType Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-addannotation",
            "text": "Annotate the element with the given annotation",
            "title": "Operation: addAnnotation"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters",
            "text": "Name  Type  Description      pkg  class java.lang.String  Package where the annotation is sourced    annotation  class java.lang.String  The annotation to add",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-addimport",
            "text": "Add an import to the containing Java source",
            "title": "Operation: addImport"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_1",
            "text": "Name  Type  Description      fqn  class java.lang.String  The fully qualified name of the import",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_4",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-hasannotation",
            "text": "Does the element have the given annotation?",
            "title": "Operation: hasAnnotation"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_6",
            "text": "Name  Type  Description      annotation  class java.lang.String  The string name of the annotation to look for",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-inheritsfrom",
            "text": "Does this type extend the given type?",
            "title": "Operation: inheritsFrom"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_7",
            "text": "Name  Type  Description      simpleName  class java.lang.String  Simple name of the ancestor class we're looking for",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-isabstract",
            "text": "Is this abstract?",
            "title": "Operation: isAbstract"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-isinterface",
            "text": "Is this an interface?",
            "title": "Operation: isInterface"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-linecount",
            "text": "Line count",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_11",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-movepackage",
            "text": "Move the type to the given package",
            "title": "Operation: movePackage"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_13",
            "text": "Name  Type  Description      newPackage  class java.lang.String  The package to move the type to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-name",
            "text": "Return the name of the type",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-pkg",
            "text": "Return the package",
            "title": "Operation: pkg"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_18",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-removeannotation",
            "text": "Remove annotation from the element",
            "title": "Operation: removeAnnotation"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_19",
            "text": "Name  Type  Description      pkg  class java.lang.String  Package where the annotation is sourced    annotation  class java.lang.String  The annotation to remove",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-removeimport",
            "text": "Remove an import from the containing Java source",
            "title": "Operation: removeImport"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_20",
            "text": "Name  Type  Description      fqn  class java.lang.String  The fully qualified name of the import",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-rename",
            "text": "Rename the type",
            "title": "Operation: rename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_21",
            "text": "Name  Type  Description      newName  class java.lang.String  The new name of the type",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-renamebyreplace",
            "text": "Rename the type by replacing a pattern in the name",
            "title": "Operation: renameByReplace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_22",
            "text": "Name  Type  Description      target  class java.lang.String  The name of the type to replace    replacement  class java.lang.String  The replacement pattern",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#operation-setheadercomment",
            "text": "Add or replace header comment for this type",
            "title": "Operation: setHeaderComment"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-java-type/#parameters_23",
            "text": "Name  Type  Description      comment  class java.lang.String  New header comment to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/",
            "text": "Type: \nJson\n\u00b6\n\n\nJSON file\n\n\nJson\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "Json"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#type-json",
            "text": "JSON file",
            "title": "Type: Json"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#json-operations",
            "text": "",
            "title": "Json Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_15",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-json/#parameters_16",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/",
            "text": "Type: \nLine\n\u00b6\n\n\nRepresents a line within a text file\n\n\nLine\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn this line's content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnum\n\u00b6\n\n\nLine number\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate this line's content\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ns2\n\n\nclass java.lang.String\n\n\nThe content to update this line to",
            "title": "Line"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#type-line",
            "text": "Represents a line within a text file",
            "title": "Type: Line"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#line-operations",
            "text": "",
            "title": "Line Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-content",
            "text": "Return this line's content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-num",
            "text": "Line number",
            "title": "Operation: num"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#operation-update",
            "text": "Update this line's content",
            "title": "Operation: update"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-line/#parameters_11",
            "text": "Name  Type  Description      s2  class java.lang.String  The content to update this line to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/",
            "text": "Type: \nPom\n\u00b6\n\n\nPOM XML file\n\n\nPom\n Operations\n\u00b6\n\n\nOperation: \naddChildNode\n\u00b6\n\n\nAdd the specified content under the indicated xpath-selected node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to add the content under\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe new node name to be added as a child\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nXML document to be added under the indicated node\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceBuildPlugin\n\u00b6\n\n\nAdds or replaces a build plugin\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin's artifactId\n\n\n\n\n\n\npluginContent\n\n\nclass java.lang.String\n\n\nThe XML content for the plugin\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency's scope\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyManagementDependency\n\u00b6\n\n\nAdds or replaces a dependency management dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\ndependencyContent\n\n\nclass java.lang.String\n\n\nThe XML content for the dependency\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency's version to be set\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency's scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency's version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyScope\n\u00b6\n\n\nAdd or replace a dependency's scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewScope\n\n\nclass java.lang.String\n\n\nThe new value of the dependency's scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyVersion\n\u00b6\n\n\nAdd or replace a dependency's version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency's version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceNode\n\u00b6\n\n\nAdds or replaces a node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparentNodeXPath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the parent node\n\n\n\n\n\n\nxPathOfNodeToReplace\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to replace\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe name of the node being placed\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nThe content of the node being placed\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceProperty\n\u00b6\n\n\nAdd or replace a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the property being set\n\n\n\n\n\n\npropertyValue\n\n\nclass java.lang.String\n\n\nThe value of the property being set\n\n\n\n\n\n\n\n\nOperation: \nartifactId\n\u00b6\n\n\nReturn the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nTests whether a node matching the given xpath expression is present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to test against for the presence of a node\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ndeleteNode\n\u00b6\n\n\nDeletes the specified node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to the node to delete\n\n\n\n\n\n\n\n\nOperation: \ndependencyScope\n\u00b6\n\n\nReturn the value of a dependency's scope as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndependencyVersion\n\u00b6\n\n\nReturn the value of a dependency's version as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndescription\n\u00b6\n\n\nReturn the content of the description element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetTextContentFor\n\u00b6\n\n\nGet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to retrieve the test content\n\n\n\n\n\n\n\n\nOperation: \ngroupId\n\u00b6\n\n\nReturn the content of the groupId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisBuildPluginPresent\n\u00b6\n\n\nReturn whether a build plugin is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyManagementDependencyPresent\n\u00b6\n\n\nReturn whether a dependency management dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyPresent\n\u00b6\n\n\nReturn whether a dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the content of the name element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackaging\n\u00b6\n\n\nReturn the content of the packaging element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentArtifactId\n\u00b6\n\n\nReturn the content of the parent artifactId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentGroupId\n\u00b6\n\n\nReturn the content of the parent groupId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentVersion\n\u00b6\n\n\nReturn the content of the parent version\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nproperty\n\u00b6\n\n\nReturn the value of a project property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprojectPropertyName\n\n\nclass java.lang.String\n\n\nThe project property you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \nremoveDependency\n\u00b6\n\n\nRemoves a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyScope\n\u00b6\n\n\nRemove a dependency's scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyVersion\n\u00b6\n\n\nRemove a dependency's version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency's artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveProperty\n\u00b6\n\n\nRemove a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the project property being deleted\n\n\n\n\n\n\n\n\nOperation: \nreplaceParent\n\u00b6\n\n\nSet the content of the parent block\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentBlock\n\n\nclass java.lang.String\n\n\nThe parent block that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetArtifactId\n\u00b6\n\n\nSet the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewArtifactId\n\n\nclass java.lang.String\n\n\nThe artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetDescription\n\u00b6\n\n\nSet the content of the description element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewDescription\n\n\nclass java.lang.String\n\n\nThe description that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetGroupId\n\u00b6\n\n\nSet the content of the groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewGroupId\n\n\nclass java.lang.String\n\n\nThe groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetPackaging\n\u00b6\n\n\nSet the content of the packaging element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackaging\n\n\nclass java.lang.String\n\n\nThe packaging that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentArtifactId\n\u00b6\n\n\nSet the content of the parent artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentArtifactId\n\n\nclass java.lang.String\n\n\nThe parent artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentGroupId\n\u00b6\n\n\nSet the content of the parent groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentGroupId\n\n\nclass java.lang.String\n\n\nThe parent groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentVersion\n\u00b6\n\n\nSet the content of the parent version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentVersion\n\n\nclass java.lang.String\n\n\nThe parent version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetProjectName\n\u00b6\n\n\nAdd or replace project name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe name being set\n\n\n\n\n\n\n\n\nOperation: \nsetTextContentFor\n\u00b6\n\n\nSet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to set the test content\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nNew text content for the XPath\n\n\n\n\n\n\n\n\nOperation: \nsetVersion\n\u00b6\n\n\nSet the content of the version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nversion\n\u00b6\n\n\nReturn the content of the version element\n\n\nParameters\n\u00b6\n\n\nNone",
            "title": "Pom"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#type-pom",
            "text": "POM XML file",
            "title": "Type: Pom"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#pom-operations",
            "text": "",
            "title": "Pom Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addchildnode",
            "text": "Add the specified content under the indicated xpath-selected node",
            "title": "Operation: addChildNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath selector for the node to add the content under    newNode  class java.lang.String  The new node name to be added as a child    nodeContent  class java.lang.String  XML document to be added under the indicated node",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacebuildplugin",
            "text": "Adds or replaces a build plugin",
            "title": "Operation: addOrReplaceBuildPlugin"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_1",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the build plugin's groupId    artifactId  class java.lang.String  The value of the build plugin's artifactId    pluginContent  class java.lang.String  The XML content for the plugin",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacedependency",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_2",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    scope  class java.lang.String  The value of the dependency's scope",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacedependency_1",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_3",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacedependencymanagementdependency",
            "text": "Adds or replaces a dependency management dependency",
            "title": "Operation: addOrReplaceDependencyManagementDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_4",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    dependencyContent  class java.lang.String  The XML content for the dependency",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacedependencyofversion",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_5",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newVersion  class java.lang.String  The value of the dependency's version to be set    scope  class java.lang.String  The value of the dependency's scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacedependencyofversion_1",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_6",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newVersion  class java.lang.String  The value of the dependency's version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacedependencyscope",
            "text": "Add or replace a dependency's scope",
            "title": "Operation: addOrReplaceDependencyScope"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_7",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newScope  class java.lang.String  The new value of the dependency's scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacedependencyversion",
            "text": "Add or replace a dependency's version",
            "title": "Operation: addOrReplaceDependencyVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_8",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId    newVersion  class java.lang.String  The value of the dependency's version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplacenode",
            "text": "Adds or replaces a node",
            "title": "Operation: addOrReplaceNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_9",
            "text": "Name  Type  Description      parentNodeXPath  class java.lang.String  The XPath selector for the parent node    xPathOfNodeToReplace  class java.lang.String  The XPath selector for the node to replace    newNode  class java.lang.String  The name of the node being placed    nodeContent  class java.lang.String  The content of the node being placed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-addorreplaceproperty",
            "text": "Add or replace a property",
            "title": "Operation: addOrReplaceProperty"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_10",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the property being set    propertyValue  class java.lang.String  The value of the property being set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-artifactid",
            "text": "Return the content of the artifactId element",
            "title": "Operation: artifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-contains",
            "text": "Tests whether a node matching the given xpath expression is present",
            "title": "Operation: contains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_14",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to test against for the presence of a node",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-deletenode",
            "text": "Deletes the specified node",
            "title": "Operation: deleteNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_16",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to the node to delete",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-dependencyscope",
            "text": "Return the value of a dependency's scope as specified by artifactId",
            "title": "Operation: dependencyScope"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_17",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-dependencyversion",
            "text": "Return the value of a dependency's version as specified by artifactId",
            "title": "Operation: dependencyVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_18",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-description",
            "text": "Return the content of the description element",
            "title": "Operation: description"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_20",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_21",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-gettextcontentfor",
            "text": "Get the text content for a specific xpath expression",
            "title": "Operation: getTextContentFor"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_23",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to retrieve the test content",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-groupid",
            "text": "Return the content of the groupId element",
            "title": "Operation: groupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-isbuildpluginpresent",
            "text": "Return whether a build plugin is present as specified by artifactId and groupId",
            "title": "Operation: isBuildPluginPresent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_25",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the build plugin you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the build plugin you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-isdependencymanagementdependencypresent",
            "text": "Return whether a dependency management dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyManagementDependencyPresent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_26",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency management dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency management dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-isdependencypresent",
            "text": "Return whether a dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyPresent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_27",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_30",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-name",
            "text": "Return the content of the name element",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_33",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-packaging",
            "text": "Return the content of the packaging element",
            "title": "Operation: packaging"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-parentartifactid",
            "text": "Return the content of the parent artifactId",
            "title": "Operation: parentArtifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_37",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-parentgroupid",
            "text": "Return the content of the parent groupId",
            "title": "Operation: parentGroupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-parentversion",
            "text": "Return the content of the parent version",
            "title": "Operation: parentVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_39",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_40",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_41",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_42",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-property",
            "text": "Return the value of a project property",
            "title": "Operation: property"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_43",
            "text": "Name  Type  Description      projectPropertyName  class java.lang.String  The project property you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-removedependency",
            "text": "Removes a dependency",
            "title": "Operation: removeDependency"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_44",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-removedependencyscope",
            "text": "Remove a dependency's scope",
            "title": "Operation: removeDependencyScope"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_45",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-removedependencyversion",
            "text": "Remove a dependency's version",
            "title": "Operation: removeDependencyVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_46",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency's groupId    artifactId  class java.lang.String  The value of the dependency's artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-removeproperty",
            "text": "Remove a property",
            "title": "Operation: removeProperty"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_47",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the project property being deleted",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-replaceparent",
            "text": "Set the content of the parent block",
            "title": "Operation: replaceParent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_48",
            "text": "Name  Type  Description      newParentBlock  class java.lang.String  The parent block that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setartifactid",
            "text": "Set the content of the artifactId element",
            "title": "Operation: setArtifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_49",
            "text": "Name  Type  Description      newArtifactId  class java.lang.String  The artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setdescription",
            "text": "Set the content of the description element",
            "title": "Operation: setDescription"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_50",
            "text": "Name  Type  Description      newDescription  class java.lang.String  The description that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setgroupid",
            "text": "Set the content of the groupId element",
            "title": "Operation: setGroupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_51",
            "text": "Name  Type  Description      newGroupId  class java.lang.String  The groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setpackaging",
            "text": "Set the content of the packaging element",
            "title": "Operation: setPackaging"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_52",
            "text": "Name  Type  Description      newPackaging  class java.lang.String  The packaging that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setparentartifactid",
            "text": "Set the content of the parent artifactId element",
            "title": "Operation: setParentArtifactId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_53",
            "text": "Name  Type  Description      newParentArtifactId  class java.lang.String  The parent artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setparentgroupid",
            "text": "Set the content of the parent groupId element",
            "title": "Operation: setParentGroupId"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_54",
            "text": "Name  Type  Description      newParentGroupId  class java.lang.String  The parent groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setparentversion",
            "text": "Set the content of the parent version element",
            "title": "Operation: setParentVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_55",
            "text": "Name  Type  Description      newParentVersion  class java.lang.String  The parent version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setprojectname",
            "text": "Add or replace project name",
            "title": "Operation: setProjectName"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_56",
            "text": "Name  Type  Description      newName  class java.lang.String  The name being set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-settextcontentfor",
            "text": "Set the text content for a specific xpath expression",
            "title": "Operation: setTextContentFor"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_57",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to set the test content    newContent  class java.lang.String  New text content for the XPath",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-setversion",
            "text": "Set the content of the version element",
            "title": "Operation: setVersion"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_58",
            "text": "Name  Type  Description      newVersion  class java.lang.String  The version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_59",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#operation-version",
            "text": "Return the content of the version element",
            "title": "Operation: version"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-pom/#parameters_60",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/",
            "text": "Type: \nProject\n\u00b6\n\n\nType for a project. Supports global operations. Consider using file and other lower types by preference as projectoperations can be inefficient.\n\n\nProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn't exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "Project"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#type-project",
            "text": "Type for a project. Supports global operations. Consider using file and other lower types by preference as projectoperations can be inefficient.",
            "title": "Type: Project"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#project-operations",
            "text": "",
            "title": "Project Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_8",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_9",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_10",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_11",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn't exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_15",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_16",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_17",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_18",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_20",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_21",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_22",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_25",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_26",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_27",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_28",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_29",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_30",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_31",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_33",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-name",
            "text": "Return the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_37",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-projects",
            "text": "Don't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_39",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_40",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-project/#parameters_41",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/",
            "text": "Type: \nProperties\n\u00b6\n\n\nJava properties file\n\n\nProperties\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontainsKey\n\u00b6\n\n\nReturn whether a property key exists in this file or not\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe key of the property being searched for\n\n\n\n\n\n\n\n\nOperation: \ncontainsValue\n\u00b6\n\n\nReturn whether a property value exists in this file or not\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe value being searched for\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetValue\n\u00b6\n\n\nReturn the content of this property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe name of the simple node\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nkeys\n\u00b6\n\n\nReturn a list of the supported keys\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nsetProperty\n\u00b6\n\n\nSet the value of the specified property, creating a property if not present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe key of the property being set\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe value of the property\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "Properties"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#type-properties",
            "text": "Java properties file",
            "title": "Type: Properties"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#properties-operations",
            "text": "",
            "title": "Properties Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-containskey",
            "text": "Return whether a property key exists in this file or not",
            "title": "Operation: containsKey"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_2",
            "text": "Name  Type  Description      key  class java.lang.String  The key of the property being searched for",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-containsvalue",
            "text": "Return whether a property value exists in this file or not",
            "title": "Operation: containsValue"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_3",
            "text": "Name  Type  Description      value  class java.lang.String  The value being searched for",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_5",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-getvalue",
            "text": "Return the content of this property",
            "title": "Operation: getValue"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_8",
            "text": "Name  Type  Description      key  class java.lang.String  The name of the simple node",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-keys",
            "text": "Return a list of the supported keys",
            "title": "Operation: keys"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_14",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_19",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-setproperty",
            "text": "Set the value of the specified property, creating a property if not present",
            "title": "Operation: setProperty"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_20",
            "text": "Name  Type  Description      key  class java.lang.String  The key of the property being set    value  class java.lang.String  The value of the property",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-properties/#parameters_21",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/",
            "text": "Type: \nPythonFile\n\u00b6\n\n\nPython file\n\n\nPythonFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "PythonFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#type-pythonfile",
            "text": "Python file",
            "title": "Type: PythonFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#pythonfile-operations",
            "text": "",
            "title": "PythonFile Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-file/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/",
            "text": "Type: \nPythonRequirementsTxt\n\u00b6\n\n\nPython requirements text file\n\n\nPythonRequirementsTxt\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "PythonRequirementsTxt"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#type-pythonrequirementstxt",
            "text": "Python requirements text file",
            "title": "Type: PythonRequirementsTxt"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#pythonrequirementstxt-operations",
            "text": "",
            "title": "PythonRequirementsTxt Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-python-requirements-txt/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/",
            "text": "Type: \nRugArchiveProject\n\u00b6\n\n\nRug archive\n\n\nRugArchiveProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn't exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "RugArchiveProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#type-rugarchiveproject",
            "text": "Rug archive",
            "title": "Type: RugArchiveProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#rugarchiveproject-operations",
            "text": "",
            "title": "RugArchiveProject Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_8",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_9",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_10",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_11",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn't exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_15",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_16",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_17",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_18",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_20",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_21",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_22",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_25",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_26",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_27",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_28",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_29",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_30",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_31",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_33",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-name",
            "text": "Return the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_37",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-projects",
            "text": "Don't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_39",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_40",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-archive-project/#parameters_41",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/",
            "text": "Type: \nRugFile\n\u00b6\n\n\nRug DSL file\n\n\nRugFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "RugFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#type-rugfile",
            "text": "Rug DSL file",
            "title": "Type: RugFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#rugfile-operations",
            "text": "",
            "title": "RugFile Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-rug-file/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/",
            "text": "Type: \nScalaFile\n\u00b6\n\n\nScala file\n\n\nScalaFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "ScalaFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#type-scalafile",
            "text": "Scala file",
            "title": "Type: ScalaFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#scalafile-operations",
            "text": "",
            "title": "ScalaFile Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-scala-file/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/",
            "text": "Type: \nServices\n\u00b6\n\n\nType for services. Used in executors\n\n\nServices\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npathExpressionEngine\n\u00b6\n\n\nUse to execute path expression\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nservices\n\u00b6\n\n\nServices\n\n\nParameters\n\u00b6\n\n\nNone",
            "title": "Services"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#type-services",
            "text": "Type for services. Used in executors",
            "title": "Type: Services"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#services-operations",
            "text": "",
            "title": "Services Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_2",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_3",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-pathexpressionengine",
            "text": "Use to execute path expression",
            "title": "Operation: pathExpressionEngine"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_9",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#operation-services",
            "text": "Services",
            "title": "Operation: services"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-services/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/",
            "text": "Type: \nSpringBootProject\n\u00b6\n\n\nSpring Boot project\n\n\nSpringBootProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nannotateBootApplication\n\u00b6\n\n\nAdd the given annotation to the Spring Boot application class\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg\n\n\nclass java.lang.String\n\n\nThe package of the annotation\n\n\n\n\n\n\nannotationName\n\n\nclass java.lang.String\n\n\nThe annotation to add\n\n\n\n\n\n\n\n\nOperation: \napplicationClassFQN\n\u00b6\n\n\nThe FQN of the Spring Boot Application class\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \napplicationClassPackage\n\u00b6\n\n\nThe package the Spring Boot Application class is in\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \napplicationClassSimpleName\n\u00b6\n\n\nThe simple name of the Spring Boot Application class\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn't exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn't found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nisMaven\n\u00b6\n\n\nIs this a Maven project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpring\n\u00b6\n\n\nIs this a Spring project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpringBoot\n\u00b6\n\n\nIs this a Spring Boot project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \njavaFileCount\n\u00b6\n\n\nReturn the number of Java files in this module\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackages\n\u00b6\n\n\nList the packages in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nrenamePackage\n\u00b6\n\n\nRename the given package. All package under it will also be renamed\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noldPackage\n\n\nclass java.lang.String\n\n\nOld package name\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe new package name\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "SpringBootProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#type-springbootproject",
            "text": "Spring Boot project",
            "title": "Type: SpringBootProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#springbootproject-operations",
            "text": "",
            "title": "SpringBootProject Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-annotatebootapplication",
            "text": "Add the given annotation to the Spring Boot application class",
            "title": "Operation: annotateBootApplication"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_4",
            "text": "Name  Type  Description      pkg  class java.lang.String  The package of the annotation    annotationName  class java.lang.String  The annotation to add",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-applicationclassfqn",
            "text": "The FQN of the Spring Boot Application class",
            "title": "Operation: applicationClassFQN"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-applicationclasspackage",
            "text": "The package the Spring Boot Application class is in",
            "title": "Operation: applicationClassPackage"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-applicationclasssimplename",
            "text": "The simple name of the Spring Boot Application class",
            "title": "Operation: applicationClassSimpleName"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_9",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor's backing archive to the same path in project being edited. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor's backing archive. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor's backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_15",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor's backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_16",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn't exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_17",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn't found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_18",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_20",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_21",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_22",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_24",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_25",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_26",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_27",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_29",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_30",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_32",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-ismaven",
            "text": "Is this a Maven project?",
            "title": "Operation: isMaven"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_33",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-isspring",
            "text": "Is this a Spring project?",
            "title": "Operation: isSpring"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-isspringboot",
            "text": "Is this a Spring Boot project?",
            "title": "Operation: isSpringBoot"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-javafilecount",
            "text": "Return the number of Java files in this module",
            "title": "Operation: javaFileCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_37",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_38",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_39",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_40",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_41",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-name",
            "text": "Return the name of the project. If it's in GitHub, it will be the repo name. If it's on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_42",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_43",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_44",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-packages",
            "text": "List the packages in this project",
            "title": "Operation: packages"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_45",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_46",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-projects",
            "text": "Don't use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_47",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_48",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-renamepackage",
            "text": "Rename the given package. All package under it will also be renamed",
            "title": "Operation: renamePackage"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_49",
            "text": "Name  Type  Description      oldPackage  class java.lang.String  Old package name    newPackage  class java.lang.String  The new package name",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_50",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-spring-boot-project/#parameters_51",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/",
            "text": "Type: \nXml\n\u00b6\n\n\nXML\n\n\nXml\n Operations\n\u00b6\n\n\nOperation: \naddChildNode\n\u00b6\n\n\nAdd the specified content under the indicated xpath-selected node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to add the content under\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe new node name to be added as a child\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nXML document to be added under the indicated node\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceNode\n\u00b6\n\n\nAdds or replaces a node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparentNodeXPath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the parent node\n\n\n\n\n\n\nxPathOfNodeToReplace\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to replace\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe name of the node being placed\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nThe content of the node being placed\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nTests whether a node matching the given xpath expression is present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to test against for the presence of a node\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ndeleteNode\n\u00b6\n\n\nDeletes the specified node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to the node to delete\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetTextContentFor\n\u00b6\n\n\nGet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to retrieve the test content\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nsetTextContentFor\n\u00b6\n\n\nSet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to set the test content\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nNew text content for the XPath\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "Xml"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#type-xml",
            "text": "XML",
            "title": "Type: Xml"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#xml-operations",
            "text": "",
            "title": "Xml Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-addchildnode",
            "text": "Add the specified content under the indicated xpath-selected node",
            "title": "Operation: addChildNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath selector for the node to add the content under    newNode  class java.lang.String  The new node name to be added as a child    nodeContent  class java.lang.String  XML document to be added under the indicated node",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-addorreplacenode",
            "text": "Adds or replaces a node",
            "title": "Operation: addOrReplaceNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_1",
            "text": "Name  Type  Description      parentNodeXPath  class java.lang.String  The XPath selector for the parent node    xPathOfNodeToReplace  class java.lang.String  The XPath selector for the node to replace    newNode  class java.lang.String  The name of the node being placed    nodeContent  class java.lang.String  The content of the node being placed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-contains",
            "text": "Tests whether a node matching the given xpath expression is present",
            "title": "Operation: contains"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_4",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to test against for the presence of a node",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-deletenode",
            "text": "Deletes the specified node",
            "title": "Operation: deleteNode"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_6",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to the node to delete",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_7",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-gettextcontentfor",
            "text": "Get the text content for a specific xpath expression",
            "title": "Operation: getTextContentFor"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_10",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to retrieve the test content",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_13",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_15",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_20",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-settextcontentfor",
            "text": "Set the text content for a specific xpath expression",
            "title": "Operation: setTextContentFor"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_21",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to set the test content    newContent  class java.lang.String  New text content for the XPath",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-xml/#parameters_22",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/",
            "text": "Type: \nYml\n\u00b6\n\n\nYAML file.  If the file contains multiple YAML documents, only the first is parsed and addressable.\n\n\nYml\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file's permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nupdateKey\n\u00b6\n\n\nUpdate the value of a given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nName of the key to update\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nNew value for the key\n\n\n\n\n\n\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe YAML key whose content you want",
            "title": "Yml"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#type-yml",
            "text": "YAML file.  If the file contains multiple YAML documents, only the first is parsed and addressable.",
            "title": "Type: Yml"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#yml-operations",
            "text": "",
            "title": "Yml Operations"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-permissions",
            "text": "Return the file's permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_15",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_16",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-updatekey",
            "text": "Update the value of a given key",
            "title": "Operation: updateKey"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_17",
            "text": "Name  Type  Description      name  class java.lang.String  Name of the key to update    value  class java.lang.String  New value for the key",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference-docs/rug/extensions/rug-extension-yml/#parameters_18",
            "text": "Name  Type  Description      name  class java.lang.String  The YAML key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/escape/rug-javascript/",
            "text": "Escaping Rug into JavaScript\n\u00b6\n\n\nRug is intentionally limited, aiming for readability and focus rather\nthan general-purpose effectiveness. However, it makes it easy to\nescape to JavaScript at any time to perform more complex\ntasks. Currently there are two places where you can escape into\nJavaScript:\n\n\n\n\nJavaScript Expressions\n\n\nJavaScript Blocks\n\n\n\n\nEscaping into JavaScript Expressions\n\u00b6\n\n\nAnywhere an expression value is required, curly braces can be used to\nenclose a JavaScript statement or statements. As in Scala, the last\nstatement in the expression will be used as the value of the\nexpression. In the following example, the value of the JavaScript\nstatement is passed to the \nsetContent\n method on the \nfile\n type.\n\n\nwith File f when name = \"thing.txt\"\n  do setContent { f.content() + \"\\nAppend stuff\" }\n\n\n\n\n\nWhere a return value isn't required--for example, when a JavaScript\nblock manipulates the currently scoped variable--the special \neval\n\nfunction can be used, as follows:\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"thing.txt\"\n\n\n  \ndo\n \neval\n { f.setContent(f.content() + \"\\nAppend stuff\") }\n\n\n\n\n\n\nJavaScript expressions are also commonly used in predicates, like\nthis:\n\n\nwith\n \nFile\n \nf\n \nwhen\n \n{\n \nf\n.\nname\n().\ntoLowerCase\n().\ncontains\n(\n\"xyz\"\n)\n \n}\n\n\n  \ndo\n \neval\n { f.setContent(f.content() + \"\\nAppend stuff\") }\n\n\n\n\n\n\nA JavaScript expression block has a context that is automatically\npropagated by Rug. This includes:\n\n\n\n\nAll parameters to the Rug script. These can be accessed by name or via the \nparams\n map.\n\n\nAll computed parameters.\n\n\nThe current context object, which is accessed via the alias declared in the \nwith\n statement (\nf\n in the example above.)\n\n\nThe parent of the current context, accessible via the \nparent\n method on the context object.\n\n\n\n\nJavaScript execution is performed using Java Nashorn, with the Rug\nruntime creating a synthetic function to enclose the block.\n\n\n\n\nAll invocations on context objects must use\nparentheses or a reference error will occur.\n\n\n\n\nIn the case of multiple statements, a \nreturn\n statement should be\nused for the last expression:\n\n\ndo\n \nmyFunction\n \n{\n\n   \nvar\n \nx\n \n=\n \n\"y\"\n\n   \nvar\n \ny\n \n=\n \nx\n\n   \nreturn\n \ny\n;\n\n\n}\n\n\n\n\n\n\nFinally a JavaScript expression can be used to compute a Rug computed\nvalue, like this:\n\n\neditor\n \nTest\n\n\n\nparam\n \nname\n:\n \n^.*$\n\n\n\nlowerized\n \n=\n \n{\n \nname\n.\ntoLowerCase\n()\n \n}",
            "title": "Escaping Rug into JavaScript"
        },
        {
            "location": "/reference-docs/rug/escape/rug-javascript/#escaping-rug-into-javascript",
            "text": "Rug is intentionally limited, aiming for readability and focus rather\nthan general-purpose effectiveness. However, it makes it easy to\nescape to JavaScript at any time to perform more complex\ntasks. Currently there are two places where you can escape into\nJavaScript:   JavaScript Expressions  JavaScript Blocks",
            "title": "Escaping Rug into JavaScript"
        },
        {
            "location": "/reference-docs/rug/escape/rug-javascript/#escaping-into-javascript-expressions",
            "text": "Anywhere an expression value is required, curly braces can be used to\nenclose a JavaScript statement or statements. As in Scala, the last\nstatement in the expression will be used as the value of the\nexpression. In the following example, the value of the JavaScript\nstatement is passed to the  setContent  method on the  file  type.  with File f when name = \"thing.txt\"\n  do setContent { f.content() + \"\\nAppend stuff\" }  Where a return value isn't required--for example, when a JavaScript\nblock manipulates the currently scoped variable--the special  eval \nfunction can be used, as follows:  with   File   f   when   name   =   \"thing.txt\"     do   eval  { f.setContent(f.content() + \"\\nAppend stuff\") }   JavaScript expressions are also commonly used in predicates, like\nthis:  with   File   f   when   {   f . name (). toLowerCase (). contains ( \"xyz\" )   }     do   eval  { f.setContent(f.content() + \"\\nAppend stuff\") }   A JavaScript expression block has a context that is automatically\npropagated by Rug. This includes:   All parameters to the Rug script. These can be accessed by name or via the  params  map.  All computed parameters.  The current context object, which is accessed via the alias declared in the  with  statement ( f  in the example above.)  The parent of the current context, accessible via the  parent  method on the context object.   JavaScript execution is performed using Java Nashorn, with the Rug\nruntime creating a synthetic function to enclose the block.   All invocations on context objects must use\nparentheses or a reference error will occur.   In the case of multiple statements, a  return  statement should be\nused for the last expression:  do   myFunction   { \n    var   x   =   \"y\" \n    var   y   =   x \n    return   y ;  }   Finally a JavaScript expression can be used to compute a Rug computed\nvalue, like this:  editor   Test  param   name :   ^.*$  lowerized   =   {   name . toLowerCase ()   }",
            "title": "Escaping into JavaScript Expressions"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/",
            "text": "Rug CLI Commands and Syntax\n\u00b6\n\n\nThis page documents syntax and functionality of the Rug CLI.\n\n\nNote:\n All commands listed below are provided only as examples of the\nsyntax.  They may refer to Rugs and Rug archives or projects that do not exist and\ntherefore may not work.\n\n\nConfiguring\n\u00b6\n\n\nIn order to use the CLI the following file named \ncli.yml\n needs to be\nplaced in \n~/.atomist\n.  The contents of the simplest possible\n\ncli.yml\n are below.\n\n\n# Set up the path to the local repository\n\n\nlocal-repository\n:\n\n  \npath\n:\n \n\"${user.home}/.atomist/repository\"\n\n\n\n# Set up remote repositories to query for Rug archives. Additionally one of the\n\n\n# repositories can also be enabled for publication (publish: true).\n\n\nremote-repositories\n:\n\n  \nmaven-central\n:\n\n    \npublish\n:\n \nfalse\n\n    \nurl\n:\n \n\"http://repo.maven.apache.org/maven2/\"\n\n  \nrug-types\n:\n\n    \npublish\n:\n \nfalse\n\n    \nurl\n:\n \n\"https://atomist.jfrog.io/atomist/libs-release\"\n\n  \nrugs\n:\n\n    \npublish\n:\n \nfalse\n\n    \nurl\n:\n \n\"https://atomist.jfrog.io/atomist/rugs-release\"\n\n\n\n\n\n\nThe Rug CLI will create the above \ncli.yml\n if you do not already have\none.\n\n\nCommands\n\u00b6\n\n\nThe CLI will assume the current working directory to be the root for execution.\n\n\nUsing the CLI as Rug users\n\u00b6\n\n\nInvoking Editors\n\u00b6\n\n\nRun an editor as follows:\n\n\n$ rug edit atomist-rugs:common-editors:AddReadme --artifact-version \n1\n.0.0 \n\\\n\n    \nparameter1\n=\nfoo \nparameter2\n=\nbar\n\n$ rug edit atomist-rugs:common-editors:AddReadme \nparameter1\n=\nfoo \nparameter2\n=\nbar\n\n\n\n\n\nartifact-version\n is optional and defaults to \nlatest\n semantics.\n\n--change-dir\n or \n-C\n for giving a generator a target directory.\n\n\nInvoking Generators\n\u00b6\n\n\n$ rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService\n\" \\\n\n\n    --artifact-version 1.0.0 my-new-project parameter1=foo parameter2=bar\n\n\n$\n rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService\"\n \n\\\n\n    my-new-project \nparameter1\n=\nfoo \nparameter2\n=\nbar\n\n\n\n\n\nartifact-version\n is optional and defaults to \nlatest\n semantics.\n\n--change-dir\n or \n-C\n for giving a generator a target directory.\n\n\nDescribing Rug Artifacts\n\u00b6\n\n\nTo get information about a Rug and list all its parameters, run the\n\nrug describe\n command.\n\n\n$ rug describe archive atomist-rugs:spring-rest-service\n\n$ rug describe editor atomist-rugs:spring-boot-rest-service:SpringBootThing \n\\\n\n    --artifact-version \n1\n.0.0\n\n$ rug describe generator atomist-rugs:spring-boot-rest-service:NewSpringBootThing \n\\\n\n    --artifact-version \n1\n.0.0\n\n\n\n\n\nListing Local Archives\n\u00b6\n\n\nTo list all locally available Rug archives, run the \nrug list\n\ncommand:\n\n\n$ rug list -f \n'version=[1.2,2.0)'\n -f \n'group=*atomist*'\n -f \n'artifact=*sp?ing*'\n\n\n\n\n\n\nThe local listing can be filtered by using \n-f\n filter expressions on\n\ngroup\n, \nartifact\n and \nversion\n. \ngroup\n and \nartifact\n support\nwildcards of \n*\n and \n?\n.  \nversion\n takes any version constraint.\n\n\nUsing the CLI as Rug developer\n\u00b6\n\n\nAll the following commands need to executed from within the Rug\nproject directory.\n\n\nRunning Tests\n\u00b6\n\n\nTo run all tests:\n\n\n$ rug \ntest\n\n\n\n\n\n\nTo run a specific named test:\n\n\n$ rug \ntest\n \n\"Whatever Test Secanrio\"\n\n\n\n\n\n\nTo run all scenarios from a .rt file:\n\n\n$ rug \ntest\n MyRugTestFilename\n\n\n\n\n\nInstalling a Rug archive\n\u00b6\n\n\nCreating a Rug zip archive and installing it into the local repository\ncan be done with the following command:\n\n\n$ rug install\n\n\n\n\n\nThis command packages the project into a zip archive, creates a Pom\nand installs both into the local repository under, usually\n\n.atomist/repository\n.\n\n\nDependency Resolution\n\u00b6\n\n\nThe Rug CLI will automatically resolve and download the dependencies\nof the given Rug archive when \nedit\n or \ngenerate\n is invoked. The\narchives along with their dependencies will be downloaded to a local\nrepository under \n~/.atomist\n via Aether and resolved from there.\n\n\nTherefore running above commands is a two step process:\n\n\n\n\nSearch and resolve (eventually download) the archive referenced in\n    the command.  The result of a resolution is cached for 60\n    minutes. You can force re-resolution with the \n-r\n command-line\n    option.\n\n\nStart up \nrug-lib\n passing parameters over to run the editor or\n    generator\n\n\n\n\nAdvanced Topics\n\u00b6\n\n\nTurning on Verbose output for Debugging\n\u00b6\n\n\nIf you want a more verbose output that includes any exceptions that\nRug command may have encountered, please add \n-X\n to your command.\nFor example:\n\n\n$ rug \ntest\n -X",
            "title": "Rug CLI Command Reference"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#rug-cli-commands-and-syntax",
            "text": "This page documents syntax and functionality of the Rug CLI.  Note:  All commands listed below are provided only as examples of the\nsyntax.  They may refer to Rugs and Rug archives or projects that do not exist and\ntherefore may not work.",
            "title": "Rug CLI Commands and Syntax"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#configuring",
            "text": "In order to use the CLI the following file named  cli.yml  needs to be\nplaced in  ~/.atomist .  The contents of the simplest possible cli.yml  are below.  # Set up the path to the local repository  local-repository : \n   path :   \"${user.home}/.atomist/repository\"  # Set up remote repositories to query for Rug archives. Additionally one of the  # repositories can also be enabled for publication (publish: true).  remote-repositories : \n   maven-central : \n     publish :   false \n     url :   \"http://repo.maven.apache.org/maven2/\" \n   rug-types : \n     publish :   false \n     url :   \"https://atomist.jfrog.io/atomist/libs-release\" \n   rugs : \n     publish :   false \n     url :   \"https://atomist.jfrog.io/atomist/rugs-release\"   The Rug CLI will create the above  cli.yml  if you do not already have\none.",
            "title": "Configuring"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#commands",
            "text": "The CLI will assume the current working directory to be the root for execution.",
            "title": "Commands"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#using-the-cli-as-rug-users",
            "text": "",
            "title": "Using the CLI as Rug users"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#invoking-editors",
            "text": "Run an editor as follows:  $ rug edit atomist-rugs:common-editors:AddReadme --artifact-version  1 .0.0  \\ \n     parameter1 = foo  parameter2 = bar\n\n$ rug edit atomist-rugs:common-editors:AddReadme  parameter1 = foo  parameter2 = bar  artifact-version  is optional and defaults to  latest  semantics. --change-dir  or  -C  for giving a generator a target directory.",
            "title": "Invoking Editors"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#invoking-generators",
            "text": "$ rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService \" \\      --artifact-version 1.0.0 my-new-project parameter1=foo parameter2=bar \n\n$  rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService\"   \\ \n    my-new-project  parameter1 = foo  parameter2 = bar  artifact-version  is optional and defaults to  latest  semantics. --change-dir  or  -C  for giving a generator a target directory.",
            "title": "Invoking Generators"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#describing-rug-artifacts",
            "text": "To get information about a Rug and list all its parameters, run the rug describe  command.  $ rug describe archive atomist-rugs:spring-rest-service\n\n$ rug describe editor atomist-rugs:spring-boot-rest-service:SpringBootThing  \\ \n    --artifact-version  1 .0.0\n\n$ rug describe generator atomist-rugs:spring-boot-rest-service:NewSpringBootThing  \\ \n    --artifact-version  1 .0.0",
            "title": "Describing Rug Artifacts"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#listing-local-archives",
            "text": "To list all locally available Rug archives, run the  rug list \ncommand:  $ rug list -f  'version=[1.2,2.0)'  -f  'group=*atomist*'  -f  'artifact=*sp?ing*'   The local listing can be filtered by using  -f  filter expressions on group ,  artifact  and  version .  group  and  artifact  support\nwildcards of  *  and  ? .   version  takes any version constraint.",
            "title": "Listing Local Archives"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#using-the-cli-as-rug-developer",
            "text": "All the following commands need to executed from within the Rug\nproject directory.",
            "title": "Using the CLI as Rug developer"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#running-tests",
            "text": "To run all tests:  $ rug  test   To run a specific named test:  $ rug  test   \"Whatever Test Secanrio\"   To run all scenarios from a .rt file:  $ rug  test  MyRugTestFilename",
            "title": "Running Tests"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#installing-a-rug-archive",
            "text": "Creating a Rug zip archive and installing it into the local repository\ncan be done with the following command:  $ rug install  This command packages the project into a zip archive, creates a Pom\nand installs both into the local repository under, usually .atomist/repository .",
            "title": "Installing a Rug archive"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#dependency-resolution",
            "text": "The Rug CLI will automatically resolve and download the dependencies\nof the given Rug archive when  edit  or  generate  is invoked. The\narchives along with their dependencies will be downloaded to a local\nrepository under  ~/.atomist  via Aether and resolved from there.  Therefore running above commands is a two step process:   Search and resolve (eventually download) the archive referenced in\n    the command.  The result of a resolution is cached for 60\n    minutes. You can force re-resolution with the  -r  command-line\n    option.  Start up  rug-lib  passing parameters over to run the editor or\n    generator",
            "title": "Dependency Resolution"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#advanced-topics",
            "text": "",
            "title": "Advanced Topics"
        },
        {
            "location": "/reference-docs/rug/rug-cli-commands/#turning-on-verbose-output-for-debugging",
            "text": "If you want a more verbose output that includes any exceptions that\nRug command may have encountered, please add  -X  to your command.\nFor example:  $ rug  test  -X",
            "title": "Turning on Verbose output for Debugging"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/",
            "text": "Rug Conventions & Best Practices\n\u00b6\n\n\nRug \nis\n the Atomist API and is implemented in its own \nDomain Specific Language (DSL)\n as well as TypeScript variants. Rug is currently used to define\nproject \ngenerators\n, \neditors\n,\nreviewers (coming soon), \npredicates\n and \ntests\n.\nIn addition, the Rug runtime exposes these concepts to JavaScript\n(with first class support for \nTypeScript\n) for those classes of problems\nfor which the DLS is too constraining.\n\n\nAs with any language and environment, there is a set of idioms and\ncommon practices that will turn your Rug from \nnice\n to \ngreat\n (and\nin some contexts from \nnot working\n to\n\nworking\n). Collectively these are the \nRug Conventions\n.\n\n\nExemplar\n\u00b6\n\n\nThe \natomist/travis-editors\n Rug repository is\na good example repository.  We strive to keep that repository up to\ndate with these conventions.  It has good documentation and examples\nof both a Rug DSL and TypeScript editors.  When going through the\nconventions below, we encourage you to reference that repository for\nconcrete examples.\n\n\nRug Projects\n\u00b6\n\n\nA \nRug project\n is simply any project that contains a conforming\n\n.atomist\n directory and a \nmanifest.yml\n description of the project. A minimal\n directory layout would only contain:\n\n\n.atomist/\n  manifest.yml\n\n\n\n\n\nA fuller example directory layout for a larger collection of Rug artifacts would be:\n\n\n.atomist/\n  editors/\n  handlers/\n  reviewers/\n  templates/\n  tests/\n  manifest.yml\n\n\n\n\n\nThe \nmanifest.yml\n file should contain the following general information and formatting:\n\n\ngroup\n:\n \natomist-rugs\n\n\nartifact\n:\n \ntravis-editors\n\n\nversion\n:\n \n\"0.12.2\"\n\n\nrequires\n:\n \n\"[0.11.0,1.0.0)\"\n\n\ndependencies\n:\n\n\nextensions\n:\n\n\n\n\n\n\nThere is a \nRug generator available\n that will create a minimal Rug project for you.\n\n\nRug Project Repositories\n\u00b6\n\n\nRug project source code repositories should have a good \nREADME.md\n\ncontaining the following information at minimum:\n\n\n\n\nA general description of the intent of the Rugs in the project,\n    i.e., what ties them all together, at the top of the README.\n\n\nA section named \nRugs\n that has a subsection for each Rug.\n\n\nA section for each Rug in the project with\n\n\nAn explanation of what the Rug does, e.g., how will the\n    source code be changed after running the editor.\n\n\nA subsection named \nPrerequisites\n describing what must be in\n    place before running the Rug.\n\n\nA subsection named \nParameters\n describing the Rug's input\n    parameters, including examples of valid input values.\n\n\nA subsection named \nRunning\n describing how to run the Rug and\n    providing examples of how to run the Rug.\n\n\n\n\n\n\nA \nSupport\n section providing information on how to get help\n    with the Rugs in the project.\n\n\nA \nDevelopment\n section providing information on how one would\n    modify and test the Rugs.\n\n\n\n\nPublic Rug repositories should be automatically built, tested\nand deployed using \nTravis CI\n.  The Travis CI build status\nbadge and the Slack badge for the Atomist Community should be placed\nin the \nREADME.md\n between the page title and the general description.\nHere is the Markdown text to add the Slack badge:\n\n\n[![Slack Status](https://join.atomist.com/badge.svg)](https://join.atomist.com)\n\n\n\n\n\nRug repositories should have a change log in\nthe \nCHANGELOG.md\n format\n.\n\n\nRug DSL and TypeScript Files\n\u00b6\n\n\nRug files should have the \n.rug\n extension when written using the\nDSL and the standard TypeScript \n.ts\n extension when written in\nTypeScript.  You can safely intermix Rug DSL and TypeScript Rugs in\nthe same project.  Rug files should placed in the following locations\nwithin a \nRug project\n.  Rug editors and generators should be in\n\n.atomist/editors\n and Rug reviewers should be in \n.atomist/reviewers\n.\n\n\nBDD-style tests for your Rugs are strongly recommended and should be\nlocated within a \n.atomist/tests\n directory and have the \n.rt\n\nextension.\n\n\nIf your Rugs, typically editors, use any templates, they are placed in\nthe \n.atomist/templates\n directory.\n\n\nRug Naming\n\u00b6\n\n\nRug editors, generators, reviewers, predicates should have their names\nformatted using \nUpperCamelCase\n.\n\n\nFollowing the rule of making implicit concepts explicit, the name of\nyour Rug should correspond to a complete and specific description of\nthe purpose of the Rug.\n\n\nFor example, \nAddDocker\n is a good name if the Rug adds Docker to\nanything, but \nAddDockerToMavenProjects\n is better if the intention of\nthe Rug is to only work with projects that follow Maven conventions.\n\n\nWhile a Rug \n.rug\n file can contain many different editors,\ngenerators, reviewers and predicates, the Rug runtime\nenforces that the first Rug definition in a \n.rug\n file should match\nthe name of the file itself. Therefore Rug files should be formatted\nusing UpperCamelCase to match the name of the first Rug definition in\nthe file.\n\n\nFurther, Rugs within the same file are conventionally understood to be\nin support of the main and initial Rug in the file.\n\n\nRug Predicate Naming\n\u00b6\n\n\nRug predicates in Rug DSL need to be in their own \n.rug\n file if they\nare to be reused by other Rugs or even external Rug projects and are\nformatted according to the same UpperCamelCase rules as editors,\ngenerators and reviewers.\n\n\nIn addition, a Rug predicate should be named according to what it\nincludes. For example, \nIsMavenProject\n would be a good name for a\npredicate that will ensure, if applied to an editor, that the\ncorresponding editor could only be applied if the target met the\nconditions to be considered a Maven project.\n\n\nRug Project Configuration\n\u00b6\n\n\nRug project configuration is stored in a file in the \n.atomist\n\ndirectory.  Rug projects that contain Rug DSL Rugs have their\nconfiguration stored in \n.atomist/manifest.yml\n.  Rug projects using\nTypeScript should also include a \n.atomist/package.json\n describing\nany dependencies\n\n\nThe Rug \n.atomist/manifest.yml\n should describe the Rug project\naccording to the following rules:\n\n\n\n\n\n\ngroup\n: The organisation behind this Rug project. Most commonly\n    the GitHub organisation in which they reside.\n\n\n\n\n\n\nartifact\n: Name of the Rug archive (see next section)\n\n\n\n\n\n\nversion\n: \nSemantic version\n of this Rug project\n\n\n\n\n\n\nrequires\n: Specify the exact, or bounded, version of the Rug\n    language that your Rug project has been tested against.\n\n\n\n\n\n\nIf you are using the Rug TypeScript approach, then the corresponding\n\npackage.json\n in the \n.atomist\n is only used for dependencies and any other\nmetadata require by the TypeScript compiler. The Atomist typings are added as\nfollows:\n\n\n\n\ndependencies\n: At a minimum specifies the version of the Rug\n    typings module that your Rug project has been tested against in the form\n    \n{ \"@atomist/rug\": \"<rug-version>\" }\n\n\n\n\nNOTE: Adding the typings above does \nnot\n control the version of Rug itself. The manifest.yml file does this\n\n\nRug Project Naming\n\u00b6\n\n\nA Rug project name should be hyphenated and start with the technology\nstack being targeted, such as \nspring-boot\n, followed by \n-editors\n if\nthis is a Rug project with a collection of useful editors or reviewers.\n\n\nIf the main purpose of a Rug project is to be a generator, then ending\nthe name of the type of project it will generate would be most\nappropriate.  For example if your Rug projects's main purpose was to be\na generator for a Spring Boot Rest Service then\n\nspring-boot-rest-service\n or even \njava-spring-boot-rest-service\n\nwould be appropriate. If your Rug projects's main purpose was simply to\ngenerate a valid Maven project then \nmaven-project\n would be appropriate.\n\n\nRug DSL \ntag\n Annotations\n\u00b6\n\n\nYour Rugs should be annotated with a collection of \ntag\n annotations\nto optimise their discoverability. For example if you were to\ncreate an editor that affected the \nreadme\n \ndocumentation\n then the\nfollowing \ntag\n annotations would be applicable.\n\n\n@tag\n \n\"readme\"\n\n\n@tag\n \n\"documentation\"\n\n\n\n\n\n\nTag values should consist of only lower case letters, numbers, and\ndashes (\n-\n).\n\n\nPlease try to make sure at least one of the tags on your Rug maps to\nan image.  The following tags currently have images: \ndocker\n,\n\ngithub\n, \ntravis-ci\n, \napache\n, \ngit\n, \nspring-boot\n, \nspring\n,\n\nclojure\n, \ngo\n, \njava\n, \npython\n, \nscala\n, and \ndocumentation\n.\n\n\nRug DSL \ndescription\n Annotations\n\u00b6\n\n\nRug editors, generators, reviewers, predicates, and parameters can have an\naccompanying \ndescription\n annotation such as:\n\n\n@description\n \n\"adds a project specific README\"\n\n\n\n\n\n\nA good description states exactly what the purpose of the Rug is\n\nwithout capitalisation on the sentence\n and \nwithout a closing\nperiod\n. The reason for avoiding sentence punctuation is that the\ndescription is often used by the Atomist Bot and the grammar of its\nusage is context-driven at that point.  Ideally the \ndescription\n\nshould be a sentence fragment and as short as possible.\n\n\nParameters\n\u00b6\n\n\nRug parameters are part of the public contract for invoking that\nRug. They should follow \nsnake_case\n rules and describe, as\nexplicitly as possible, what the parameter is to contain.\n\n\nThe Mandatory \nproject_name\n Parameter in Rug Generators\n\u00b6\n\n\nThe \nproject_name\n parameter is special when declared inside a\n\ngenerator\n and so must be included otherwise your Rug will likely\nfail to run.\n\n\nIt is recommended that you limit the \nproject_name\n parameter to 21\ncharacters in length as the new project name will often be used by\nAtomist to construct a corresponding Slack channel and if the project\nname is longer than 21 characters then some character-loss will occur.\n\n\nParameter Descriptions and Display Names\n\u00b6\n\n\nAs Rug parameters are part of the public contract to the editor,\ngenerator, reviewers, executor or predicate it is recommended that a\nhuman-readable description and display name always be applied using\nthe \n@description\n and \n@displayName\n annotations.\n\n\nSee the \ndescription annotation\n section\nabove for information on the content of the parameter \n@description\n\nannotation.  The \n@displayName\n annotation value should be three words\nor less and use Title Case.\n\n\nParameter Validation\n\u00b6\n\n\nIt is recommended that all parameters should be restricted using the\nmost explicit and constraining regular expression that is appropriate\nfor the corresponding parameter.  In addition, you should provide a\nmeaningful value for the \n@validInput\n parameter annotation so, when\npeople provide an invalid value, they are provided with a useful error\nmessage.\n\n\nMandatory and Optional Parameters\n\u00b6\n\n\nIf a parameter is optionally provided on invocation, using the\n\n@optional\n annotation, then it is recommended to supply a valid\n\n@default\n annotation also so that there is some predictability of how\nthe Rug will function if no parameter is supplied.\n\n\nTypeScript Decorators\n\u00b6\n\n\nThere are TypeScript equivalents to the Rug DSL annotations described above, and\nthey follow the same conventions:\n\n\n...\n\n\n@Editor\n(\n\"Simple\"\n,\n \n\"My simple editor\"\n)\n\n\n@Tags\n(\n\"simple\"\n,\n \n\"decorators\"\n)\n\n\nclass\n \nSimpleEditor\n \n{\n\n    \n@Parameter\n({\ndescription\n:\n \n\"The name\"\n,\n \npattern\n:\n \n\"^.*$$\"\n})\n\n    \nname\n: \nstring\n \n=\n \n\"Not reserved\"\n\n\n...\n\n\n\n\nThe \n@Editir\n decorator labels the class as an \neditor\n, with \nname\n and \ndescription\n\nas its two parameters respectively. \n@Generator\n and \n@Reviewer\n are the TypeScript\ndecorator equivalents of the \ngenerator\n and \nreviewer\n DSL keywords. The \n@Tags\n decorator takes a variable number of strings and \n@Parameter\n is used to declare parameters. TypeScript parameter declarations support the equivalent fields as Rug DSL and conform to the following\ninterface:\n\n\ninterface\n \nParameter\n \n{\n\n  \npattern\n: \nstring\n\n  \nrequired?\n: \nboolean\n\n  \ndescription?\n: \nstring\n\n  \ndisplayName?\n: \nstring\n\n  \nvalidInput?\n: \nstring\n\n  \ndisplayable?\n: \nboolean\n\n  \nmaxLength?\n: \nnumber\n\n  \nminLength?\n: \nnumber\n\n  \ntags?\n: \nstring\n[]\n\n\n}\n\n\n\n\nThe name and default value of a parameter are taken from the code itself.\n\n\nRug DSL: \nlet\n Declarations\n\u00b6\n\n\nRug DSL \nlet\n declarations can be used to initialise some labels with\na corresponding value. It is recommended that these labels should be\nformatted according\nto \nsnake_case\n rules\nsimilarly to Rug parameters.\n\n\nRug DSL: Avoiding \nBegin\n and \nEnd\n when there is only a Single \ndo\n Action\n\u00b6\n\n\nIf your \nwith\n statement only has a single corresponding \ndo\n action\nthen you should omit the \nbegin\n and \nend\n block demarcations.\n\n\nFor example the following is legal but the \nbegin\n and \nend\n\nstatements are not required:\n\n\nwith\n \nfile\n \nwhen\n \npath\n \n=\n \n\"README.md\"\n\n\n  \nbegin\n\n\n    \ndo\n \nreplace\n \n\"{{creation_date}}\"\n \n{\n \nnew\n \nDate\n().toISOString().split('T')[0] }\n\n\n  \nend\n\n\n\n\n\n\nIt is preferable to omit the \nbegin\n and \nend\n statements entirely\nwhen there is only a single associated \ndo\n action:\n\n\nwith file when path = \"README.md\"\n  do replace \"{{creation_date}}\" { new Date().toISOString().split('T')[0] }\n\n\n\n\n\nRug DSL: Indenting Blocks with \nBegin\n and \nEnd\n\u00b6\n\n\nWhen multiple actions are being applied it is important to nest those\n\ndo\n actions within a \nbegin\n and \nend\n block.  It is conventional to\nplace the \nbegin\n indented two spaces on the next line and then to\nindent the \ndo\n statements two more spaces before a closing \nend\n\nstatement indented at the same level as the \nbegin\n:\n\n\nwith\n \npom\n \np\n \nwhen\n \npath\n \n=\n \n\"pom.xml\"\n\n\n  \nbegin\n\n\n    \ndo\n \nsetArtifactId\n  \nartifact_id\n\n\n    \ndo\n \nsetGroupId\n \ngroup_id\n\n\n    \ndo\n \nsetVersion\n \nversion\n\n\n    \ndo\n \nsetProjectName\n \nname\n\n\n    \ndo\n \nsetDescription\n \ndescription\n\n\n  \nend\n\n\n\n\n\n\nRug DSL: Labelling Selections Only When They Are Used\n\u00b6\n\n\nSometimes when selecting a particular Rug Type, such as \npom\n or\n\nfile\n, it is important to expose what has been selected using a\nlabel, such as \np\n. For example:\n\n\nwith\n \nfile\n \nf\n \nwhen\n \npath\n \n=\n \n\"README.md\"\n\n\n  \ndo\n \nreplace\n \n\"{{creation_date}}\" { f.name() + \"\n \ncreated\n \non\n \n\" + new Date().toISOString().split('\nT\n')[0] }\n\n\n\n\n\n\nHowever if the selected type is not being used then the label should\nbe omitted as it will not be used, for example:\n\n\nwith\n \nfile\n \nwhen\n \npath\n \n=\n \n\"README.md\"\n\n\n  \ndo\n \nreplace\n \n\"{{creation_date}}\"\n \n{\n \nnew\n \nDate\n().toISOString().split('T')[0] }\n\n\n\n\n\n\nIn the above example you can see that the \nf\n label for the selected\nfile is not required as it is never used.s\n\n\nRug DSL: Comments\n\u00b6\n\n\nComments should be used only when they add something that the Rug code\nitself doesn't state.  Self-documenting code is preferable over\nseparate documentation if the code can be better made to express what\nwould have been put in the documentation anyway.",
            "title": "Rug Conventions"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-conventions-best-practices",
            "text": "Rug  is  the Atomist API and is implemented in its own  Domain Specific Language (DSL)  as well as TypeScript variants. Rug is currently used to define\nproject  generators ,  editors ,\nreviewers (coming soon),  predicates  and  tests .\nIn addition, the Rug runtime exposes these concepts to JavaScript\n(with first class support for  TypeScript ) for those classes of problems\nfor which the DLS is too constraining.  As with any language and environment, there is a set of idioms and\ncommon practices that will turn your Rug from  nice  to  great  (and\nin some contexts from  not working  to working ). Collectively these are the  Rug Conventions .",
            "title": "Rug Conventions &amp; Best Practices"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#exemplar",
            "text": "The  atomist/travis-editors  Rug repository is\na good example repository.  We strive to keep that repository up to\ndate with these conventions.  It has good documentation and examples\nof both a Rug DSL and TypeScript editors.  When going through the\nconventions below, we encourage you to reference that repository for\nconcrete examples.",
            "title": "Exemplar"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-projects",
            "text": "A  Rug project  is simply any project that contains a conforming .atomist  directory and a  manifest.yml  description of the project. A minimal\n directory layout would only contain:  .atomist/\n  manifest.yml  A fuller example directory layout for a larger collection of Rug artifacts would be:  .atomist/\n  editors/\n  handlers/\n  reviewers/\n  templates/\n  tests/\n  manifest.yml  The  manifest.yml  file should contain the following general information and formatting:  group :   atomist-rugs  artifact :   travis-editors  version :   \"0.12.2\"  requires :   \"[0.11.0,1.0.0)\"  dependencies :  extensions :   There is a  Rug generator available  that will create a minimal Rug project for you.",
            "title": "Rug Projects"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-project-repositories",
            "text": "Rug project source code repositories should have a good  README.md \ncontaining the following information at minimum:   A general description of the intent of the Rugs in the project,\n    i.e., what ties them all together, at the top of the README.  A section named  Rugs  that has a subsection for each Rug.  A section for each Rug in the project with  An explanation of what the Rug does, e.g., how will the\n    source code be changed after running the editor.  A subsection named  Prerequisites  describing what must be in\n    place before running the Rug.  A subsection named  Parameters  describing the Rug's input\n    parameters, including examples of valid input values.  A subsection named  Running  describing how to run the Rug and\n    providing examples of how to run the Rug.    A  Support  section providing information on how to get help\n    with the Rugs in the project.  A  Development  section providing information on how one would\n    modify and test the Rugs.   Public Rug repositories should be automatically built, tested\nand deployed using  Travis CI .  The Travis CI build status\nbadge and the Slack badge for the Atomist Community should be placed\nin the  README.md  between the page title and the general description.\nHere is the Markdown text to add the Slack badge:  [![Slack Status](https://join.atomist.com/badge.svg)](https://join.atomist.com)  Rug repositories should have a change log in\nthe  CHANGELOG.md  format .",
            "title": "Rug Project Repositories"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-and-typescript-files",
            "text": "Rug files should have the  .rug  extension when written using the\nDSL and the standard TypeScript  .ts  extension when written in\nTypeScript.  You can safely intermix Rug DSL and TypeScript Rugs in\nthe same project.  Rug files should placed in the following locations\nwithin a  Rug project .  Rug editors and generators should be in .atomist/editors  and Rug reviewers should be in  .atomist/reviewers .  BDD-style tests for your Rugs are strongly recommended and should be\nlocated within a  .atomist/tests  directory and have the  .rt \nextension.  If your Rugs, typically editors, use any templates, they are placed in\nthe  .atomist/templates  directory.",
            "title": "Rug DSL and TypeScript Files"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-naming",
            "text": "Rug editors, generators, reviewers, predicates should have their names\nformatted using  UpperCamelCase .  Following the rule of making implicit concepts explicit, the name of\nyour Rug should correspond to a complete and specific description of\nthe purpose of the Rug.  For example,  AddDocker  is a good name if the Rug adds Docker to\nanything, but  AddDockerToMavenProjects  is better if the intention of\nthe Rug is to only work with projects that follow Maven conventions.  While a Rug  .rug  file can contain many different editors,\ngenerators, reviewers and predicates, the Rug runtime\nenforces that the first Rug definition in a  .rug  file should match\nthe name of the file itself. Therefore Rug files should be formatted\nusing UpperCamelCase to match the name of the first Rug definition in\nthe file.  Further, Rugs within the same file are conventionally understood to be\nin support of the main and initial Rug in the file.",
            "title": "Rug Naming"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-predicate-naming",
            "text": "Rug predicates in Rug DSL need to be in their own  .rug  file if they\nare to be reused by other Rugs or even external Rug projects and are\nformatted according to the same UpperCamelCase rules as editors,\ngenerators and reviewers.  In addition, a Rug predicate should be named according to what it\nincludes. For example,  IsMavenProject  would be a good name for a\npredicate that will ensure, if applied to an editor, that the\ncorresponding editor could only be applied if the target met the\nconditions to be considered a Maven project.",
            "title": "Rug Predicate Naming"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-project-configuration",
            "text": "Rug project configuration is stored in a file in the  .atomist \ndirectory.  Rug projects that contain Rug DSL Rugs have their\nconfiguration stored in  .atomist/manifest.yml .  Rug projects using\nTypeScript should also include a  .atomist/package.json  describing\nany dependencies  The Rug  .atomist/manifest.yml  should describe the Rug project\naccording to the following rules:    group : The organisation behind this Rug project. Most commonly\n    the GitHub organisation in which they reside.    artifact : Name of the Rug archive (see next section)    version :  Semantic version  of this Rug project    requires : Specify the exact, or bounded, version of the Rug\n    language that your Rug project has been tested against.    If you are using the Rug TypeScript approach, then the corresponding package.json  in the  .atomist  is only used for dependencies and any other\nmetadata require by the TypeScript compiler. The Atomist typings are added as\nfollows:   dependencies : At a minimum specifies the version of the Rug\n    typings module that your Rug project has been tested against in the form\n     { \"@atomist/rug\": \"<rug-version>\" }   NOTE: Adding the typings above does  not  control the version of Rug itself. The manifest.yml file does this",
            "title": "Rug Project Configuration"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-project-naming",
            "text": "A Rug project name should be hyphenated and start with the technology\nstack being targeted, such as  spring-boot , followed by  -editors  if\nthis is a Rug project with a collection of useful editors or reviewers.  If the main purpose of a Rug project is to be a generator, then ending\nthe name of the type of project it will generate would be most\nappropriate.  For example if your Rug projects's main purpose was to be\na generator for a Spring Boot Rest Service then spring-boot-rest-service  or even  java-spring-boot-rest-service \nwould be appropriate. If your Rug projects's main purpose was simply to\ngenerate a valid Maven project then  maven-project  would be appropriate.",
            "title": "Rug Project Naming"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-tag-annotations",
            "text": "Your Rugs should be annotated with a collection of  tag  annotations\nto optimise their discoverability. For example if you were to\ncreate an editor that affected the  readme   documentation  then the\nfollowing  tag  annotations would be applicable.  @tag   \"readme\"  @tag   \"documentation\"   Tag values should consist of only lower case letters, numbers, and\ndashes ( - ).  Please try to make sure at least one of the tags on your Rug maps to\nan image.  The following tags currently have images:  docker , github ,  travis-ci ,  apache ,  git ,  spring-boot ,  spring , clojure ,  go ,  java ,  python ,  scala , and  documentation .",
            "title": "Rug DSL tag Annotations"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-description-annotations",
            "text": "Rug editors, generators, reviewers, predicates, and parameters can have an\naccompanying  description  annotation such as:  @description   \"adds a project specific README\"   A good description states exactly what the purpose of the Rug is without capitalisation on the sentence  and  without a closing\nperiod . The reason for avoiding sentence punctuation is that the\ndescription is often used by the Atomist Bot and the grammar of its\nusage is context-driven at that point.  Ideally the  description \nshould be a sentence fragment and as short as possible.",
            "title": "Rug DSL description Annotations"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#parameters",
            "text": "Rug parameters are part of the public contract for invoking that\nRug. They should follow  snake_case  rules and describe, as\nexplicitly as possible, what the parameter is to contain.",
            "title": "Parameters"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#the-mandatory-project_name-parameter-in-rug-generators",
            "text": "The  project_name  parameter is special when declared inside a generator  and so must be included otherwise your Rug will likely\nfail to run.  It is recommended that you limit the  project_name  parameter to 21\ncharacters in length as the new project name will often be used by\nAtomist to construct a corresponding Slack channel and if the project\nname is longer than 21 characters then some character-loss will occur.",
            "title": "The Mandatory project_name Parameter in Rug Generators"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#parameter-descriptions-and-display-names",
            "text": "As Rug parameters are part of the public contract to the editor,\ngenerator, reviewers, executor or predicate it is recommended that a\nhuman-readable description and display name always be applied using\nthe  @description  and  @displayName  annotations.  See the  description annotation  section\nabove for information on the content of the parameter  @description \nannotation.  The  @displayName  annotation value should be three words\nor less and use Title Case.",
            "title": "Parameter Descriptions and Display Names"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#parameter-validation",
            "text": "It is recommended that all parameters should be restricted using the\nmost explicit and constraining regular expression that is appropriate\nfor the corresponding parameter.  In addition, you should provide a\nmeaningful value for the  @validInput  parameter annotation so, when\npeople provide an invalid value, they are provided with a useful error\nmessage.",
            "title": "Parameter Validation"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#mandatory-and-optional-parameters",
            "text": "If a parameter is optionally provided on invocation, using the @optional  annotation, then it is recommended to supply a valid @default  annotation also so that there is some predictability of how\nthe Rug will function if no parameter is supplied.",
            "title": "Mandatory and Optional Parameters"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#typescript-decorators",
            "text": "There are TypeScript equivalents to the Rug DSL annotations described above, and\nthey follow the same conventions:  ...  @Editor ( \"Simple\" ,   \"My simple editor\" )  @Tags ( \"simple\" ,   \"decorators\" )  class   SimpleEditor   { \n     @Parameter ({ description :   \"The name\" ,   pattern :   \"^.*$$\" }) \n     name :  string   =   \"Not reserved\"  ...  \n\nThe  @Editir  decorator labels the class as an  editor , with  name  and  description \nas its two parameters respectively.  @Generator  and  @Reviewer  are the TypeScript\ndecorator equivalents of the  generator  and  reviewer  DSL keywords. The  @Tags  decorator takes a variable number of strings and  @Parameter  is used to declare parameters. TypeScript parameter declarations support the equivalent fields as Rug DSL and conform to the following\ninterface:  interface   Parameter   { \n   pattern :  string \n   required? :  boolean \n   description? :  string \n   displayName? :  string \n   validInput? :  string \n   displayable? :  boolean \n   maxLength? :  number \n   minLength? :  number \n   tags? :  string []  }  \n\nThe name and default value of a parameter are taken from the code itself.",
            "title": "TypeScript Decorators"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-let-declarations",
            "text": "Rug DSL  let  declarations can be used to initialise some labels with\na corresponding value. It is recommended that these labels should be\nformatted according\nto  snake_case  rules\nsimilarly to Rug parameters.",
            "title": "Rug DSL: let Declarations"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-avoiding-begin-and-end-when-there-is-only-a-single-do-action",
            "text": "If your  with  statement only has a single corresponding  do  action\nthen you should omit the  begin  and  end  block demarcations.  For example the following is legal but the  begin  and  end \nstatements are not required:  with   file   when   path   =   \"README.md\"     begin       do   replace   \"{{creation_date}}\"   {   new   Date ().toISOString().split('T')[0] }     end   It is preferable to omit the  begin  and  end  statements entirely\nwhen there is only a single associated  do  action:  with file when path = \"README.md\"\n  do replace \"{{creation_date}}\" { new Date().toISOString().split('T')[0] }",
            "title": "Rug DSL: Avoiding Begin and End when there is only a Single do Action"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-indenting-blocks-with-begin-and-end",
            "text": "When multiple actions are being applied it is important to nest those do  actions within a  begin  and  end  block.  It is conventional to\nplace the  begin  indented two spaces on the next line and then to\nindent the  do  statements two more spaces before a closing  end \nstatement indented at the same level as the  begin :  with   pom   p   when   path   =   \"pom.xml\"     begin       do   setArtifactId    artifact_id       do   setGroupId   group_id       do   setVersion   version       do   setProjectName   name       do   setDescription   description     end",
            "title": "Rug DSL: Indenting Blocks with Begin and End"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-labelling-selections-only-when-they-are-used",
            "text": "Sometimes when selecting a particular Rug Type, such as  pom  or file , it is important to expose what has been selected using a\nlabel, such as  p . For example:  with   file   f   when   path   =   \"README.md\"     do   replace   \"{{creation_date}}\" { f.name() + \"   created   on   \" + new Date().toISOString().split(' T ')[0] }   However if the selected type is not being used then the label should\nbe omitted as it will not be used, for example:  with   file   when   path   =   \"README.md\"     do   replace   \"{{creation_date}}\"   {   new   Date ().toISOString().split('T')[0] }   In the above example you can see that the  f  label for the selected\nfile is not required as it is never used.s",
            "title": "Rug DSL: Labelling Selections Only When They Are Used"
        },
        {
            "location": "/reference-docs/rug/rug-conventions/#rug-dsl-comments",
            "text": "Comments should be used only when they add something that the Rug code\nitself doesn't state.  Self-documenting code is preferable over\nseparate documentation if the code can be better made to express what\nwould have been put in the documentation anyway.",
            "title": "Rug DSL: Comments"
        },
        {
            "location": "/reference-docs/system-integrations/",
            "text": "Current Integrated Systems\n\u00b6\n\n\nAtomist aims to give you the best experiences across industry leading\nsoftware development collaboration tools.  While much of the\ninteractivity of Atomist with various development platforms and\nsystems is done via Rugs, some external systems are core enough to the\nAtomist experience that they require tighter integrations.  These\ninclude chat platforms and source code repositories.  Currently, the\nAtomist platform integrates with the following third-party platforms:\n\n\n\n\nGitHub\n\n\nSlack\n\n\n\n\nWe are always working to improve the developer experience, including\nincreasing the number integrations we support as demand dictates.\n\nCheck back here often as we are always working on growing this\nlist.",
            "title": "Atomist Integrations"
        },
        {
            "location": "/reference-docs/system-integrations/#current-integrated-systems",
            "text": "Atomist aims to give you the best experiences across industry leading\nsoftware development collaboration tools.  While much of the\ninteractivity of Atomist with various development platforms and\nsystems is done via Rugs, some external systems are core enough to the\nAtomist experience that they require tighter integrations.  These\ninclude chat platforms and source code repositories.  Currently, the\nAtomist platform integrates with the following third-party platforms:   GitHub  Slack   We are always working to improve the developer experience, including\nincreasing the number integrations we support as demand dictates. Check back here often as we are always working on growing this\nlist.",
            "title": "Current Integrated Systems"
        }
    ]
}